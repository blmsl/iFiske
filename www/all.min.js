angular.module("ifiske",["ionic","ifiske.controllers","ifiske.directives","ifiske.api","ifiske.db","ifiske.utils","ifiske.update","ifiske.filters","ionic.ion.headerShrink","ngCordova","systemBrowser","ngCordovaSms","ngMessages","ImgCache","leaflet-directive","tabSlideBox"]).constant("$ionicLoadingConfig",{template:"<ion-spinner></ion-spinner>"}).run(["$ionicPlatform","Update","ImgCache",function(e,t,n){e.ready(function(){window.ionic&&window.ionic.Keyboard&&window.ionic.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&window.StatusBar.styleDefault(),n.$init(),t.update()})}]).config(["$stateProvider","$urlRouterProvider","$ionicConfigProvider","ImgCacheProvider",function(e,t,n,o){o.setOptions({debug:!0,usePersistentCache:!0}),o.manualInit=!0,n.views.forwardCache(!0),n.backButton.previousTitleText(!1).text(""),n.tabs.position("bottom");var r="/app/login";window.localStorage.getItem("session")&&(r="/app/home"),t.otherwise(r),e.state("app",{url:"/app",templateUrl:"components/menu/menu.html",controller:"MenuCtrl"}).state("app.login",{url:"/login",templateUrl:"components/login/login.html",controller:"LoginCtrl"}).state("app.recover",{url:"/recover",templateUrl:"components/recover/recover.html",controller:"RecoverCtrl"}).state("app.recover.lostpassword",{url:"/lostpassword",templateUrl:"components/recover/lostpassword.html"}).state("app.recover.resetpassword",{url:"/resetpassword",templateUrl:"components/recover/resetpassword.html"}).state("app.register",{url:"/register",templateUrl:"components/register/register.html",controller:"RegisterCtrl"}).state("app.register.details",{url:"/details",templateUrl:"components/register/register_details.html"}).state("app.register.verify",{url:"/verify",templateUrl:"components/register/register_verify.html"}).state("app.home",{url:"/home",templateUrl:"components/home/home.html",controller:"HomeCtrl"}).state("app.info",{url:"/info",templateUrl:"components/info/info.html"}).state("app.bugs",{url:"/info",templateUrl:"components/menu/report.html"}).state("app.contact",{url:"/contact",templateUrl:"components/contact/contact.html",controller:"ContactCtrl"}).state("app.legal",{url:"/legal",templateUrl:"components/legal/legal.html",controller:"LegalCtrl"}).state("app.about",{url:"/about",templateUrl:"components/about/about.html",controller:"AboutCtrl"}).state("app.userinfo",{url:"/userinfo",controller:"UserCtrl",templateUrl:"components/user/user.html"}).state("app.counties",{url:"/counties",templateUrl:"components/counties/counties.html",controller:"CountiesCtrl"}).state("app.areas",{url:"/areas",params:{id:!1,county:!1,search:""},templateUrl:"components/area_list/area_list.html",controller:"AreasCtrl"}).state("app.cards",{url:"/cards",templateUrl:"components/user_cards/user_cards.html",controller:"UserCardsCtrl"}).state("app.favorites",{url:"/favorites",templateUrl:"components/favorites/favorites.html"}).state("app.fishes",{url:"/fishes",templateUrl:"components/fishes/fishes.html",controller:"FishesCtrl"}).state("app.fishdetail",{url:"/fishdetail/:id",params:{id:!1,fish:!1},templateUrl:"components/fish_detail/fish_detail.html",controller:"FishDetailCtrl"}).state("app.map",{url:"/map",templateUrl:"components/map/map.html",controller:"MapCtrl"}).state("app.techniques",{url:"/techniques",templateUrl:"components/techniques/techniques.html",controller:"TechniquesCtrl"}).state("app.techniquedetail",{url:"/techniquedetail/:id",params:{id:!1,tech:!1},templateUrl:"components/technique_detail/technique_detail.html",controller:"TechniqueDetailCtrl"}).state("app.area",{url:"/area/:id",views:{"@app":{templateUrl:"components/area/area.html",controller:"AreaCtrl"},"info@app.area":{templateUrl:"components/area/info.html"},"map@app.area":{templateUrl:"components/area/map.html"},"fishinfo@app.area":{templateUrl:"components/area/fish.html"},"cards@app.area":{templateUrl:"components/area/cards.html"}}})}]),angular.module("ifiske.controllers",[]),angular.module("ifiske.directives",[]),angular.module("ifiske.controllers").controller("AboutCtrl",["$scope","$cordovaAppVersion","$ionicPlatform","Update",function(e,t,n,o){e.version=e.dbDate="Okänt",e.update=o,n.ready(function(){window.cordova&&t.getAppVersion().then(function(t){console.log("iFiske version:",t),e.version=t})})}]),angular.module("ifiske.controllers").controller("AreaCtrl",["$scope","$ionicHistory","localStorage","$stateParams","DB","$ionicSlideBoxDelegate","$ionicModal","leafletEvents","$ionicPlatform","$cordovaGeolocation","$cordovaDeviceOrientation","$timeout",function(e,t,n,o,r,i,s,a,l,u,c,p){function f(t){e.map.markers.mypos2?(angular.extend(e.map.markers.mypos2,t),e.map.markers.mypos=e.map.markers.mypos2,delete e.map.markers.mypos2):(angular.extend(e.map.markers.mypos,t),e.map.markers.mypos2=e.map.markers.mypos,delete e.map.markers.mypos)}function m(){return console.log(e),e.map.markers.mypos||e.map.markers.mypos2}l.ready(function(){u.watchPosition({frequency:3e3}).then(null,function(e){console.error(e)},function(e){p(function(){f({lat:e.coords.latitude,lng:e.coords.longitude})})}),c.watchHeading({frequency:3e3}).then(null,function(e){console.error(e)},function(e){p(function(){f({iconAngle:e.trueHeading})})})}),e.map={center:{},markers:{mypos:{lat:0,lng:0,iconAngle:0,message:"This is you!"}}},e.image_endpoint="http://www.ifiske.se";var d={};e.navigate=function(){console.log(e);m();launchnavigator.navigate([e.navto.lat,e.navto.lng],null,function(){console.log("Opening navigator")},function(){alert("Navigation failed!")})};var g=["popupopen","popupclose"];e.events={enabled:g},e.$on("leafletDirectiveMarker.popupopen",function(t,n){e.navto=n.model}),e.$on("leafletDirectiveMarker.popupclose",function(){e.navto=null}),r.getArea(o.id).then(function(t){e.map.center={lat:t.lat,lng:t.lng,zoom:Number(t.zoom)?Number(t.zoom):9},e.images=t.images,e.area=t,i.$getByHandle("tabs").update(),r.getOrganization(t.orgid).then(function(t){e.org=t}),r.getPoiTypes().then(function(n){for(var o=0;o<n.length;++o){var i=n[o];d[i.ID]={iconUrl:"http://www.ifiske.se/"+i.icon,iconAnchor:[16,37],popupAnchor:[0,-35]}}r.getPois(t.orgid).then(function(n){for(var o=0;o<n.length;++o){var r=n[o];e.map.markers["poi"+o]={layer:"pois",lat:r.la,lng:r.lo,icon:d[r.type],message:r.t}}e.map.markers.area={layer:"pois",lat:t.lat,lng:t.lng,message:t.t}},function(e){console.error(e)}),r.getPolygons(t.orgid).then(function(t){e.map.paths=t.map(function(e){return{latlngs:JSON.parse("["+e.poly+"]"),color:e.c,weight:2,opacity:.5,fillColor:e.c,type:"polygon"}})},function(e){console.error(e)})})},function(e){console.log(e)}),r.getAreaFishes(o.id).then(function(t){e.fishes=t,i.$getByHandle("tabs").update()},function(e){console.log(e)}),r.getProductsByArea(o.id).then(function(t){e.products=t,i.$getByHandle("tabs").update()},function(e){console.log(e)}),e.sortorder="-amount",e.smsterms=n.get("sms_terms"),e.predicate="so",s.fromTemplateUrl("components/area/sms_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.sms_modal=t}),e.openModal=function(t){e.sms_modal.show(),e.product=t},e.closeModal=function(){e.sms_modal.hide()},e.showTerms=function(){e.showingterms=!e.showingterms},e.showingterms=!1,s.fromTemplateUrl("components/area/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.sms_modal.remove(),e.rules_modal.remove()}),e.gotoProducts=function(){i.$getByHandle("tabs").slide(1)},angular.extend(e.map,{layers:{baselayers:{outdoors:{name:"Utomhuskarta",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}},satellite:{name:"Satellit",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.satellite",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{pois:{name:"Ställen",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1,disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}},paths:{}})}]),angular.module("ifiske.controllers").controller("AreasCtrl",["$scope","$stateParams","$ionicScrollDelegate","DB",function(e,t,n,o){var r=t.search;e.search=r,e.county=t.county,o.search("",t.id).then(function(t){e.areas=t},function(e){console.log(e)}),e.clearSearch=function(){e.search=""},e.scrollTop=function(){n.scrollTop()}}]),angular.module("ifiske.controllers").controller("ContactCtrl",["$scope","$state","localStorage",function(e,t,n){e.contactInfo=n.get("contactInfo")}]),angular.module("ifiske.controllers").controller("CountiesCtrl",["$scope","DB",function(e,t){t.getCounties().then(function(t){e.counties=t},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("FishDetailCtrl",["$scope","$stateParams","DB",function(e,t,n){e.fish=t.fish,e.image_endpoint="http://www.ifiske.se",e.fish||n.getFish(t.id).then(function(t){e.fish=t,console.log(e.fish)},function(e){console.log(e)}),console.log(e.fish)}]),angular.module("ifiske.controllers").controller("FishesCtrl",["$scope","DB",function(e,t){e.sortorder="so",e.image_endpoint="http://www.ifiske.se",t.getFishes().then(function(t){e.fishes=t,e.default_img=t[0].img},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("HomeCtrl",["$scope","$state","$ionicHistory","localStorage","sessionData",function(e,t,n,o,r){e.loggedIn=r,o.set("homeHistoryId",n.currentHistoryId()),e.myFunc=function(e){13!=e.keyCode||e.shiftKey||t.go("app.areas",{search:e.srcElement.value})}}]),angular.module("ifiske.controllers").controller("LegalCtrl",["$scope","$state","localStorage",function(e,t,n){e.tos=n.get("tos")}]),angular.module("ifiske.controllers").controller("LoginCtrl",["$scope","$state","Update","$ionicLoading","$ionicHistory","$ionicViewSwitcher",function(e,t,n,o,r,i){e.signIn=function(r){o.show(),n.user_login(r.username.$viewValue,r.password.$viewValue).then(function(){o.hide(),r.$setValidity("loginError",!0),i.nextDirection("forward"),t.go("app.home")},function(t){o.hide(),r.$setValidity("loginError",!1),e.error=t.response})},e.skip=function(){i.nextDirection("forward"),r.nextViewOptions({disableBack:!0,historyRoot:!0}),t.go("app.home")}}]),angular.module("ifiske.controllers").controller("MapCtrl",["$scope","leafletData","$ionicPlatform","DB","$cordovaGeolocation","$cordovaDeviceOrientation","$timeout",function(e,t,n,o,r,i,s){function a(t){e.markers.mypos2?(angular.extend(e.markers.mypos2,t),e.markers.mypos=e.markers.mypos2,delete e.markers.mypos2):(angular.extend(e.markers.mypos,t),e.markers.mypos2=e.markers.mypos,delete e.markers.mypos)}angular.extend(e,{center:{lat:62,lng:15,zoom:5},layers:{baselayers:{outdoors:{name:"Utomhuskarta",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}},satellite:{name:"Satellit",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.satellite",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{fishareas:{name:"Fiskeområden",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1,disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}},markers:{mypos:{lat:0,lng:0,iconAngle:0,message:"hi!"}}}),n.ready(function(){r.watchPosition({frequency:3e3}).then(null,function(e){console.error(e)},function(e){s(function(){a({lat:e.coords.latitude,lng:e.coords.longitude})})}),i.watchHeading({frequency:3e3}).then(null,function(e){console.error(e)},function(e){s(function(){a({iconAngle:e.trueHeading})})})}),o.search("").then(function(t){for(var n=0;n<t.length;++n){var o=t[n];e.markers["area"+n]={layer:"fishareas",lat:o.lat,lng:o.lng,getMessageScope:function(){var t=e.$new();return t.area=o,t},message:'<a ui-sref="app.area({id: area.ID })">{{area.t}}</a>'}}})}]),angular.module("ifiske.controllers").controller("MenuCtrl",["$scope","$state","$ionicViewSwitcher","$ionicPopover","sessionData","Update",function(e,t,n,o,r,i){e.sessionData=r,o.fromTemplateUrl("components/menu/popover.html",{scope:e}).then(function(t){e.popover=t}),e.userinfo=function(){e.popover.hide(),t.go("app.userinfo")},e.logout=function(){e.popover.hide(),i.user_logout(),t.go("app.login")},e.login=function(){e.popover.hide(),n.nextDirection("back"),t.go("app.login")},e.register=function(){e.popover.hide(),t.go("app.register.details")},e.forcedUpdate=function(){i.forcedUpdate()}}]),angular.module("ifiske.controllers").controller("RecoverCtrl",["$scope","$state","$ionicHistory","$ionicPlatform","$ionicLoading","$cordovaToast","API",function(e,t,n,o,r,i,s){"use strict";var a="";e.skip=function(){e.info="",t.go("^.resetpassword")},e.lostPassword=function(n){r.show(),a=n.user.$viewValue,s.user_lost_password(a).then(function(n){e.info="En återställningskod kommer skickas till dig inom kort, via ",n.mailed&&(e.info+="e-mail",n.texted&&(e.info+=" och ")),n.texted&&(e.info+="sms"),e.info+=".",t.go("^.resetpassword")},function(){n.user.$setValidity("invalidUser",!1)})["finally"](r.hide)},e.resetPassword=function(e){r.show(),s.user_reset_password(a,e.password.$viewValue,e.code.$viewValue).then(function(e){console.log(e),o.ready(function(){i.showLongBottom("Ditt lösenord har ändrats")}),n.goToHistoryRoot(n.currentView().historyId)},function(e){console.log(e)})["finally"](r.hide)}}]),angular.module("ifiske.controllers").controller("RegisterCtrl",["$scope","$state","$ionicLoading","$ionicModal","$ionicScrollDelegate","API","localStorage",function(e,t,n,o,r,i,s){var a;e.checkUsername=function(e){i.user_exists(e.$viewValue).then(function(t){e.$setValidity("nameTaken",!t)})},e.checkEmail=function(e){i.user_exists(null,e.$viewValue).then(function(t){e.$setValidity("emailTaken",!t)})},e.formErrors={},e.register=function(o){n.show(),e.phone=o.phone.$viewValue,a=o.username.$viewValue;var s=o.password.$viewValue,l=o.fullname.$viewValue,u=o.email.$viewValue;i.user_register(a,l,s,u,e.phone).then(function(){n.hide(),t.go("^.verify")},function(t){e.formErrors.registrationError=!0,r.scrollTop(!0),8==t.error_code&&o.email.$setValidity("invalidEmail",!1),9==t.error_code&&(e.checkUsername(o.username),e.checkEmail(o.email)),10==t.error_code&&o.phone.$setValidity("invalidPhone",!1),n.hide()})},e.verify=function(e){n.show();var o=e.vercode;i.user_confirm(a,o.$viewValue).then(function(){o.$setValidity("verified",!0),t.go("app.login")},function(){o.$setValidity("verified",!1)})["finally"](n.hide())},e.tos=s.get("tos"),o.fromTemplateUrl("components/register/eula.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.eula=t}),e.showEula=function(){e.eula.show()},e.closeEula=function(){e.eula.hide()},e.$on("$destroy",function(){e.eula.remove()})}]),angular.module("ifiske.controllers").controller("TechniqueDetailCtrl",["$scope","$stateParams","DB","$ionicSlideBoxDelegate",function(e,t,n,o){if(e.image_endpoint="http://www.ifiske.se",e.tech=t.tech,e.images=[],e.tech){var r=e.tech;e.images=[r.img1,r.img2,r.img3].filter(function(e){return!/\/$/.test(e)}),o.update()}else n.getTechnique(t.id).then(function(t){e.images=[t.img1,t.img2,t.img3].filter(function(e){return!/\/$/.test(e)}),o.update(),e.tech=t})}]),angular.module("ifiske.controllers").controller("TechniquesCtrl",["$scope","DB",function(e,t){t.getTechniques().then(function(t){console.log(t),e.techniques=t}),e.image_endpoint="http://www.ifiske.se",e.sortorder="so"}]),angular.module("ifiske.controllers").controller("UserCtrl",["$scope","DB",function(e,t){t.getUserInfo().then(function(t){e.user=t}),t.getUserNumbers().then(function(t){e.numbers=t})}]),angular.module("ifiske.controllers").controller("UserCardsCtrl",["$scope","$stateParams","DB","Update","$ionicModal",function(e,t,n,o,r){e.pred="-to",e.endpoint="https://www.ifiske.se";var i=function(){e.now=Date.now(),n.getUserProducts().then(function(t){e.products=t},function(e){console.log(e)})};e.$on("$ionicView.beforeEnter",i),r.fromTemplateUrl("components/area_cards/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),console.log(t),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.rules_modal.remove()}),e.update=function(){o.update()["finally"](function(){e.$broadcast("scroll.refreshComplete"),i()})}}]),function(e){"use strict";e.module("ifiske.api",["ifiske.utils"]).provider("API",function(){this.base_url="https://www.ifiske.se/api/v2/api.php",this.$get=["$http","sessionData","localStorage","$q",function(t,n,o,r){var i=this.base_url,s=function(n,o){return r(function(r,s){t({method:"get",url:i,params:e.extend(n,{key:"0123456789abcdef"}),timeout:5e3,cache:o!==!1}).success(function(e){"error"===e.status?s(e.message):e.data?r(e.data.response):s(e)}).error(function(e,t){s(0===t?new Error("Request timeout"):e)})})},a=function(t,o){var r=n.token;return s(e.extend(t,{s:r}),o)};return{get_municipalities:function(){return s({m:"get_municipalities"})},get_counties:function(){return s({m:"get_counties"})},user_exists:function(e,t){var n={m:"user_exists"};return e&&"string"==typeof e&&(n.username=e),t&&"string"==typeof t&&(n.email=t),s(n,!1)},user_register:function(e,t,n,o,r){return s({m:"user_register",username:e,fullname:t,password:n,email:o,phone:r},!1)},user_confirm:function(e,t){return s({m:"user_confirm",username:e,pin:t},!1)},user_info:function(){return a({m:"user_info"})},user_lost_password:function(e){return s({m:"user_lost_password",user_identification:e},!1)},user_reset_password:function(e,t,n){return s({m:"user_reset_password",user_identification:e,password:t,code:n},!1)},user_change_password:function(e,t){return a({m:"user_change_password",old_password:e,new_password:t},!1)},user_login:function(e,t){return s({m:"user_login",username:e,password:t},!1).then(function(e){return n.setToken(e),e})},user_logout:function(){a({m:"user_logout"},!1).then(function(){n.deleteToken()})},user_products:function(){return a({m:"user_products"},!1)},get_fishes:function(){return s({m:"get_fishes"})},get_techniques:function(){return s({m:"get_techniques"})},get_baits:function(){return s({m:"get_baits"})},get_organizations:function(e){return s({m:"get_organizations",orgid:e})},get_org_modified:function(e){return s({m:"get_org_modified",orgid:e})},get_areas:function(e){return s({m:"get_areas",areaid:e})},get_areas_modified:function(e){return s({m:"get_areas_modified",areaid:e})},get_products:function(e){return s({m:"get_products",areaid:e})},get_rules:function(e){return s({m:"get_rules",ruleid:e})},get_photos:function(e,t){return s({m:"get_photos",orgid:e,areaid:t})},get_map_pois:function(e){return s({m:"get_map_pois",orgid:e})},get_map_poi_types:function(){return s({m:"get_map_poi_types"})},get_map_polygons:function(e){return s({m:"get_map_polygons",orgid:e})},user_get_favorites:function(){return a({m:"user_get_favorites"},!1)},get_terms_of_service:function(){return s({m:"get_terms_of_service"})},get_contact_info:function(){return s({m:"get_contact_info"})},get_engine_policies:function(){return s({m:"get_engine_policies"})},get_sms_terms:function(){return s({m:"get_sms_terms"})}}}]})}(window.angular),function(e,t){"use strict";e.module("ifiske.db",[]).provider("DB",function(){this.$get=["$cordovaSQLite","API","$q",function(e,n,o){var r;if(window.sqlitePlugin)r=e.openDB("fiskebasen.db");else{if(!window.openDatabase)return console.log("Not supported on this device, sorry"),t;r=window.openDatabase("fiskebasen.db","1.0","fiskebasen",10485760)}var i={Area:[["ID","int"],["orgid","int"],["t","text"],["kw","text"],["note","text"],["c1","int"],["c2","int"],["c3","int"],["m1","int"],["m2","int"],["m3","int"],["lat","real"],["lng","real"],["zoom","text"],["pnt","int"],["car","int"],["eng","int"],["hcp","int"],["map","text"],["wsc","int"],["mod","int"],["d","text"]],Area_Fish:[["ID","text"],["aid","int"],["fid","int"],["amount","int"],["comment","text"]],Product:[["ID","int"],["t","text"],["t2","text"],["no","text"],["im","text"],["pf","text"],["ai","int"],["ri","int"],["ch","int"],["price","int"],["mod","int"],["so","int"],["hl","text"]],County:[["ID","int"],["s","text"],["t","text"],["d","text"]],Municipality:[["ID","int"],["cID","int"],["name","text"]],Fish:[["ID","int"],["t","text"],["d","text"],["mod","int"],["so","int"],["max","int"],["icon","text"],["img","text"],["in","text"],["geo","text"],["size","text"],["lat","text"],["rec","text"]],Rule:[["ID","int"],["ver","int"],["d","text"],["t","text"]],User_Product:[["ID","int"],["at","int"],["code","int"],["fr","int"],["fullname","text"],["ot","text"],["ref1","int"],["ref2","int"],["t","text"],["to","int"],["pid","int"],["pdf","text"]],User_Info:[["ID","int"],["username","text"],["loggedin","text"],["IP1","text"],["IP2","text"],["name","text"],["email","text"],["created","text"]],User_Number:[["number","text"]],Technique:[["ID","int"],["t","text"],["d","text"],["so","int"],["de","text"],["da","text"],["icon","text"],["img1","text"],["img2","text"],["img3","text"],["youtube","text"]],Organization:[["ID","int"],["t","text"],["d","text"],["cp","text"],["url","text"],["co","int"],["mod","int"],["vat","int"],["dp","int"],["fva","int"],["org","int"],["ml","int"]],Poi:[["ID","int"],["orgid","int"],["type","int"],["price","int"],["t","text"],["d","text"],["la","real"],["lo","real"]],Poi_Type:[["ID","int"],["t","text"],["icon","text"]],Polygon:[["ID","int"],["orgid","int"],["t","text"],["c","text"],["ver","int"],["mod","int"],["poly","text"]]},s=function(e){for(var t=[],n=0;n<e.rows.length;++n)t.push(e.rows.item(n));return t};return{populateTable:function(e,t){return o(function(n,o){r.transaction(function(n){n.executeSql("DELETE FROM "+e+";");for(var o in t){for(var r=t[o],s=[],a=0;a<i[e].length;++a)s.push(r[i[e][a][0]]);var l=["INSERT INTO",e,"VALUES(?",",?".repeat(s.length-1),")"].join(" ");n.executeSql(l,s)}},o,n)})},cleanTable:function(e){return o(function(t,n){r.transaction(function(t){t.executeSql("DELETE FROM "+e+";")},n,t)})},clean:function(){return o(function(e,t){r.transaction(function(e){for(var t in i)e.executeSql("DROP TABLE IF EXISTS "+t+";")},t,e)}).then(function(){console.log("Removed all tables")})},init:function(){return o(function(e,t){r.transaction(function(e){for(var t in i){for(var n=i[t],o=[],r=0;r<n.length;++r)o.push('"'+n[r][0]+'" '+n[r][1]);o=o.join(", ");var s=["CREATE TABLE IF NOT EXISTS",t,"(",o,", PRIMARY KEY(",'"'+n[0][0]+'"',"));"].join(" ");e.executeSql(s)}},t,e)})},getArea:function(t){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE id = ?"].join(" "),[t]).then(function(e){var t=s(e)[0];n.get_photos(t.orgid).then(function(e){t.images=e,o(t)},function(e){console.warn(e),o(t)})},i)})},getAreaFishes:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Area_Fish","JOIN Fish ON Area_Fish.fid = Fish.ID","WHERE Area_Fish.aid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},search:function(t,n){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE t LIKE ?",n?"AND c1 = ?":"","ORDER BY t"].join(" "),n?["%"+t+"%",n]:["%"+t+"%"]).then(function(e){o(s(e))},i)})},getProduct:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ID = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getProductsByArea:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ai = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getCounties:function(){return o(function(t,n){e.execute(r,["SELECT DISTINCT County.*","FROM County","JOIN Area ON Area.c1 = County.ID","ORDER BY County.t"].join(" ")).then(function(e){t(s(e))},n)})},getUserProducts:function(){return o(function(t,n){e.execute(r,["SELECT User_Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM User_Product","LEFT JOIN Product ON Product.ID = User_Product.pid","LEFT JOIN Rule ON Rule.ID = Product.ri"].join(" ")).then(function(e){t(s(e))},n)})},getFishes:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Fish"].join(" ")).then(function(e){t(s(e))},n)})},getFish:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Fish","WHERE id = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getTechniques:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Technique"].join(" ")).then(function(e){t(s(e))},n)})},getTechnique:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Technique","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getOrganization:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Organization","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getUserInfo:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Info"].join(" ")).then(function(e){t(s(e)[0])},n)})},getUserNumbers:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Number"].join(" ")).then(function(e){t(s(e))},n)})},getPois:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Poi","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},getPoiTypes:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM Poi_Type"].join(" ")).then(function(e){t(s(e))},n)})},getPolygons:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Polygon","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})}}}]})}(window.angular),angular.module("ifiske.filters",[]).filter("onebr",function(){return function(e){return e.replace(/(<br>\s*)+/g,"<br>")}}).filter("nobrs",function(){return function(e){return e.replace(/(<br(\s*\/)*>)+/g,"")}}).filter("cleantables",function(){return function(e){return e=e.replace(/(<\/?table>)+/g,""),e=e.replace(/(<\/?tr>)+/g,""),e=e.replace(/(<\/?th>)+/g,""),e=e.replace(/(<(\/?)td.*?>)+?/g,"<$2p>"),e=e.replace(/<p>\s*<\/p>/g,"")}}),function(e){"use strict";e.module("ifiske.update",["ifiske.api","ifiske.db","ifiske.utils"]).provider("Update",function(){this.$get=["API","DB","localStorage","$q","$ionicLoading","sessionData",function(e,t,n,o,r,i){var s="last_update",a=function(){return o.all([e.get_areas().then(function(e){var n=[];for(var r in e){var i=e[r].fish;for(var s in i)n.push({ID:r+"_"+s,fid:s,aid:r,amount:i[s][0],comment:i[s][1]})}return o.all([t.populateTable("Area",e),t.populateTable("Area_Fish",n)]).then(function(){console.log("Populated Area")},function(e){return console.log(e),o.reject(e)})}),e.get_products().then(function(e){return t.populateTable("Product",e).then(function(){console.log("Populated Product")},function(e){return console.log(e),o.reject(e)})}),e.get_counties().then(function(e){return t.populateTable("County",e).then(function(){console.log("Populated County")},function(e){return console.log(e),o.reject(e)})}),e.get_municipalities().then(function(e){return t.populateTable("Municipality",e).then(function(){console.log("Populated Municipality")},function(e){return console.log(e),o.reject(e)})}),e.get_fishes().then(function(e){return t.populateTable("Fish",e).then(function(){console.log("Populated Fish")},function(e){return console.log(e),o.reject(e)})}),e.get_rules().then(function(e){return t.populateTable("Rule",e).then(function(){console.log("Populated Rule")},function(e){return console.log(e),o.reject(e)})}),e.get_techniques().then(function(e){return t.populateTable("Technique",e).then(function(){console.log("Populated Technique")},function(e){return console.log(e),o.reject(e)})}),e.get_organizations().then(function(e){return t.populateTable("Organization",e).then(function(){console.log("Populated Organization")},function(e){return console.log(e),o.reject(e)})}),e.get_map_pois().then(function(e){return t.populateTable("Poi",e).then(function(){console.log("Populated Poi")},function(e){return console.log(e),o.reject(e)})}),e.get_map_poi_types().then(function(e){return t.populateTable("Poi_Type",e).then(function(){console.log("Populated Poi_Type")},function(e){return console.log(e),o.reject(e)})}),e.get_map_polygons().then(function(e){return t.populateTable("Polygon",e).then(function(){console.log("Populated Polygon")},function(e){return console.log(e),o.reject(e)})})])},l=function(){return o.all([e.user_products().then(function(e){return console.log(e),t.populateTable("User_Product",e).then(function(){console.log("Populated User_Product")},function(e){return console.log(e),o.reject(e)})}),e.user_info().then(function(e){for(var n=e.numbers,r=[],i=0;i<n.length;++i)r.push({number:n[i]});return o.all([t.populateTable("User_Info",[e]).then(function(){console.log("Populated User_Info")},function(t){return console.log(e),console.log(t),o.reject(t)}),t.populateTable("User_Number",r).then(function(){console.log("Populated User_Numbers")},function(e){return console.log(e),o.reject(e)})])})])},u=function(){return o.all([t.cleanTable("User_Product"),t.cleanTable("User_Number"),t.cleanTable("User_Info")]).then(function(){console.log("Removed user info from database")},function(e){console.log("Could not remove user data from database!",e)})},c=function(c){r.show();var p=Date.now(),f=0;c||(f=n.get(s));var m=6048e5;return p-f>m?(console.log(f,p,c),o.all([t.init().then(function(){return console.log("Initialized DB system"),i.token?o.all([l(),a()]):a()}).then(function(){console.log("Populated all the things"),n.set(s,p),r.hide()},function(o){return 7!==o.error_code?(console.warn("Got an error, will try to recreate all tables:",o),t.clean().then(function(){return t.init()}).then(function(){return a()}).then(function(){console.log("Populated all the things"),n.set(s,p),r.hide()},function(e){console.log("Still error, handle it!",e),r.hide()})):(u(),e.user_logout(),r.hide(),void 0)}),e.get_terms_of_service().then(function(e){n.set("tos",e)}),e.get_sms_terms().then(function(e){n.set("sms_terms",e)}),e.get_contact_info().then(function(e){n.set("contactInfo",e)})])):i.token?t.init().then(function(){console.log("Initialized DB system"),i.token&&l().then(function(){r.hide()},function(e){console.err(e),r.hide()}),r.hide()}):(console.log("no_update"),r.hide(),o.when("No update"))};return{update:function(){return c()},forcedUpdate:function(){return c(!0)},user_logout:function(){return u(),e.user_logout()},user_login:function(t,n){return e.user_login(t,n).then(function(){c()})},last_update:function(){return n.get(s)}}}]})}(window.angular),angular.module("ifiske.utils",[]).factory("localStorage",["$window",function(e){return{set:function(t,n){e.localStorage.setItem(t,n)},get:function(t){return e.localStorage.getItem(t)},remove:function(t){e.localStorage.removeItem(t)}}}]).service("sessionData",["localStorage",function(e){this.token=e.get("session"),this.setToken=function(t){e.set("session",t),this.token=t,console.log("token set")},this.deleteToken=function(){e.remove("session"),this.token=null,console.log("token unset")}}]),angular.module("ngCordovaSms",[]).directive("ngCordovaSms",["$cordovaSms","$ionicPopup",function(e,t){"use strict";return{restrict:"A",link:function(n,o,r){o.on("click",function(n){n.preventDefault(),t.prompt({title:"Skriv in ditt namn",inputType:"text"}).then(function(t){var n="FISKA "+r.ngCordovaSms+" "+t;e.send("72456",n,"INTENT",function(){console.log("succuess")},function(e){console.log(e)})})})}}}]),angular.module("ifiske.directives").directive("ifiskeInput",function(){return{restrict:"E",transclude:!0,scope:{name:"@",id:"@",label:"@",placeholder:"@",type:"@",ngPattern:"@",ngModel:"=?"},templateUrl:"directives/input_field/ifiske_input.html",controller:function(e){e.id=e.id||e.name,e.type=e.type||"text"
}}}),angular.module("systemBrowser",[]).directive("systemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){e.open(n[0].href,"_system"),t.preventDefault()})}}}]).directive("globalSystemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){t.target.href&&t.target.host!==window.location.host&&(e.open(t.target.href,"_system"),t.preventDefault())})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFib3V0L2Fib3V0X2NvbnRyb2xsZXIuanMiLCJhcmVhL2FyZWFfY29udHJvbGxlci5qcyIsImFyZWFfbGlzdC9hcmVhX2xpc3RfY29udHJvbGxlci5qcyIsImNvbnRhY3QvY29udGFjdF9jb250cm9sbGVyLmpzIiwiY291bnRpZXMvY291bnRpZXNfY29udHJvbGxlci5qcyIsImZpc2hfZGV0YWlsL2Zpc2hfZGV0YWlsX2NvbnRyb2xsZXIuanMiLCJmaXNoZXMvZmlzaGVzX2NvbnRyb2xsZXIuanMiLCJob21lL2hvbWVfY29udHJvbGxlci5qcyIsImxlZ2FsL2xlZ2FsX2NvbnRyb2xsZXIuanMiLCJsb2dpbi9sb2dpbl9jb250cm9sbGVyLmpzIiwibWFwL21hcF9jb250cm9sbGVyLmpzIiwibWVudS9tZW51X2NvbnRyb2xsZXIuanMiLCJyZWNvdmVyL3JlY292ZXJfY29udHJvbGxlci5qcyIsInJlZ2lzdGVyL3JlZ2lzdGVyX2NvbnRyb2xsZXIuanMiLCJ0ZWNobmlxdWVfZGV0YWlsL3RlY2huaXF1ZV9kZXRhaWxfY29udHJvbGxlci5qcyIsInRlY2huaXF1ZXMvdGVjaG5pcXVlc19jb250cm9sbGVyLmpzIiwidXNlci91c2VyX2NvbnRyb2xsZXIuanMiLCJ1c2VyX2NhcmRzL3VzZXJfY2FyZHNfY29udHJvbGxlci5qcyIsImFwaS5qcyIsImRiLmpzIiwiZmlsdGVyLmpzIiwidXBkYXRlLmpzIiwidXRpbHMuanMiLCJpZmlza2Vfc21zL2lmaXNrZV9zbXMuanMiLCJpbnB1dF9maWVsZC9pZmlza2VfaW5wdXQuanMiLCJzeXN0ZW1fYnJvd3Nlci9zeXN0ZW1fYnJvd3Nlci5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiLCJ0ZW1wbGF0ZSIsInJ1biIsIiRpb25pY1BsYXRmb3JtIiwiVXBkYXRlIiwiSW1nQ2FjaGUiLCJyZWFkeSIsIndpbmRvdyIsImlvbmljIiwiS2V5Ym9hcmQiLCJoaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIiLCJTdGF0dXNCYXIiLCJzdHlsZURlZmF1bHQiLCIkaW5pdCIsInVwZGF0ZSIsImNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiJGlvbmljQ29uZmlnUHJvdmlkZXIiLCJJbWdDYWNoZVByb3ZpZGVyIiwic2V0T3B0aW9ucyIsImRlYnVnIiwidXNlUGVyc2lzdGVudENhY2hlIiwibWFudWFsSW5pdCIsInZpZXdzIiwiZm9yd2FyZENhY2hlIiwiYmFja0J1dHRvbiIsInByZXZpb3VzVGl0bGVUZXh0IiwidGV4dCIsInRhYnMiLCJwb3NpdGlvbiIsImRlZmF1bHRVcmwiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwib3RoZXJ3aXNlIiwic3RhdGUiLCJ1cmwiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJwYXJhbXMiLCJpZCIsImNvdW50eSIsInNlYXJjaCIsImZpc2giLCJ0ZWNoIiwiQGFwcCIsImluZm9AYXBwLmFyZWEiLCJtYXBAYXBwLmFyZWEiLCJmaXNoaW5mb0BhcHAuYXJlYSIsImNhcmRzQGFwcC5hcmVhIiwiJHNjb3BlIiwiJGNvcmRvdmFBcHBWZXJzaW9uIiwidmVyc2lvbiIsImRiRGF0ZSIsImNvcmRvdmEiLCJnZXRBcHBWZXJzaW9uIiwidGhlbiIsImNvbnNvbGUiLCJsb2ciLCIkaW9uaWNIaXN0b3J5IiwiJHN0YXRlUGFyYW1zIiwiREIiLCIkaW9uaWNTbGlkZUJveERlbGVnYXRlIiwiJGlvbmljTW9kYWwiLCJsZWFmbGV0RXZlbnRzIiwiJGNvcmRvdmFHZW9sb2NhdGlvbiIsIiRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24iLCIkdGltZW91dCIsInVwZGF0ZU15cG9zIiwib2JqIiwibWFwIiwibWFya2VycyIsIm15cG9zMiIsImV4dGVuZCIsIm15cG9zIiwiZ2V0TXlwb3MiLCJ3YXRjaFBvc2l0aW9uIiwiZnJlcXVlbmN5IiwiZXJyb3IiLCJwb3MiLCJsYXQiLCJjb29yZHMiLCJsYXRpdHVkZSIsImxuZyIsImxvbmdpdHVkZSIsIndhdGNoSGVhZGluZyIsImhlYWRpbmciLCJpY29uQW5nbGUiLCJ0cnVlSGVhZGluZyIsImNlbnRlciIsIm1lc3NhZ2UiLCJpbWFnZV9lbmRwb2ludCIsImljb25zIiwibmF2aWdhdGUiLCJsYXVuY2huYXZpZ2F0b3IiLCJuYXZ0byIsImFsZXJ0IiwiZW5hYmxlZEV2ZW50cyIsImV2ZW50cyIsImVuYWJsZWQiLCIkb24iLCJldmVudCIsImFyZ3MiLCJtb2RlbCIsImdldEFyZWEiLCJhcmVhIiwiem9vbSIsIk51bWJlciIsImltYWdlcyIsIiRnZXRCeUhhbmRsZSIsImdldE9yZ2FuaXphdGlvbiIsIm9yZ2lkIiwib3JnIiwiZ2V0UG9pVHlwZXMiLCJwb2lfdHlwZXMiLCJpIiwibGVuZ3RoIiwidHlwZSIsIklEIiwiaWNvblVybCIsImljb24iLCJpY29uQW5jaG9yIiwicG9wdXBBbmNob3IiLCJnZXRQb2lzIiwicG9pcyIsInBvaSIsImxheWVyIiwibGEiLCJsbyIsInQiLCJlcnIiLCJnZXRQb2x5Z29ucyIsInBvbHlnb25zIiwicGF0aHMiLCJwb2x5IiwibGF0bG5ncyIsIkpTT04iLCJwYXJzZSIsImNvbG9yIiwiYyIsIndlaWdodCIsIm9wYWNpdHkiLCJmaWxsQ29sb3IiLCJnZXRBcmVhRmlzaGVzIiwiZmlzaGVzIiwiZ2V0UHJvZHVjdHNCeUFyZWEiLCJwcm9kdWN0cyIsInNvcnRvcmRlciIsInNtc3Rlcm1zIiwiZ2V0IiwicHJlZGljYXRlIiwiZnJvbVRlbXBsYXRlVXJsIiwic2NvcGUiLCJhbmltYXRpb24iLCJtb2RhbCIsInNtc19tb2RhbCIsIm9wZW5Nb2RhbCIsInByb2R1Y3QiLCJzaG93IiwiY2xvc2VNb2RhbCIsImhpZGUiLCJzaG93VGVybXMiLCJzaG93aW5ndGVybXMiLCJydWxlc19tb2RhbCIsIm9wZW5SdWxlc01vZGFsIiwiY2xvc2VSdWxlc01vZGFsIiwicmVtb3ZlIiwiZ290b1Byb2R1Y3RzIiwic2xpZGUiLCJsYXllcnMiLCJiYXNlbGF5ZXJzIiwib3V0ZG9vcnMiLCJuYW1lIiwibGF5ZXJPcHRpb25zIiwibWFwdHlwZSIsImFwaWtleSIsInNhdGVsbGl0ZSIsIm92ZXJsYXlzIiwidmlzaWJsZSIsInNob3dPblNlbGVjdG9yIiwiZGlzYWJsZUNsdXN0ZXJpbmdBdFpvb20iLCJjaHVua2VkTG9hZGluZyIsInNob3dDb3ZlcmFnZU9uSG92ZXIiLCJyZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kcyIsIiRpb25pY1Njcm9sbERlbGVnYXRlIiwiY29weSIsImRhdGEiLCJhcmVhcyIsImNsZWFyU2VhcmNoIiwic2Nyb2xsVG9wIiwiJHN0YXRlIiwiY29udGFjdEluZm8iLCJnZXRDb3VudGllcyIsImNvdW50aWVzIiwiZ2V0RmlzaCIsImdldEZpc2hlcyIsImRlZmF1bHRfaW1nIiwiaW1nIiwic2Vzc2lvbkRhdGEiLCJsb2dnZWRJbiIsInNldCIsImN1cnJlbnRIaXN0b3J5SWQiLCJteUZ1bmMiLCIkZXZlbnQiLCJrZXlDb2RlIiwic2hpZnRLZXkiLCJnbyIsInNyY0VsZW1lbnQiLCJ2YWx1ZSIsInRvcyIsIiRpb25pY0xvYWRpbmciLCIkaW9uaWNWaWV3U3dpdGNoZXIiLCJzaWduSW4iLCJsb2dpbkZvcm0iLCJ1c2VyX2xvZ2luIiwidXNlcm5hbWUiLCIkdmlld1ZhbHVlIiwicGFzc3dvcmQiLCIkc2V0VmFsaWRpdHkiLCJuZXh0RGlyZWN0aW9uIiwicmVzcG9uc2UiLCJza2lwIiwibmV4dFZpZXdPcHRpb25zIiwiZGlzYWJsZUJhY2siLCJoaXN0b3J5Um9vdCIsImxlYWZsZXREYXRhIiwiZmlzaGFyZWFzIiwiYSIsImdldE1lc3NhZ2VTY29wZSIsIm5ld19zY29wZSIsIiRuZXciLCIkaW9uaWNQb3BvdmVyIiwicG9wb3ZlciIsInVzZXJpbmZvIiwibG9nb3V0IiwidXNlcl9sb2dvdXQiLCJsb2dpbiIsInJlZ2lzdGVyIiwiZm9yY2VkVXBkYXRlIiwiJGNvcmRvdmFUb2FzdCIsIkFQSSIsInVzZXIiLCJpbmZvIiwibG9zdFBhc3N3b3JkIiwiZm9ybSIsInVzZXJfbG9zdF9wYXNzd29yZCIsIm1haWxlZCIsInRleHRlZCIsInJlc2V0UGFzc3dvcmQiLCJ1c2VyX3Jlc2V0X3Bhc3N3b3JkIiwiY29kZSIsInNob3dMb25nQm90dG9tIiwiZ29Ub0hpc3RvcnlSb290IiwiY3VycmVudFZpZXciLCJoaXN0b3J5SWQiLCJjaGVja1VzZXJuYW1lIiwiaW5wdXQiLCJ1c2VyX2V4aXN0cyIsImNoZWNrRW1haWwiLCJmb3JtRXJyb3JzIiwicGhvbmUiLCJmdWxsbmFtZSIsImVtYWlsIiwidXNlcl9yZWdpc3RlciIsInJlZ2lzdHJhdGlvbkVycm9yIiwiZXJyb3JfY29kZSIsInZlcmlmeSIsInZlcmNvZGUiLCJ1c2VyX2NvbmZpcm0iLCJldWxhIiwic2hvd0V1bGEiLCJjbG9zZUV1bGEiLCJpbWcxIiwiaW1nMiIsImltZzMiLCJmaWx0ZXIiLCJlbCIsInRlc3QiLCJnZXRUZWNobmlxdWUiLCJnZXRUZWNobmlxdWVzIiwidGVjaG5pcXVlcyIsImdldFVzZXJJbmZvIiwiZ2V0VXNlck51bWJlcnMiLCJudW1iZXJzIiwicHJlZCIsImVuZHBvaW50IiwiaW5pdGlsaXplIiwibm93IiwiRGF0ZSIsImdldFVzZXJQcm9kdWN0cyIsIiRicm9hZGNhc3QiLCJwcm92aWRlciIsInRoaXMiLCJiYXNlX3VybCIsIiRnZXQiLCIkaHR0cCIsIiRxIiwiYXBpX2NhbGwiLCJjYWNoZSIsImZ1bGZpbGwiLCJyZWplY3QiLCJtZXRob2QiLCJrZXkiLCJ0aW1lb3V0Iiwic3VjY2VzcyIsInN0YXR1cyIsIkVycm9yIiwic2Vzc2lvbl9hcGlfY2FsbCIsInNlc3Npb24iLCJ0b2tlbiIsInMiLCJnZXRfbXVuaWNpcGFsaXRpZXMiLCJtIiwiZ2V0X2NvdW50aWVzIiwicGluIiwidXNlcl9pbmZvIiwidXNlcl9pZGVudGlmaWNhdGlvbiIsInVzZXJfY2hhbmdlX3Bhc3N3b3JkIiwib2xkX3Bhc3N3b3JkIiwibmV3X3Bhc3N3b3JkIiwic2V0VG9rZW4iLCJkZWxldGVUb2tlbiIsInVzZXJfcHJvZHVjdHMiLCJnZXRfZmlzaGVzIiwiZ2V0X3RlY2huaXF1ZXMiLCJnZXRfYmFpdHMiLCJnZXRfb3JnYW5pemF0aW9ucyIsImdldF9vcmdfbW9kaWZpZWQiLCJnZXRfYXJlYXMiLCJhcmVhaWQiLCJnZXRfYXJlYXNfbW9kaWZpZWQiLCJnZXRfcHJvZHVjdHMiLCJnZXRfcnVsZXMiLCJydWxlaWQiLCJnZXRfcGhvdG9zIiwiZ2V0X21hcF9wb2lzIiwiZ2V0X21hcF9wb2lfdHlwZXMiLCJnZXRfbWFwX3BvbHlnb25zIiwidXNlcl9nZXRfZmF2b3JpdGVzIiwiZ2V0X3Rlcm1zX29mX3NlcnZpY2UiLCJnZXRfY29udGFjdF9pbmZvIiwiZ2V0X2VuZ2luZV9wb2xpY2llcyIsImdldF9zbXNfdGVybXMiLCJ1bmRlZmluZWQiLCIkY29yZG92YVNRTGl0ZSIsImRiIiwic3FsaXRlUGx1Z2luIiwib3BlbkRCIiwib3BlbkRhdGFiYXNlIiwidGFibGVEZWYiLCJBcmVhIiwiQXJlYV9GaXNoIiwiUHJvZHVjdCIsIkNvdW50eSIsIk11bmljaXBhbGl0eSIsIkZpc2giLCJSdWxlIiwiVXNlcl9Qcm9kdWN0IiwiVXNlcl9JbmZvIiwiVXNlcl9OdW1iZXIiLCJUZWNobmlxdWUiLCJPcmdhbml6YXRpb24iLCJQb2kiLCJQb2lfVHlwZSIsIlBvbHlnb24iLCJjcmVhdGVPYmplY3QiLCJyZXR2YWwiLCJyb3dzIiwicHVzaCIsIml0ZW0iLCJwb3B1bGF0ZVRhYmxlIiwidGFibGUiLCJ0cmFuc2FjdGlvbiIsInR4IiwiZXhlY3V0ZVNxbCIsInNpbmdsZURhdGEiLCJpbnNlcnREYXRhIiwicXVlcnkiLCJyZXBlYXQiLCJqb2luIiwiY2xlYW5UYWJsZSIsImNsZWFuIiwiaW5pdCIsInRhYmxlVmFsdWVzIiwiZXhlY3V0ZSIsIm9iamVjdCIsIndhcm4iLCJhaWQiLCJzZWFyY2hzdHJpbmciLCJjb3VudHlfaWQiLCJnZXRQcm9kdWN0IiwicHJvZHVjdF9pZCIsImFyZWFfaWQiLCJyZXBsYWNlIiwiTEFTVF9VUERBVEUiLCJwb3B1bGF0ZSIsImFsbCIsImZpc2hBcnIiLCJmaXNoS2V5IiwiZmlkIiwiYW1vdW50IiwiY29tbWVudCIsInBvcHVsYXRlVXNlciIsIm51bUFyciIsIm51bWJlciIsImNsZWFuVXNlciIsInVwZGF0ZUZ1bmMiLCJmb3JjZWQiLCJjdXJyZW50VGltZSIsImxhc3RVcGRhdGUiLCJhV2VlayIsInRlcm1zIiwid2hlbiIsImxhc3RfdXBkYXRlIiwiZmFjdG9yeSIsIiR3aW5kb3ciLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInNlcnZpY2UiLCJkaXJlY3RpdmUiLCIkY29yZG92YVNtcyIsIiRpb25pY1BvcHVwIiwicmVzdHJpY3QiLCJsaW5rIiwiYXR0cnMiLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInByb21wdCIsInRpdGxlIiwiaW5wdXRUeXBlIiwibmdDb3Jkb3ZhU21zIiwic2VuZCIsInRyYW5zY2x1ZGUiLCJsYWJlbCIsInBsYWNlaG9sZGVyIiwibmdQYXR0ZXJuIiwibmdNb2RlbCIsIiRjb3Jkb3ZhSW5BcHBCcm93c2VyIiwib3BlbiIsImhyZWYiLCJ0YXJnZXQiLCJob3N0IiwibG9jYXRpb24iXSwibWFwcGluZ3MiOiJBQUtBQSxRQUFBQyxPQUFBLFVBQ0EsUUFDQSxxQkFDQSxvQkFDQSxhQUNBLFlBQ0EsZUFDQSxnQkFDQSxpQkFDQSx5QkFDQSxZQUNBLGdCQUNBLGVBQ0EsYUFDQSxXQUNBLG9CQUNBLGdCQUdBQyxTQUFBLHVCQUNBQyxTQUFBLGdDQUdBQyxLQUFBLGlCQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBRixFQUFBRyxNQUFBLFdBRUFDLE9BQUFDLE9BQUFELE9BQUFDLE1BQUFDLFVBQ0FGLE9BQUFDLE1BQUFDLFNBQUFDLDBCQUFBLEdBRUFILE9BQUFJLFdBRUFKLE9BQUFJLFVBQUFDLGVBR0FQLEVBQUFRLFFBQ0FULEVBQUFVLGNBSUFDLFFBQ0EsaUJBQ0EscUJBQ0EsdUJBQ0EsbUJBQ0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQUEsRUFBQUMsWUFDQUMsT0FBQSxFQUNBQyxvQkFBQSxJQUVBSCxFQUFBSSxZQUFBLEVBSUFMLEVBQUFNLE1BQUFDLGNBQUEsR0FHQVAsRUFBQVEsV0FBQUMsbUJBQUEsR0FBQUMsS0FBQSxJQUdBVixFQUFBVyxLQUFBQyxTQUFBLFNBT0EsSUFBQUMsR0FBQSxZQUNBeEIsUUFBQXlCLGFBQUFDLFFBQUEsYUFDQUYsRUFBQSxhQUVBZCxFQUFBaUIsVUFBQUgsR0FJQWYsRUFFQW1CLE1BQUEsT0FDQUMsSUFBQSxPQUVBQyxZQUFBLDRCQUNBQyxXQUFBLGFBR0FILE1BQUEsYUFDQUMsSUFBQSxTQUNBQyxZQUFBLDhCQUNBQyxXQUFBLGNBSUFILE1BQUEsZUFDQUMsSUFBQSxXQUNBQyxZQUFBLGtDQUNBQyxXQUFBLGdCQUVBSCxNQUFBLDRCQUNBQyxJQUFBLGdCQUNBQyxZQUFBLHlDQUVBRixNQUFBLDZCQUNBQyxJQUFBLGlCQUNBQyxZQUFBLDBDQUlBRixNQUFBLGdCQUNBQyxJQUFBLFlBQ0FDLFlBQUEsb0NBQ0FDLFdBQUEsaUJBRUFILE1BQUEsd0JBQ0FDLElBQUEsV0FDQUMsWUFBQSw4Q0FFQUYsTUFBQSx1QkFDQUMsSUFBQSxVQUNBQyxZQUFBLDZDQUlBRixNQUFBLFlBQ0FDLElBQUEsUUFDQUMsWUFBQSw0QkFDQUMsV0FBQSxhQUVBSCxNQUFBLFlBQ0FDLElBQUEsUUFDQUMsWUFBQSw4QkFHQUYsTUFBQSxZQUNBQyxJQUFBLFFBQ0FDLFlBQUEsZ0NBRUFGLE1BQUEsZUFDQUMsSUFBQSxXQUNBQyxZQUFBLGtDQUNBQyxXQUFBLGdCQUVBSCxNQUFBLGFBQ0FDLElBQUEsU0FDQUMsWUFBQSw4QkFDQUMsV0FBQSxjQUVBSCxNQUFBLGFBQ0FDLElBQUEsU0FDQUMsWUFBQSw4QkFDQUMsV0FBQSxjQUVBSCxNQUFBLGdCQUNBQyxJQUFBLFlBQ0FFLFdBQUEsV0FDQUQsWUFBQSw4QkFHQUYsTUFBQSxnQkFDQUMsSUFBQSxZQUNBQyxZQUFBLG9DQUNBQyxXQUFBLGlCQUVBSCxNQUFBLGFBQ0FDLElBQUEsU0FDQUcsUUFBQUMsSUFBQSxFQUFBQyxRQUFBLEVBQUFDLE9BQUEsSUFDQUwsWUFBQSxzQ0FDQUMsV0FBQSxjQUVBSCxNQUFBLGFBQ0FDLElBQUEsU0FDQUMsWUFBQSx3Q0FDQUMsV0FBQSxrQkFFQUgsTUFBQSxpQkFDQUMsSUFBQSxhQUNBQyxZQUFBLHdDQUVBRixNQUFBLGNBQ0FDLElBQUEsVUFDQUMsWUFBQSxnQ0FDQUMsV0FBQSxlQUVBSCxNQUFBLGtCQUNBQyxJQUFBLGtCQUNBRyxRQUFBQyxJQUFBLEVBQUFHLE1BQUEsR0FDQU4sWUFBQSwwQ0FDQUMsV0FBQSxtQkFFQUgsTUFBQSxXQUNBQyxJQUFBLE9BQ0FDLFlBQUEsMEJBQ0FDLFdBQUEsWUFFQUgsTUFBQSxrQkFDQUMsSUFBQSxjQUNBQyxZQUFBLHdDQUNBQyxXQUFBLG1CQUVBSCxNQUFBLHVCQUNBQyxJQUFBLHVCQUNBRyxRQUFBQyxJQUFBLEVBQUFJLE1BQUEsR0FDQVAsWUFBQSxvREFDQUMsV0FBQSx3QkFPQUgsTUFBQSxZQUNBQyxJQUFBLFlBQ0FaLE9BQ0FxQixRQUNBUixZQUFBLDRCQUNBQyxXQUFBLFlBRUFRLGlCQUNBVCxZQUFBLDZCQUVBVSxnQkFDQVYsWUFBQSw0QkFFQVcscUJBQ0FYLFlBQUEsNkJBRUFZLGtCQUNBWixZQUFBLG9DQU1BdkMsUUFBQUMsT0FBQSx5QkFDQUQsUUFBQUMsT0FBQSx3QkM3T0FELFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLGFBQUEsU0FBQSxxQkFBQSxpQkFBQSxTQUFBLFNBQUFZLEVBQUFDLEVBQUFoRCxFQUFBQyxHQUNBOEMsRUFBQUUsUUFBQUYsRUFBQUcsT0FBQSxRQUNBSCxFQUFBcEMsT0FBQVYsRUFFQUQsRUFBQUcsTUFBQSxXQUNBQyxPQUFBK0MsU0FDQUgsRUFBQUksZ0JBQUFDLEtBQUEsU0FBQUosR0FDQUssUUFBQUMsSUFBQSxrQkFBQU4sR0FDQUYsRUFBQUUsUUFBQUEsU0NUQXRELFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLFlBQ0EsU0FDQSxnQkFDQSxlQUNBLGVBQ0EsS0FDQSx5QkFDQSxjQUNBLGdCQUNBLGlCQUNBLHNCQUNBLDRCQUNBLFdBQ0EsU0FBQVksRUFBQVMsRUFBQTNCLEVBQUE0QixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBN0QsRUFBQThELEVBQUFDLEVBQUFDLEdBQ0EsUUFBQUMsR0FBQUMsR0FFQW5CLEVBQUFvQixJQUFBQyxRQUFBQyxRQUNBMUUsUUFBQTJFLE9BQUF2QixFQUFBb0IsSUFBQUMsUUFBQUMsT0FBQUgsR0FDQW5CLEVBQUFvQixJQUFBQyxRQUFBRyxNQUFBeEIsRUFBQW9CLElBQUFDLFFBQUFDLGFBQ0F0QixHQUFBb0IsSUFBQUMsUUFBQUMsU0FFQTFFLFFBQUEyRSxPQUFBdkIsRUFBQW9CLElBQUFDLFFBQUFHLE1BQUFMLEdBQ0FuQixFQUFBb0IsSUFBQUMsUUFBQUMsT0FBQXRCLEVBQUFvQixJQUFBQyxRQUFBRyxZQUNBeEIsR0FBQW9CLElBQUFDLFFBQUFHLE9BR0EsUUFBQUMsS0FFQSxNQURBbEIsU0FBQUMsSUFBQVIsR0FDQUEsRUFBQW9CLElBQUFDLFFBQUFHLE9BQUF4QixFQUFBb0IsSUFBQUMsUUFBQUMsT0FHQXJFLEVBQUFHLE1BQUEsV0FDQTJELEVBQUFXLGVBQ0FDLFVBQUEsTUFDQXJCLEtBQUEsS0FBQSxTQUFBc0IsR0FDQXJCLFFBQUFxQixNQUFBQSxJQUNBLFNBQUFDLEdBQ0FaLEVBQUEsV0FDQUMsR0FDQVksSUFBQUQsRUFBQUUsT0FBQUMsU0FDQUMsSUFBQUosRUFBQUUsT0FBQUcsZ0JBS0FsQixFQUFBbUIsY0FDQVIsVUFBQSxNQUNBckIsS0FBQSxLQUFBLFNBQUFzQixHQUNBckIsUUFBQXFCLE1BQUFBLElBQ0EsU0FBQVEsR0FDQW5CLEVBQUEsV0FDQUMsR0FDQW1CLFVBQUFELEVBQUFFLG9CQU1BdEMsRUFBQW9CLEtBQ0FtQixVQUNBbEIsU0FDQUcsT0FDQU0sSUFBQSxFQUNBRyxJQUFBLEVBQ0FJLFVBQUEsRUFDQUcsUUFBQSxrQkFJQXhDLEVBQUF5QyxlQUFBLHNCQUVBLElBQUFDLEtBQ0ExQyxHQUFBMkMsU0FBQSxXQUNBcEMsUUFBQUMsSUFBQVIsRUFDQXlCLElBQ0FtQixpQkFBQUQsVUFDQTNDLEVBQUE2QyxNQUFBZixJQUFBOUIsRUFBQTZDLE1BQUFaLEtBQ0EsS0FDQSxXQUNBMUIsUUFBQUMsSUFBQSxzQkFFQSxXQUNBc0MsTUFBQSx3QkFJQSxJQUFBQyxJQUFBLFlBQUEsYUFDQS9DLEdBQUFnRCxRQUNBQyxRQUFBRixHQUdBL0MsRUFBQWtELElBQUEsbUNBQUEsU0FBQUMsRUFBQUMsR0FFQXBELEVBQUE2QyxNQUFBTyxFQUFBQyxRQUdBckQsRUFBQWtELElBQUEsb0NBQUEsV0FFQWxELEVBQUE2QyxNQUFBLE9BS0FsQyxFQUFBMkMsUUFBQTVDLEVBQUFwQixJQUNBZ0IsS0FBQSxTQUFBaUQsR0FDQXZELEVBQUFvQixJQUFBbUIsUUFDQVQsSUFBQXlCLEVBQUF6QixJQUNBRyxJQUFBc0IsRUFBQXRCLElBQ0F1QixLQUFBQyxPQUFBRixFQUFBQyxNQUFBQyxPQUFBRixFQUFBQyxNQUFBLEdBRUF4RCxFQUFBMEQsT0FBQUgsRUFBQUcsT0FFQTFELEVBQUF1RCxLQUFBQSxFQUNBM0MsRUFBQStDLGFBQUEsUUFBQS9GLFNBRUErQyxFQUFBaUQsZ0JBQUFMLEVBQUFNLE9BQ0F2RCxLQUFBLFNBQUF3RCxHQUNBOUQsRUFBQThELElBQUFBLElBRUFuRCxFQUFBb0QsY0FDQXpELEtBQUEsU0FBQTBELEdBQ0EsSUFBQSxHQUFBQyxHQUFBLEVBQUFBLEVBQUFELEVBQUFFLFNBQUFELEVBQUEsQ0FDQSxHQUFBRSxHQUFBSCxFQUFBQyxFQUNBdkIsR0FBQXlCLEVBQUFDLEtBQ0FDLFFBQUEsd0JBQUFGLEVBQUFHLEtBQ0FDLFlBQUEsR0FBQSxJQUNBQyxhQUFBLEVBQUEsTUFHQTdELEVBQUE4RCxRQUFBbEIsRUFBQU0sT0FDQXZELEtBQUEsU0FBQW9FLEdBQ0EsSUFBQSxHQUFBVCxHQUFBLEVBQUFBLEVBQUFTLEVBQUFSLFNBQUFELEVBQUEsQ0FDQSxHQUFBVSxHQUFBRCxFQUFBVCxFQUVBakUsR0FBQW9CLElBQUFDLFFBQUEsTUFBQTRDLElBQ0FXLE1BQUEsT0FDQTlDLElBQUE2QyxFQUFBRSxHQUNBNUMsSUFBQTBDLEVBQUFHLEdBQ0FSLEtBQUE1QixFQUFBaUMsRUFBQVIsTUFDQTNCLFFBQUFtQyxFQUFBSSxHQUdBL0UsRUFBQW9CLElBQUFDLFFBQUEsTUFDQXVELE1BQUEsT0FDQTlDLElBQUF5QixFQUFBekIsSUFDQUcsSUFBQXNCLEVBQUF0QixJQUNBTyxRQUFBZSxFQUFBd0IsSUFFQSxTQUFBQyxHQUNBekUsUUFBQXFCLE1BQUFvRCxLQUVBckUsRUFBQXNFLFlBQUExQixFQUFBTSxPQUNBdkQsS0FBQSxTQUFBNEUsR0FDQWxGLEVBQUFvQixJQUFBK0QsTUFBQUQsRUFBQTlELElBQUEsU0FBQWdFLEdBQ0EsT0FDQUMsUUFBQUMsS0FBQUMsTUFBQSxJQUFBSCxFQUFBQSxLQUFBLEtBQ0FJLE1BQUFKLEVBQUFLLEVBQ0FDLE9BQUEsRUFDQUMsUUFBQSxHQUNBQyxVQUFBUixFQUFBSyxFQUNBdEIsS0FBQSxjQUdBLFNBQUFhLEdBQ0F6RSxRQUFBcUIsTUFBQW9ELFFBSUEsU0FBQUEsR0FDQXpFLFFBQUFDLElBQUF3RSxLQUdBckUsRUFBQWtGLGNBQUFuRixFQUFBcEIsSUFDQWdCLEtBQUEsU0FBQXdGLEdBQ0E5RixFQUFBOEYsT0FBQUEsRUFDQWxGLEVBQUErQyxhQUFBLFFBQUEvRixVQUNBLFNBQUFvSCxHQUNBekUsUUFBQUMsSUFBQXdFLEtBR0FyRSxFQUFBb0Ysa0JBQUFyRixFQUFBcEIsSUFDQWdCLEtBQUEsU0FBQTBGLEdBQ0FoRyxFQUFBZ0csU0FBQUEsRUFDQXBGLEVBQUErQyxhQUFBLFFBQUEvRixVQUNBLFNBQUFvSCxHQUNBekUsUUFBQUMsSUFBQXdFLEtBSUFoRixFQUFBaUcsVUFBQSxVQUdBakcsRUFBQWtHLFNBQUFwSCxFQUFBcUgsSUFBQSxhQUNBbkcsRUFBQW9HLFVBQUEsS0FHQXZGLEVBQUF3RixnQkFBQSxrQ0FDQUMsTUFBQXRHLEVBQ0F1RyxVQUFBLGdCQUNBakcsS0FBQSxTQUFBa0csR0FDQXhHLEVBQUF5RyxVQUFBRCxJQUVBeEcsRUFBQTBHLFVBQUEsU0FBQUMsR0FDQTNHLEVBQUF5RyxVQUFBRyxPQUNBNUcsRUFBQTJHLFFBQUFBLEdBRUEzRyxFQUFBNkcsV0FBQSxXQUNBN0csRUFBQXlHLFVBQUFLLFFBRUE5RyxFQUFBK0csVUFBQSxXQUNBL0csRUFBQWdILGNBQUFoSCxFQUFBZ0gsY0FFQWhILEVBQUFnSCxjQUFBLEVBR0FuRyxFQUFBd0YsZ0JBQUEsb0NBQ0FDLE1BQUF0RyxFQUNBdUcsVUFBQSxnQkFDQWpHLEtBQUEsU0FBQWtHLEdBQ0F4RyxFQUFBaUgsWUFBQVQsSUFFQXhHLEVBQUFrSCxlQUFBLFNBQUFQLEdBQ0EzRyxFQUFBaUgsWUFBQUwsT0FDQTVHLEVBQUEyRyxRQUFBQSxHQUVBM0csRUFBQW1ILGdCQUFBLFdBQ0FuSCxFQUFBaUgsWUFBQUgsUUFHQTlHLEVBQUFrRCxJQUFBLFdBQUEsV0FDQWxELEVBQUF5RyxVQUFBVyxTQUNBcEgsRUFBQWlILFlBQUFHLFdBSUFwSCxFQUFBcUgsYUFBQSxXQUNBekcsRUFBQStDLGFBQUEsUUFBQTJELE1BQUEsSUFJQTFLLFFBQUEyRSxPQUFBdkIsRUFBQW9CLEtBQ0FtRyxRQUNBQyxZQUNBQyxVQUNBQyxLQUFBLGVBQ0F2RCxLQUFBLE1BQ0FqRixJQUFBLG9GQUNBeUksY0FDQUMsUUFBQSxrQkFDQUMsT0FBQSxzRUFHQUMsV0FDQUosS0FBQSxXQUNBdkQsS0FBQSxNQUNBakYsSUFBQSxvRkFDQXlJLGNBQ0FDLFFBQUEsbUJBQ0FDLE9BQUEsdUVBSUFFLFVBQ0FyRCxNQUNBZ0QsS0FBQSxVQUNBdkQsS0FBQSxnQkFDQTZELFNBQUEsRUFDQUwsY0FDQU0sZ0JBQUEsRUFDQUMsd0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMscUJBQUEsRUFDQUMsNEJBQUEsTUFLQWxELGNDdFJBdkksUUFBQUMsT0FBQSxzQkFDQXVDLFdBQUEsYUFBQSxTQUFBLGVBQUEsdUJBQUEsS0FBQSxTQUFBWSxFQUFBVSxFQUFBNEgsRUFBQTNILEdBRUEsR0FBQTRILEdBQUE3SCxFQUFBbEIsTUFDQVEsR0FBQVIsT0FBQStJLEVBQ0F2SSxFQUFBVCxPQUFBbUIsRUFBQW5CLE9BQ0FvQixFQUFBbkIsT0FBQSxHQUFBa0IsRUFBQXBCLElBQ0FnQixLQUFBLFNBQUFrSSxHQUNBeEksRUFBQXlJLE1BQUFELEdBQ0EsU0FBQXhELEdBQ0F6RSxRQUFBQyxJQUFBd0UsS0FFQWhGLEVBQUEwSSxZQUFBLFdBQ0ExSSxFQUFBUixPQUFBLElBRUFRLEVBQUEySSxVQUFBLFdBQ0FMLEVBQUFLLGdCQ2hCQS9MLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLGVBQUEsU0FBQSxTQUFBLGVBQUEsU0FBQVksRUFBQTRJLEVBQUE5SixHQUNBa0IsRUFBQTZJLFlBQUEvSixFQUFBcUgsSUFBQSxrQkNGQXZKLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLGdCQUFBLFNBQUEsS0FBQSxTQUFBWSxFQUFBVyxHQUNBQSxFQUFBbUksY0FDQXhJLEtBQUEsU0FBQWtJLEdBQ0F4SSxFQUFBK0ksU0FBQVAsR0FDQSxTQUFBeEQsR0FDQXpFLFFBQUFDLElBQUF3RSxRQ05BcEksUUFBQUMsT0FBQSxzQkFDQXVDLFdBQUEsa0JBQUEsU0FBQSxlQUFBLEtBQUEsU0FBQVksRUFBQVUsRUFBQUMsR0FDQVgsRUFBQVAsS0FBQWlCLEVBQUFqQixLQUNBTyxFQUFBeUMsZUFBQSx1QkFDQXpDLEVBQUFQLE1BQ0FrQixFQUFBcUksUUFBQXRJLEVBQUFwQixJQUNBZ0IsS0FBQSxTQUFBa0ksR0FDQXhJLEVBQUFQLEtBQUErSSxFQUNBakksUUFBQUMsSUFBQVIsRUFBQVAsT0FDQSxTQUFBdUYsR0FDQXpFLFFBQUFDLElBQUF3RSxLQUdBekUsUUFBQUMsSUFBQVIsRUFBQVAsU0NiQTdDLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLGNBQUEsU0FBQSxLQUFBLFNBQUFZLEVBQUFXLEdBQ0FYLEVBQUFpRyxVQUFBLEtBQ0FqRyxFQUFBeUMsZUFBQSx1QkFDQTlCLEVBQUFzSSxZQUNBM0ksS0FBQSxTQUFBa0ksR0FDQXhJLEVBQUE4RixPQUFBMEMsRUFDQXhJLEVBQUFrSixZQUFBVixFQUFBLEdBQUFXLEtBQ0EsU0FBQW5FLEdBQ0F6RSxRQUFBQyxJQUFBd0UsUUNUQXBJLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLFlBQ0EsU0FDQSxTQUNBLGdCQUNBLGVBQ0EsY0FDQSxTQUFBWSxFQUFBNEksRUFBQW5JLEVBQUEzQixFQUFBc0ssR0FFQXBKLEVBQUFxSixTQUFBRCxFQUdBdEssRUFBQXdLLElBQUEsZ0JBQUE3SSxFQUFBOEksb0JBRUF2SixFQUFBd0osT0FBQSxTQUFBQyxHQUNBLElBQUFBLEVBQUFDLFNBQUFELEVBQUFFLFVBQ0FmLEVBQUFnQixHQUFBLGFBQUFwSyxPQUFBaUssRUFBQUksV0FBQUMsWUNoQkFsTixRQUFBQyxPQUFBLHNCQUNBdUMsV0FBQSxhQUFBLFNBQUEsU0FBQSxlQUFBLFNBQUFZLEVBQUE0SSxFQUFBOUosR0FDQWtCLEVBQUErSixJQUFBakwsRUFBQXFILElBQUEsVUNGQXZKLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLGFBQ0EsU0FDQSxTQUNBLFNBQ0EsZ0JBQ0EsZ0JBQ0EscUJBQ0EsU0FBQVksRUFBQTRJLEVBQUExTCxFQUFBOE0sRUFBQXZKLEVBQUF3SixHQU9BakssRUFBQWtLLE9BQUEsU0FBQUMsR0FDQUgsRUFBQXBELE9BRUExSixFQUFBa04sV0FBQUQsRUFBQUUsU0FBQUMsV0FBQUgsRUFBQUksU0FBQUQsWUFDQWhLLEtBQUEsV0FDQTBKLEVBQUFsRCxPQUNBcUQsRUFBQUssYUFBQSxjQUFBLEdBQ0FQLEVBQUFRLGNBQUEsV0FDQTdCLEVBQUFnQixHQUFBLGFBQ0EsU0FBQWhJLEdBQ0FvSSxFQUFBbEQsT0FDQXFELEVBQUFLLGFBQUEsY0FBQSxHQUNBeEssRUFBQTRCLE1BQUFBLEVBQUE4SSxZQVFBMUssRUFBQTJLLEtBQUEsV0FDQVYsRUFBQVEsY0FBQSxXQUNBaEssRUFBQW1LLGlCQUVBQyxhQUFBLEVBQ0FDLGFBQUEsSUFFQWxDLEVBQUFnQixHQUFBLGdCQzFDQWhOLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLFdBQ0EsU0FDQSxjQUNBLGlCQUNBLEtBQ0Esc0JBQ0EsNEJBQ0EsV0FDQSxTQUFBWSxFQUFBK0ssRUFBQTlOLEVBQUEwRCxFQUFBSSxFQUFBQyxFQUFBQyxHQUVBLFFBQUFDLEdBQUFDLEdBRUFuQixFQUFBcUIsUUFBQUMsUUFDQTFFLFFBQUEyRSxPQUFBdkIsRUFBQXFCLFFBQUFDLE9BQUFILEdBQ0FuQixFQUFBcUIsUUFBQUcsTUFBQXhCLEVBQUFxQixRQUFBQyxhQUNBdEIsR0FBQXFCLFFBQUFDLFNBRUExRSxRQUFBMkUsT0FBQXZCLEVBQUFxQixRQUFBRyxNQUFBTCxHQUNBbkIsRUFBQXFCLFFBQUFDLE9BQUF0QixFQUFBcUIsUUFBQUcsWUFDQXhCLEdBQUFxQixRQUFBRyxPQUlBNUUsUUFBQTJFLE9BQUF2QixHQUNBdUMsUUFDQVQsSUFBQSxHQUNBRyxJQUFBLEdBQ0F1QixLQUFBLEdBRUErRCxRQUNBQyxZQUNBQyxVQUNBQyxLQUFBLGVBQ0F2RCxLQUFBLE1BQ0FqRixJQUFBLG9GQUNBeUksY0FDQUMsUUFBQSxrQkFDQUMsT0FBQSxzRUFHQUMsV0FDQUosS0FBQSxXQUNBdkQsS0FBQSxNQUNBakYsSUFBQSxvRkFDQXlJLGNBQ0FDLFFBQUEsbUJBQ0FDLE9BQUEsdUVBSUFFLFVBQ0FpRCxXQUNBdEQsS0FBQSxlQUNBdkQsS0FBQSxnQkFDQTZELFNBQUEsRUFDQUwsY0FDQU0sZ0JBQUEsRUFDQUMsd0JBQUEsRUFDQUMsZ0JBQUEsRUFDQUMscUJBQUEsRUFDQUMsNEJBQUEsTUFLQWhILFNBQ0FHLE9BQ0FNLElBQUEsRUFDQUcsSUFBQSxFQUNBSSxVQUFBLEVBQ0FHLFFBQUEsVUFLQXZGLEVBQUFHLE1BQUEsV0FDQTJELEVBQUFXLGVBQ0FDLFVBQUEsTUFDQXJCLEtBQUEsS0FBQSxTQUFBc0IsR0FDQXJCLFFBQUFxQixNQUFBQSxJQUNBLFNBQUFDLEdBQ0FaLEVBQUEsV0FDQUMsR0FDQVksSUFBQUQsRUFBQUUsT0FBQUMsU0FDQUMsSUFBQUosRUFBQUUsT0FBQUcsZ0JBS0FsQixFQUFBbUIsY0FDQVIsVUFBQSxNQUNBckIsS0FBQSxLQUFBLFNBQUFzQixHQUNBckIsUUFBQXFCLE1BQUFBLElBQ0EsU0FBQVEsR0FDQW5CLEVBQUEsV0FDQUMsR0FDQW1CLFVBQUFELEVBQUFFLG9CQU1BM0IsRUFBQW5CLE9BQUEsSUFBQWMsS0FBQSxTQUFBbUksR0FDQSxJQUFBLEdBQUF4RSxHQUFBLEVBQUFBLEVBQUF3RSxFQUFBdkUsU0FBQUQsRUFBQSxDQUNBLEdBQUFnSCxHQUFBeEMsRUFBQXhFLEVBQ0FqRSxHQUFBcUIsUUFBQSxPQUFBNEMsSUFDQVcsTUFBQSxZQUNBOUMsSUFBQW1KLEVBQUFuSixJQUNBRyxJQUFBZ0osRUFBQWhKLElBQ0FpSixnQkFBQSxXQUNBLEdBQUFDLEdBQUFuTCxFQUFBb0wsTUFFQSxPQURBRCxHQUFBNUgsS0FBQTBILEVBQ0FFLEdBRUEzSSxRQUFBLDhEQ25IQTVGLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLFlBQ0EsU0FDQSxTQUNBLHFCQUNBLGdCQUNBLGNBQ0EsU0FDQSxTQUFBWSxFQUFBNEksRUFBQXFCLEVBQUFvQixFQUFBakMsRUFBQWxNLEdBRUE4QyxFQUFBb0osWUFBQUEsRUFFQWlDLEVBQUFoRixnQkFBQSxnQ0FDQUMsTUFBQXRHLElBQ0FNLEtBQUEsU0FBQWdMLEdBQ0F0TCxFQUFBc0wsUUFBQUEsSUFHQXRMLEVBQUF1TCxTQUFBLFdBQ0F2TCxFQUFBc0wsUUFBQXhFLE9BQ0E4QixFQUFBZ0IsR0FBQSxpQkFFQTVKLEVBQUF3TCxPQUFBLFdBQ0F4TCxFQUFBc0wsUUFBQXhFLE9BQ0E1SixFQUFBdU8sY0FFQTdDLEVBQUFnQixHQUFBLGNBRUE1SixFQUFBMEwsTUFBQSxXQUNBMUwsRUFBQXNMLFFBQUF4RSxPQUNBbUQsRUFBQVEsY0FBQSxRQUNBN0IsRUFBQWdCLEdBQUEsY0FFQTVKLEVBQUEyTCxTQUFBLFdBQ0EzTCxFQUFBc0wsUUFBQXhFLE9BQ0E4QixFQUFBZ0IsR0FBQSx5QkFHQTVKLEVBQUE0TCxhQUFBLFdBQ0ExTyxFQUFBME8sbUJDdENBaFAsUUFBQUMsT0FBQSxzQkFDQXVDLFdBQUEsZUFDQSxTQUNBLFNBQ0EsZ0JBQ0EsaUJBQ0EsZ0JBQ0EsZ0JBQ0EsTUFDQSxTQUFBWSxFQUFBNEksRUFBQW5JLEVBQUF4RCxFQUFBK00sRUFBQTZCLEVBQUFDLEdBQ0EsWUFHQSxJQUFBQyxHQUFBLEVBTUEvTCxHQUFBMkssS0FBQSxXQUNBM0ssRUFBQWdNLEtBQUEsR0FDQXBELEVBQUFnQixHQUFBLG9CQVFBNUosRUFBQWlNLGFBQUEsU0FBQUMsR0FFQWxDLEVBQUFwRCxPQUVBbUYsRUFBQUcsRUFBQUgsS0FBQXpCLFdBQ0F3QixFQUFBSyxtQkFBQUosR0FDQXpMLEtBQUEsU0FBQWtJLEdBR0F4SSxFQUFBZ00sS0FBQSwrREFDQXhELEVBQUE0RCxTQUNBcE0sRUFBQWdNLE1BQUEsU0FDQXhELEVBQUE2RCxTQUNBck0sRUFBQWdNLE1BQUEsVUFHQXhELEVBQUE2RCxTQUNBck0sRUFBQWdNLE1BQUEsT0FFQWhNLEVBQUFnTSxNQUFBLElBRUFwRCxFQUFBZ0IsR0FBQSxvQkFFQSxXQUdBc0MsRUFBQUgsS0FBQXZCLGFBQUEsZUFBQSxLQXJCQXNCLFdBdUJBOUIsRUFBQWxELE9BVUE5RyxFQUFBc00sY0FBQSxTQUFBSixHQUNBbEMsRUFBQXBELE9BRUFrRixFQUFBUyxvQkFBQVIsRUFBQUcsRUFBQTNCLFNBQUFELFdBQUE0QixFQUFBTSxLQUFBbEMsWUFDQWhLLEtBQUEsU0FBQWtJLEdBQ0FqSSxRQUFBQyxJQUFBZ0ksR0FFQXZMLEVBQUFHLE1BQUEsV0FDQXlPLEVBQUFZLGVBQUEsK0JBR0FoTSxFQUFBaU0sZ0JBQUFqTSxFQUFBa00sY0FBQUMsWUFDQSxTQUFBaEwsR0FDQXJCLFFBQUFDLElBQUFvQixLQVZBa0ssV0FnQkE5QixFQUFBbEQsVUN2RkFsSyxRQUFBQyxPQUFBLHNCQUNBdUMsV0FBQSxnQkFDQSxTQUNBLFNBQ0EsZ0JBQ0EsY0FDQSx1QkFDQSxNQUNBLGVBQ0EsU0FBQVksRUFBQTRJLEVBQUFvQixFQUFBbkosRUFBQXlILEVBQUF3RCxFQUFBaE4sR0FFQSxHQUFBdUwsRUFHQXJLLEdBQUE2TSxjQUFBLFNBQUFDLEdBQ0FoQixFQUFBaUIsWUFBQUQsRUFBQXhDLFlBQ0FoSyxLQUFBLFNBQUFrSSxHQUNBc0UsRUFBQXRDLGFBQUEsYUFBQWhDLE1BS0F4SSxFQUFBZ04sV0FBQSxTQUFBRixHQUNBaEIsRUFBQWlCLFlBQUEsS0FBQUQsRUFBQXhDLFlBQ0FoSyxLQUFBLFNBQUFrSSxHQUNBc0UsRUFBQXRDLGFBQUEsY0FBQWhDLE1BTUF4SSxFQUFBaU4sY0FNQWpOLEVBQUEyTCxTQUFBLFNBQUFPLEdBQ0FsQyxFQUFBcEQsT0FHQTVHLEVBQUFrTixNQUFBaEIsRUFBQWdCLE1BQUE1QyxXQUdBRCxFQUFBNkIsRUFBQTdCLFNBQUFDLFVBRUEsSUFBQUMsR0FBQTJCLEVBQUEzQixTQUFBRCxXQUNBNkMsRUFBQWpCLEVBQUFpQixTQUFBN0MsV0FDQThDLEVBQUFsQixFQUFBa0IsTUFBQTlDLFVBRUF3QixHQUFBdUIsY0FBQWhELEVBQUE4QyxFQUFBNUMsRUFBQTZDLEVBQUFwTixFQUFBa04sT0FDQTVNLEtBQUEsV0FFQTBKLEVBQUFsRCxPQUNBOEIsRUFBQWdCLEdBQUEsYUFFQSxTQUFBaEksR0FPQTVCLEVBQUFpTixXQUFBSyxtQkFBQSxFQUNBaEYsRUFBQUssV0FBQSxHQUdBLEdBQUEvRyxFQUFBMkwsWUFDQXJCLEVBQUFrQixNQUFBNUMsYUFBQSxnQkFBQSxHQUdBLEdBQUE1SSxFQUFBMkwsYUFDQXZOLEVBQUE2TSxjQUFBWCxFQUFBN0IsVUFDQXJLLEVBQUFnTixXQUFBZCxFQUFBa0IsUUFHQSxJQUFBeEwsRUFBQTJMLFlBQ0FyQixFQUFBZ0IsTUFBQTFDLGFBQUEsZ0JBQUEsR0FHQVIsRUFBQWxELFVBU0E5RyxFQUFBd04sT0FBQSxTQUFBdEIsR0FDQWxDLEVBQUFwRCxNQUVBLElBQUE2RyxHQUFBdkIsRUFBQXVCLE9BRUEzQixHQUFBNEIsYUFBQXJELEVBQUFvRCxFQUFBbkQsWUFDQWhLLEtBQUEsV0FDQW1OLEVBQUFqRCxhQUFBLFlBQUEsR0FDQTVCLEVBQUFnQixHQUFBLGNBQ0EsV0FDQTZELEVBQUFqRCxhQUFBLFlBQUEsS0FMQXNCLFdBT0E5QixFQUFBbEQsU0FHQTlHLEVBQUErSixJQUFBakwsRUFBQXFILElBQUEsT0FFQXRGLEVBQUF3RixnQkFBQSxpQ0FDQUMsTUFBQXRHLEVBQ0F1RyxVQUFBLGdCQUNBakcsS0FBQSxTQUFBa0csR0FDQXhHLEVBQUEyTixLQUFBbkgsSUFFQXhHLEVBQUE0TixTQUFBLFdBQ0E1TixFQUFBMk4sS0FBQS9HLFFBRUE1RyxFQUFBNk4sVUFBQSxXQUNBN04sRUFBQTJOLEtBQUE3RyxRQUVBOUcsRUFBQWtELElBQUEsV0FBQSxXQUNBbEQsRUFBQTJOLEtBQUF2RyxjQ3ZIQXhLLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLHVCQUFBLFNBQUEsZUFBQSxLQUFBLHlCQUFBLFNBQUFZLEVBQUFVLEVBQUFDLEVBQUFDLEdBS0EsR0FKQVosRUFBQXlDLGVBQUEsdUJBQ0F6QyxFQUFBTixLQUFBZ0IsRUFBQWhCLEtBQ0FNLEVBQUEwRCxVQUVBMUQsRUFBQU4sS0FVQSxDQUNBLEdBQUE4SSxHQUFBeEksRUFBQU4sSUFDQU0sR0FBQTBELFFBQUE4RSxFQUFBc0YsS0FBQXRGLEVBQUF1RixLQUFBdkYsRUFBQXdGLE1BQUFDLE9BQUEsU0FBQUMsR0FDQSxPQUFBLE1BQUFDLEtBQUFELEtBR0F0TixFQUFBaEQsYUFmQStDLEdBQUF5TixhQUFBMU4sRUFBQXBCLElBQ0FnQixLQUFBLFNBQUFrSSxHQUNBeEksRUFBQTBELFFBQUE4RSxFQUFBc0YsS0FBQXRGLEVBQUF1RixLQUFBdkYsRUFBQXdGLE1BQUFDLE9BQUEsU0FBQUMsR0FDQSxPQUFBLE1BQUFDLEtBQUFELEtBR0F0TixFQUFBaEQsU0FDQW9DLEVBQUFOLEtBQUE4SSxPQ2RBNUwsUUFBQUMsT0FBQSxzQkFDQXVDLFdBQUEsa0JBQUEsU0FBQSxLQUFBLFNBQUFZLEVBQUFXLEdBQ0FBLEVBQUEwTixnQkFDQS9OLEtBQUEsU0FBQWtJLEdBQ0FqSSxRQUFBQyxJQUFBZ0ksR0FDQXhJLEVBQUFzTyxXQUFBOUYsSUFFQXhJLEVBQUF5QyxlQUFBLHVCQUNBekMsRUFBQWlHLFVBQUEsUUNSQXJKLFFBQUFDLE9BQUEsc0JBQ0F1QyxXQUFBLFlBQUEsU0FBQSxLQUFBLFNBQUFZLEVBQUFXLEdBQ0FBLEVBQUE0TixjQUNBak8sS0FBQSxTQUFBeUwsR0FDQS9MLEVBQUErTCxLQUFBQSxJQUVBcEwsRUFBQTZOLGlCQUNBbE8sS0FBQSxTQUFBbU8sR0FDQXpPLEVBQUF5TyxRQUFBQSxPQ1JBN1IsUUFBQUMsT0FBQSxzQkFDQXVDLFdBQUEsaUJBQ0EsU0FDQSxlQUNBLEtBQ0EsU0FDQSxjQUNBLFNBQUFZLEVBQUFVLEVBQUFDLEVBQUF6RCxFQUFBMkQsR0FDQWIsRUFBQTBPLEtBQUEsTUFDQTFPLEVBQUEyTyxTQUFBLHVCQUVBLElBQUFDLEdBQUEsV0FDQTVPLEVBQUE2TyxJQUFBQyxLQUFBRCxNQUNBbE8sRUFBQW9PLGtCQUNBek8sS0FBQSxTQUFBa0ksR0FDQXhJLEVBQUFnRyxTQUFBd0MsR0FDQSxTQUFBeEQsR0FDQXpFLFFBQUFDLElBQUF3RSxLQUlBaEYsR0FBQWtELElBQUEseUJBQUEwTCxHQUVBL04sRUFBQXdGLGdCQUFBLDBDQUNBQyxNQUFBdEcsRUFDQXVHLFVBQUEsZ0JBQ0FqRyxLQUFBLFNBQUFrRyxHQUNBeEcsRUFBQWlILFlBQUFULElBRUF4RyxFQUFBa0gsZUFBQSxTQUFBUCxHQUNBM0csRUFBQWlILFlBQUFMLE9BQ0FyRyxRQUFBQyxJQUFBbUcsR0FDQTNHLEVBQUEyRyxRQUFBQSxHQUVBM0csRUFBQW1ILGdCQUFBLFdBQ0FuSCxFQUFBaUgsWUFBQUgsUUFHQTlHLEVBQUFrRCxJQUFBLFdBQUEsV0FDQWxELEVBQUFpSCxZQUFBRyxXQUVBcEgsRUFBQXBDLE9BQUEsV0FDQVYsRUFBQVUsU0FBQVYsV0FDQSxXQUNBOEMsRUFBQWdQLFdBQUEsMEJBQ0FKLFVDN0NBLFNBQUFoUyxHQUNBLFlBRUFBLEdBQUFDLE9BQUEsY0FBQSxpQkFDQW9TLFNBQUEsTUFBQSxXQUVBQyxLQUFBQyxTQUFBLHVDQUVBRCxLQUFBRSxNQUNBLFFBQ0EsY0FDQSxlQUNBLEtBQ0EsU0FBQUMsRUFBQWpHLEVBQUF0SyxFQUFBd1EsR0FDQSxHQUFBSCxHQUFBRCxLQUFBQyxTQU9BSSxFQUFBLFNBQUFsUSxFQUFBbVEsR0FDQSxNQUFBRixHQUFBLFNBQUFHLEVBQUFDLEdBQ0FMLEdBRUFNLE9BQUEsTUFDQXpRLElBQUFpUSxFQUNBOVAsT0FBQXpDLEVBQUEyRSxPQUFBbEMsR0FBQXVRLElBQUEscUJBQ0FDLFFBQUEsSUFDQUwsTUFBQUEsS0FBQSxJQUlBTSxRQUFBLFNBQUF0SCxHQUNBLFVBQUFBLEVBQUF1SCxPQUNBTCxFQUFBbEgsRUFBQWhHLFNBRUFnRyxFQUFBQSxLQUNBaUgsRUFBQWpILEVBQUFBLEtBQUFrQyxVQUVBZ0YsRUFBQWxILEtBSUE1RyxNQUFBLFNBQUE0RyxFQUFBdUgsR0FFQUwsRUFEQSxJQUFBSyxFQUNBLEdBQUFDLE9BQUEsbUJBRUF4SCxRQVVBeUgsRUFBQSxTQUFBNVEsRUFBQW1RLEdBQ0EsR0FBQVUsR0FBQTlHLEVBQUErRyxLQUNBLE9BQUFaLEdBQUEzUyxFQUFBMkUsT0FBQWxDLEdBQUErUSxFQUFBRixJQUFBVixHQUdBLFFBQ0FhLG1CQUFBLFdBQ0EsTUFBQWQsSUFBQWUsRUFBQSx3QkFFQUMsYUFBQSxXQUNBLE1BQUFoQixJQUFBZSxFQUFBLGtCQUVBdkQsWUFBQSxTQUFBMUMsRUFBQStDLEdBQ0EsR0FBQWhLLElBQUFrTixFQUFBLGNBU0EsT0FQQWpHLElBQUEsZ0JBQUFBLEtBQ0FqSCxFQUFBaUgsU0FBQUEsR0FFQStDLEdBQUEsZ0JBQUFBLEtBQ0FoSyxFQUFBZ0ssTUFBQUEsR0FHQW1DLEVBQUFuTSxHQUFBLElBRUFpSyxjQUFBLFNBQUFoRCxFQUFBOEMsRUFBQTVDLEVBQUE2QyxFQUFBRixHQUNBLE1BQUFxQyxJQUNBZSxFQUFBLGdCQUNBakcsU0FBQUEsRUFDQThDLFNBQUFBLEVBQ0E1QyxTQUFBQSxFQUNBNkMsTUFBQUEsRUFDQUYsTUFBQUEsSUFDQSxJQUVBUSxhQUFBLFNBQUFyRCxFQUFBbUcsR0FDQSxNQUFBakIsSUFDQWUsRUFBQSxlQUNBakcsU0FBQUEsRUFDQW1HLElBQUFBLElBQ0EsSUFFQUMsVUFBQSxXQUNBLE1BQUFSLElBQUFLLEVBQUEsZUFFQW5FLG1CQUFBLFNBQUFKLEdBQ0EsTUFBQXdELElBQ0FlLEVBQUEscUJBQ0FJLG9CQUFBM0UsSUFDQSxJQUVBUSxvQkFBQSxTQUFBbUUsRUFBQW5HLEVBQUFpQyxHQUNBLE1BQUErQyxJQUNBZSxFQUFBLHNCQUNBSSxvQkFBQUEsRUFDQW5HLFNBQUFBLEVBQ0FpQyxLQUFBQSxJQUNBLElBRUFtRSxxQkFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFaLElBQ0FLLEVBQUEsdUJBQ0FNLGFBQUFBLEVBQ0FDLGFBQUFBLElBQ0EsSUFFQXpHLFdBQUEsU0FBQUMsRUFBQUUsR0FDQSxNQUFBZ0YsSUFDQWUsRUFBQSxhQUNBakcsU0FBQUEsRUFDQUUsU0FBQUEsSUFDQSxHQUNBakssS0FBQSxTQUFBa0ksR0FJQSxNQUhBWSxHQUFBMEgsU0FBQXRJLEdBR0FBLEtBR0FpRCxZQUFBLFdBQ0F3RSxHQUFBSyxFQUFBLGdCQUFBLEdBQ0FoUSxLQUFBLFdBQ0E4SSxFQUFBMkgsaUJBR0FDLGNBQUEsV0FDQSxNQUFBZixJQUFBSyxFQUFBLGtCQUFBLElBRUFXLFdBQUEsV0FDQSxNQUFBMUIsSUFBQWUsRUFBQSxnQkFFQVksZUFBQSxXQUNBLE1BQUEzQixJQUFBZSxFQUFBLG9CQUVBYSxVQUFBLFdBQ0EsTUFBQTVCLElBQUFlLEVBQUEsZUFFQWMsa0JBQUEsU0FBQXZOLEdBQ0EsTUFBQTBMLElBQ0FlLEVBQUEsb0JBQ0F6TSxNQUFBQSxLQUdBd04saUJBQUEsU0FBQXhOLEdBQ0EsTUFBQTBMLElBQ0FlLEVBQUEsbUJBQ0F6TSxNQUFBQSxLQUdBeU4sVUFBQSxTQUFBQyxHQUNBLE1BQUFoQyxJQUNBZSxFQUFBLFlBQ0FpQixPQUFBQSxLQUdBQyxtQkFBQSxTQUFBRCxHQUNBLE1BQUFoQyxJQUNBZSxFQUFBLHFCQUNBaUIsT0FBQUEsS0FHQUUsYUFBQSxTQUFBRixHQUNBLE1BQUFoQyxJQUNBZSxFQUFBLGVBQ0FpQixPQUFBQSxLQUdBRyxVQUFBLFNBQUFDLEdBQ0EsTUFBQXBDLElBQ0FlLEVBQUEsWUFDQXFCLE9BQUFBLEtBR0FDLFdBQUEsU0FBQS9OLEVBQUEwTixHQUNBLE1BQUFoQyxJQUNBZSxFQUFBLGFBQ0F6TSxNQUFBQSxFQUNBME4sT0FBQUEsS0FHQU0sYUFBQSxTQUFBaE8sR0FDQSxNQUFBMEwsSUFDQWUsRUFBQSxlQUNBek0sTUFBQUEsS0FHQWlPLGtCQUFBLFdBQ0EsTUFBQXZDLElBQUFlLEVBQUEsdUJBRUF5QixpQkFBQSxTQUFBbE8sR0FDQSxNQUFBMEwsSUFDQWUsRUFBQSxtQkFDQXpNLE1BQUFBLEtBR0FtTyxtQkFBQSxXQUNBLE1BQUEvQixJQUFBSyxFQUFBLHVCQUFBLElBRUEyQixxQkFBQSxXQUNBLE1BQUExQyxJQUFBZSxFQUFBLDBCQUVBNEIsaUJBQUEsV0FDQSxNQUFBM0MsSUFBQWUsRUFBQSxzQkFFQTZCLG9CQUFBLFdBQ0EsTUFBQTVDLElBQUFlLEVBQUEseUJBRUE4QixjQUFBLFdBQ0EsTUFBQTdDLElBQUFlLEVBQUEseUJBS0FqVCxPQUFBVCxTQ3RPQSxTQUFBQSxFQUFBeVYsR0FDQSxZQUVBelYsR0FBQUMsT0FBQSxnQkFDQW9TLFNBQUEsS0FBQSxXQUVBQyxLQUFBRSxNQUNBLGlCQUNBLE1BQ0EsS0FDQSxTQUFBa0QsRUFBQXhHLEVBQUF3RCxHQUVBLEdBQUFpRCxFQUNBLElBQUFsVixPQUFBbVYsYUFDQUQsRUFBQUQsRUFBQUcsT0FBQSxxQkFDQSxDQUFBLElBQUFwVixPQUFBcVYsYUFLQSxNQURBblMsU0FBQUMsSUFBQSx1Q0FDQTZSLENBSkFFLEdBQUFsVixPQUFBcVYsYUFDQSxnQkFBQSxNQUFBLGFBQUEsVUFNQSxHQUFBQyxJQUNBQyxPQUNBLEtBQUEsUUFDQSxRQUFBLFFBQ0EsSUFBQSxTQUNBLEtBQUEsU0FDQSxPQUFBLFNBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsTUFBQSxTQUNBLE1BQUEsU0FDQSxPQUFBLFNBQ0EsTUFBQSxRQUNBLE1BQUEsUUFDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLE1BQUEsU0FDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLElBQUEsU0FFQUMsWUFDQSxLQUFBLFNBQ0EsTUFBQSxRQUNBLE1BQUEsUUFDQSxTQUFBLFFBQ0EsVUFBQSxTQUVBQyxVQUNBLEtBQUEsUUFDQSxJQUFBLFNBQ0EsS0FBQSxTQUNBLEtBQUEsU0FDQSxLQUFBLFNBQ0EsS0FBQSxTQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLFFBQUEsUUFDQSxNQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsU0FFQUMsU0FDQSxLQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxJQUFBLFNBRUFDLGVBQ0EsS0FBQSxRQUNBLE1BQUEsUUFDQSxPQUFBLFNBRUFDLE9BQ0EsS0FBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsTUFBQSxRQUNBLEtBQUEsUUFDQSxNQUFBLFFBQ0EsT0FBQSxTQUNBLE1BQUEsU0FDQSxLQUFBLFNBQ0EsTUFBQSxTQUNBLE9BQUEsU0FDQSxNQUFBLFNBQ0EsTUFBQSxTQUVBQyxPQUNBLEtBQUEsUUFDQSxNQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FFQUMsZUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLE9BQUEsUUFDQSxLQUFBLFFBQ0EsV0FBQSxTQUNBLEtBQUEsU0FDQSxPQUFBLFFBQ0EsT0FBQSxRQUNBLElBQUEsU0FDQSxLQUFBLFFBQ0EsTUFBQSxRQUNBLE1BQUEsU0FFQUMsWUFDQSxLQUFBLFFBQ0EsV0FBQSxTQUNBLFdBQUEsU0FDQSxNQUFBLFNBQ0EsTUFBQSxTQUNBLE9BQUEsU0FDQSxRQUFBLFNBQ0EsVUFBQSxTQUVBQyxjQUNBLFNBQUEsU0FFQUMsWUFDQSxLQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxLQUFBLFFBQ0EsS0FBQSxTQUNBLEtBQUEsU0FDQSxPQUFBLFNBQ0EsT0FBQSxTQUNBLE9BQUEsU0FDQSxPQUFBLFNBQ0EsVUFBQSxTQUVBQyxlQUNBLEtBQUEsUUFDQSxJ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QUFDLHdCQUtBUixVQUFBLHVCQUFBLHVCQUFBLFNBQUFtQixHQUNBLFlBQ0EsUUFDQWhCLFNBQUEsSUFDQUMsS0FBQSxTQUFBL1EsRUFBQTRILEdBQ0FBLEVBQUFxSixHQUFBLFFBQUEsU0FBQUMsR0FDQUEsRUFBQWUsT0FBQUQsTUFBQWQsRUFBQWUsT0FBQUMsT0FBQW5iLE9BQUFvYixTQUFBRCxPQUNBSixFQUFBQyxLQUFBYixFQUFBZSxPQUFBRCxLQUFBLFdBQ0FkLEVBQUFDIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbmd1bGFyLm1vZHVsZSBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXIgbW9kdWxlc1xuLy8gJ2lmaXNrZScgaXMgdGhlIG5hbWUgb2YgdGhpcyBhbmd1bGFyIG1vZHVsZSAoYWxzbyBzZXQgaW4gYSA8Ym9keT4gYXR0cmlidXRlIGluIGluZGV4Lmh0bWwpXG4vLyB0aGUgMm5kIHBhcmFtZXRlciBpcyBhbiBhcnJheSBvZiAncmVxdWlyZXMnXG4vLyAnaWZpc2tlLmNvbnRyb2xsZXJzJyBpcyBmb3VuZCBpbiBjb250cm9sbGVycy5qc1xuXG5hbmd1bGFyLm1vZHVsZSgnaWZpc2tlJywgW1xuICAgICdpb25pYycsXG4gICAgJ2lmaXNrZS5jb250cm9sbGVycycsXG4gICAgJ2lmaXNrZS5kaXJlY3RpdmVzJyxcbiAgICAnaWZpc2tlLmFwaScsXG4gICAgJ2lmaXNrZS5kYicsXG4gICAgJ2lmaXNrZS51dGlscycsXG4gICAgJ2lmaXNrZS51cGRhdGUnLFxuICAgICdpZmlza2UuZmlsdGVycycsXG4gICAgJ2lvbmljLmlvbi5oZWFkZXJTaHJpbmsnLFxuICAgICduZ0NvcmRvdmEnLFxuICAgICdzeXN0ZW1Ccm93c2VyJyxcbiAgICAnbmdDb3Jkb3ZhU21zJyxcbiAgICAnbmdNZXNzYWdlcycsXG4gICAgJ0ltZ0NhY2hlJyxcbiAgICAnbGVhZmxldC1kaXJlY3RpdmUnLFxuICAgICd0YWJTbGlkZUJveCdcbl0pXG5cbiAgICAuY29uc3RhbnQoJyRpb25pY0xvYWRpbmdDb25maWcnLCB7XG5cdHRlbXBsYXRlOiAnPGlvbi1zcGlubmVyPjwvaW9uLXNwaW5uZXI+J1xuXHQvLyBoaWRlT25TdGF0ZUNoYW5nZTogdHJ1ZVxuICAgIH0pXG4gICAgLnJ1bihbJyRpb25pY1BsYXRmb3JtJywgJ1VwZGF0ZScsICdJbWdDYWNoZScsIGZ1bmN0aW9uKCRpb25pY1BsYXRmb3JtLCBVcGRhdGUsIEltZ0NhY2hlKSB7XG5cdCRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gSGlkZSB0aGUgYWNjZXNzb3J5IGJhciBhYm92ZSB0aGUga2V5Ym9hcmQgZm9yIGZvcm0gaW5wdXRzXG4gICAgICAgICAgICBpZiAod2luZG93LmlvbmljICYmIHdpbmRvdy5pb25pYy5LZXlib2FyZCkge1xuXHRcdHdpbmRvdy5pb25pYy5LZXlib2FyZC5oaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2luZG93LlN0YXR1c0Jhcikge1xuXHRcdC8vIG9yZy5hcGFjaGUuY29yZG92YS5zdGF0dXNiYXIgcmVxdWlyZWRcblx0XHR3aW5kb3cuU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBJbWdDYWNoZS4kaW5pdCgpO1xuICAgICAgICAgICAgVXBkYXRlLnVwZGF0ZSgpO1xuXHR9KTtcbiAgICB9XSlcblxuICAgIC5jb25maWcoW1xuXHQnJHN0YXRlUHJvdmlkZXInLFxuXHQnJHVybFJvdXRlclByb3ZpZGVyJyxcblx0JyRpb25pY0NvbmZpZ1Byb3ZpZGVyJyxcblx0J0ltZ0NhY2hlUHJvdmlkZXInLFxuXHRmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyLCAkaW9uaWNDb25maWdQcm92aWRlciwgSW1nQ2FjaGVQcm92aWRlcikge1xuXG5cdCAgICBJbWdDYWNoZVByb3ZpZGVyLnNldE9wdGlvbnMoe1xuXHRcdGRlYnVnOiB0cnVlLFxuXHRcdHVzZVBlcnNpc3RlbnRDYWNoZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgICBJbWdDYWNoZVByb3ZpZGVyLm1hbnVhbEluaXQgPSB0cnVlO1xuXG5cblx0ICAgIC8vIENhY2hlIHZpZXdzIGluIHRoZSBmb3J3YXJkIHN0YWNrXG5cdCAgICAkaW9uaWNDb25maWdQcm92aWRlci52aWV3cy5mb3J3YXJkQ2FjaGUodHJ1ZSk7XG5cblx0ICAgIC8vIENsZWFyIGJhY2sgYnV0dG9uIGRlZmF1bHQgdGV4dFxuXHQgICAgJGlvbmljQ29uZmlnUHJvdmlkZXIuYmFja0J1dHRvbi5wcmV2aW91c1RpdGxlVGV4dChmYWxzZSkudGV4dCgnJyk7XG5cblx0ICAgIC8vIFRhYnMgcG9zaXRpb25cblx0ICAgICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnRhYnMucG9zaXRpb24oJ2JvdHRvbScpO1xuXG5cdCAgICAvKipcblx0ICAgICAqIElvbmljIHVzZXMgQW5ndWxhclVJIFJvdXRlci4gTGVhcm4gbW9yZSBoZXJlOlxuXHQgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvdWktcm91dGVyXG5cdCAgICAgKi9cblxuXHQgICAgdmFyIGRlZmF1bHRVcmwgPSAnL2FwcC9sb2dpbic7XG5cdCAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXNzaW9uJykpIHtcblx0XHRkZWZhdWx0VXJsID0gJy9hcHAvaG9tZSc7XG5cdCAgICB9XG5cdCAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKGRlZmF1bHRVcmwpO1xuXG5cblxuXHQgICAgJHN0YXRlUHJvdmlkZXJcblxuXHRcdC5zdGF0ZSgnYXBwJywge1xuXHRcdCAgICB1cmw6ICcvYXBwJyxcblx0XHQgICAgLy9hYnN0cmFjdDogdHJ1ZSxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL21lbnUvbWVudS5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ01lbnVDdHJsJ1xuXHRcdH0pXG5cblx0XHQuc3RhdGUoJ2FwcC5sb2dpbicsIHtcblx0XHQgICAgdXJsOiAnL2xvZ2luJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2xvZ2luL2xvZ2luLmh0bWwnLFxuXHRcdCAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJ1xuXHRcdH0pXG5cblx0ICAgIC8vIEFjY291bnQgcmVjb3Zlcnlcblx0XHQuc3RhdGUoJ2FwcC5yZWNvdmVyJywge1xuXHRcdCAgICB1cmw6ICcvcmVjb3ZlcicsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWNvdmVyL3JlY292ZXIuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdSZWNvdmVyQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLnJlY292ZXIubG9zdHBhc3N3b3JkJywge1xuXHRcdCAgICB1cmw6ICcvbG9zdHBhc3N3b3JkJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlY292ZXIvbG9zdHBhc3N3b3JkLmh0bWwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5yZWNvdmVyLnJlc2V0cGFzc3dvcmQnLCB7XG5cdFx0ICAgIHVybDogJy9yZXNldHBhc3N3b3JkJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlY292ZXIvcmVzZXRwYXNzd29yZC5odG1sJ1xuXHRcdH0pXG5cdCAgICBcblx0ICAgIC8vIEFjY291bnQgcmVnaXN0cmF0aW9uXG5cdFx0LnN0YXRlKCdhcHAucmVnaXN0ZXInLCB7XG5cdFx0ICAgIHVybDogJy9yZWdpc3RlcicsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLnJlZ2lzdGVyLmRldGFpbHMnLCB7XG5cdFx0ICAgIHVybDogJy9kZXRhaWxzJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlZ2lzdGVyL3JlZ2lzdGVyX2RldGFpbHMuaHRtbCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLnJlZ2lzdGVyLnZlcmlmeScsIHtcblx0XHQgICAgdXJsOiAnL3ZlcmlmeScsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlcl92ZXJpZnkuaHRtbCdcblx0XHR9KVxuXHQgICAgXG5cdCAgICAvL1xuXHRcdC5zdGF0ZSgnYXBwLmhvbWUnLCB7XG5cdFx0ICAgIHVybDogJy9ob21lJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2hvbWUvaG9tZS5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ0hvbWVDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdhcHAuaW5mbycsIHtcblx0XHQgICAgdXJsOiAnL2luZm8nLFxuXHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvaW5mby9pbmZvLmh0bWwnXG5cdFx0fSlcblxuXHRcdC5zdGF0ZSgnYXBwLmJ1Z3MnLCB7XG5cdFx0ICAgIHVybDogJy9pbmZvJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL21lbnUvcmVwb3J0Lmh0bWwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5jb250YWN0Jywge1xuXHRcdCAgICB1cmw6ICcvY29udGFjdCcsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9jb250YWN0L2NvbnRhY3QuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdDb250YWN0Q3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLmxlZ2FsJywge1xuXHRcdCAgICB1cmw6ICcvbGVnYWwnLFxuXHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbGVnYWwvbGVnYWwuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdMZWdhbEN0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5hYm91dCcsIHtcblx0XHQgICAgdXJsOiAnL2Fib3V0Jyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2Fib3V0L2Fib3V0Lmh0bWwnLFxuXHRcdCAgICBjb250cm9sbGVyOiAnQWJvdXRDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdhcHAudXNlcmluZm8nLCB7XG5cdFx0ICAgIHVybDogJy91c2VyaW5mbycsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdVc2VyQ3RybCcsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy91c2VyL3VzZXIuaHRtbCcsXG5cdFx0fSlcblxuXHRcdC5zdGF0ZSgnYXBwLmNvdW50aWVzJywge1xuXHRcdCAgICB1cmw6ICcvY291bnRpZXMnLFxuXHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvY291bnRpZXMvY291bnRpZXMuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdDb3VudGllc0N0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5hcmVhcycsIHtcblx0XHQgICAgdXJsOiAnL2FyZWFzJyxcblx0XHQgICAgcGFyYW1zOiB7J2lkJzogZmFsc2UsICdjb3VudHknOiBmYWxzZSwgJ3NlYXJjaCc6ICcnfSxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWFfbGlzdC9hcmVhX2xpc3QuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdBcmVhc0N0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5jYXJkcycsIHtcblx0XHQgICAgdXJsOiAnL2NhcmRzJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3VzZXJfY2FyZHMvdXNlcl9jYXJkcy5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ1VzZXJDYXJkc0N0cmwnXG5cdFx0fSlcblx0XHQuc3RhdGUoJ2FwcC5mYXZvcml0ZXMnLCB7XG5cdFx0ICAgIHVybDogJy9mYXZvcml0ZXMnLFxuXHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmF2b3JpdGVzL2Zhdm9yaXRlcy5odG1sJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdhcHAuZmlzaGVzJywge1xuXHRcdCAgICB1cmw6ICcvZmlzaGVzJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2Zpc2hlcy9maXNoZXMuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdGaXNoZXNDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdhcHAuZmlzaGRldGFpbCcsIHtcblx0XHQgICAgdXJsOiAnL2Zpc2hkZXRhaWwvOmlkJyxcblx0XHQgICAgcGFyYW1zOiB7J2lkJzogZmFsc2UsICdmaXNoJzogZmFsc2V9LFxuXHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmlzaF9kZXRhaWwvZmlzaF9kZXRhaWwuaHRtbCcsXG5cdFx0ICAgIGNvbnRyb2xsZXI6ICdGaXNoRGV0YWlsQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLm1hcCcsIHtcblx0XHQgICAgdXJsOiAnL21hcCcsXG5cdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9tYXAvbWFwLmh0bWwnLFxuXHRcdCAgICBjb250cm9sbGVyOiAnTWFwQ3RybCdcblx0XHR9KVxuXHRcdC5zdGF0ZSgnYXBwLnRlY2huaXF1ZXMnLCB7XG5cdFx0ICAgIHVybDogJy90ZWNobmlxdWVzJyxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3RlY2huaXF1ZXMvdGVjaG5pcXVlcy5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ1RlY2huaXF1ZXNDdHJsJ1xuXHRcdH0pXG5cdFx0LnN0YXRlKCdhcHAudGVjaG5pcXVlZGV0YWlsJywge1xuXHRcdCAgICB1cmw6ICcvdGVjaG5pcXVlZGV0YWlsLzppZCcsXG5cdFx0ICAgIHBhcmFtczogeydpZCc6IGZhbHNlLCAndGVjaCc6IGZhbHNlfSxcblx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3RlY2huaXF1ZV9kZXRhaWwvdGVjaG5pcXVlX2RldGFpbC5odG1sJyxcblx0XHQgICAgY29udHJvbGxlcjogJ1RlY2huaXF1ZURldGFpbEN0cmwnXG5cdFx0fSlcblx0ICAgIC8qLnN0YXRlKCdhcHAucmVwb3J0Jywge1xuXHQgICAgICB1cmw6ICcvcmVwb3J0Jyxcblx0ICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlcG9ydC9yZXBvcnQuaHRtbCdcblx0ICAgICAgfSkqL1xuXG5cdFx0LnN0YXRlKCdhcHAuYXJlYScsIHtcblx0XHQgICAgdXJsOiAnL2FyZWEvOmlkJyxcblx0XHQgICAgdmlld3M6IHtcblx0XHRcdCdAYXBwJzoge1xuXHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hcmVhL2FyZWEuaHRtbCcsXG5cdFx0XHQgICAgY29udHJvbGxlcjogJ0FyZWFDdHJsJyxcblx0XHRcdH0sXG5cdFx0XHQnaW5mb0BhcHAuYXJlYSc6IHtcblx0XHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXJlYS9pbmZvLmh0bWwnXG5cdFx0XHR9LFxuXHRcdFx0J21hcEBhcHAuYXJlYSc6IHtcblx0XHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXJlYS9tYXAuaHRtbCdcblx0XHRcdH0sXG5cdFx0XHQnZmlzaGluZm9AYXBwLmFyZWEnOiB7XG5cdFx0XHQgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvZmlzaC5odG1sJ1xuXHRcdFx0fSxcblx0XHRcdCdjYXJkc0BhcHAuYXJlYSc6IHtcblx0XHRcdCAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXJlYS9jYXJkcy5odG1sJ1xuXHRcdFx0fVxuXHRcdCAgICB9XG5cdFx0fSk7XG5cdH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycsIFtdKTtcbmFuZ3VsYXIubW9kdWxlKCdpZmlza2UuZGlyZWN0aXZlcycsIFtdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuICAgIC5jb250cm9sbGVyKCdBYm91dEN0cmwnLCBbJyRzY29wZScsJyRjb3Jkb3ZhQXBwVmVyc2lvbicsICckaW9uaWNQbGF0Zm9ybScsICdVcGRhdGUnLCBmdW5jdGlvbigkc2NvcGUsICRjb3Jkb3ZhQXBwVmVyc2lvbiwgJGlvbmljUGxhdGZvcm0sIFVwZGF0ZSkge1xuXHQkc2NvcGUudmVyc2lvbiA9ICRzY29wZS5kYkRhdGUgPSAnT2vDpG50JztcbiAgICAkc2NvcGUudXBkYXRlID0gVXBkYXRlO1xuXG5cdCRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xuXHQgICAgaWYgKHdpbmRvdy5jb3Jkb3ZhKSB7XG5cdFx0JGNvcmRvdmFBcHBWZXJzaW9uLmdldEFwcFZlcnNpb24oKS50aGVuKGZ1bmN0aW9uKHZlcnNpb24pIHtcblx0XHQgICAgY29uc29sZS5sb2coJ2lGaXNrZSB2ZXJzaW9uOicsIHZlcnNpb24pO1xuXHRcdCAgICAkc2NvcGUudmVyc2lvbiA9IHZlcnNpb247XG5cdFx0fSk7XG5cdCAgICB9XG5cdH0pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignQXJlYUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRpb25pY0hpc3RvcnknLFxuICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICckc3RhdGVQYXJhbXMnLFxuICAgICdEQicsXG4gICAgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLFxuICAgICckaW9uaWNNb2RhbCcsXG4gICAgJ2xlYWZsZXRFdmVudHMnLFxuICAgICckaW9uaWNQbGF0Zm9ybScsXG4gICAgJyRjb3Jkb3ZhR2VvbG9jYXRpb24nLFxuICAgICckY29yZG92YURldmljZU9yaWVudGF0aW9uJyxcbiAgICAnJHRpbWVvdXQnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGlvbmljSGlzdG9yeSwgbG9jYWxTdG9yYWdlLCAgJHN0YXRlUGFyYW1zLCBEQiwgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSwgJGlvbmljTW9kYWwsIGxlYWZsZXRFdmVudHMsICRpb25pY1BsYXRmb3JtLCAkY29yZG92YUdlb2xvY2F0aW9uLCAkY29yZG92YURldmljZU9yaWVudGF0aW9uLCAkdGltZW91dCkge1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVNeXBvcyhvYmopIHtcbiAgICAgICAgICAgIC8qIEhhY2tmaXggdG8gbWFrZSBpdCB1cGRhdGUgPSggKi9cbiAgICAgICAgICAgIGlmKCRzY29wZS5tYXAubWFya2Vycy5teXBvczIpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUubWFwLm1hcmtlcnMubXlwb3MyLCBvYmopO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2Vycy5teXBvcyA9ICRzY29wZS5tYXAubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5tYXAubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZS5tYXAubWFya2Vycy5teXBvcywgb2JqKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnMubXlwb3MyID0gJHNjb3BlLm1hcC5tYXJrZXJzLm15cG9zO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUubWFwLm1hcmtlcnMubXlwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TXlwb3MoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUpO1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5tYXAubWFya2Vycy5teXBvcyB8fCAkc2NvcGUubWFwLm1hcmtlcnMubXlwb3MyO1xuICAgICAgICB9XG5cbiAgICAgICAgJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkY29yZG92YUdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogMzAwMFxuICAgICAgICAgICAgfSkudGhlbihudWxsLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocG9zKSB7XG4gICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU15cG9zKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogcG9zLmNvb3Jkcy5sYXRpdHVkZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcG9zLmNvb3Jkcy5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGNvcmRvdmFEZXZpY2VPcmllbnRhdGlvbi53YXRjaEhlYWRpbmcoe1xuICAgICAgICAgICAgICAgIGZyZXF1ZW5jeTogMzAwMFxuICAgICAgICAgICAgfSkudGhlbihudWxsLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oaGVhZGluZykge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZU15cG9zKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25BbmdsZTogaGVhZGluZy50cnVlSGVhZGluZ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUubWFwID0ge1xuICAgICAgICAgICAgY2VudGVyOiB7fSxcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBteXBvczoge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGxuZzogMCxcbiAgICAgICAgICAgICAgICAgICAgaWNvbkFuZ2xlOiAwLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhpcyBpcyB5b3UhJyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5pbWFnZV9lbmRwb2ludCA9ICdodHRwOi8vd3d3LmlmaXNrZS5zZSc7XG5cbiAgICAgICAgdmFyIGljb25zID0ge307XG4gICAgICAgICRzY29wZS5uYXZpZ2F0ZSA9IGZ1bmN0aW9uKHBvaSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSBnZXRNeXBvcygpO1xuICAgICAgICAgICAgbGF1bmNobmF2aWdhdG9yLm5hdmlnYXRlKFxuICAgICAgICAgICAgICAgIFskc2NvcGUubmF2dG8ubGF0LCAkc2NvcGUubmF2dG8ubG5nXSxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPcGVuaW5nIG5hdmlnYXRvcicpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3Ipe1xuICAgICAgICAgICAgICAgICAgICBhbGVydCgnTmF2aWdhdGlvbiBmYWlsZWQhJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGVuYWJsZWRFdmVudHMgPSBbJ3BvcHVwb3BlbicsICdwb3B1cGNsb3NlJ107XG4gICAgICAgICRzY29wZS5ldmVudHMgPSB7XG4gICAgICAgICAgICBlbmFibGVkOiBlbmFibGVkRXZlbnRzXG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignbGVhZmxldERpcmVjdGl2ZU1hcmtlci5wb3B1cG9wZW4nLCBmdW5jdGlvbihldmVudCwgYXJncykge1xuICAgICAgICAgICAgLy9zaG93IG5hdnRvYnV0dG9uXG4gICAgICAgICAgICAkc2NvcGUubmF2dG8gPSBhcmdzLm1vZGVsO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCdsZWFmbGV0RGlyZWN0aXZlTWFya2VyLnBvcHVwY2xvc2UnLCBmdW5jdGlvbihldmVudCwgYXJncykge1xuICAgICAgICAgICAgLy9oaWRlIG5hdnRvYnV0dG9uXG4gICAgICAgICAgICAkc2NvcGUubmF2dG8gPSBudWxsO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8vIEFyZWFpbmZvXG4gICAgICAgIERCLmdldEFyZWEoJHN0YXRlUGFyYW1zLmlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihhcmVhKSB7XG4gICAgICAgICAgICAkc2NvcGUubWFwLmNlbnRlciA9IHtcbiAgICAgICAgICAgICAgICBsYXQ6IGFyZWEubGF0LFxuICAgICAgICAgICAgICAgIGxuZzogYXJlYS5sbmcsXG4gICAgICAgICAgICAgICAgem9vbTogTnVtYmVyKGFyZWEuem9vbSkgPyBOdW1iZXIoYXJlYS56b29tKSA6IDlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkc2NvcGUuaW1hZ2VzID0gYXJlYS5pbWFnZXM7XG5cbiAgICAgICAgICAgICRzY29wZS5hcmVhID0gYXJlYTtcbiAgICAgICAgICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUuJGdldEJ5SGFuZGxlKCd0YWJzJykudXBkYXRlKCk7XG5cbiAgICAgICAgICAgIERCLmdldE9yZ2FuaXphdGlvbihhcmVhLm9yZ2lkKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ob3JnKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm9yZyA9IG9yZztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgREIuZ2V0UG9pVHlwZXMoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocG9pX3R5cGVzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2lfdHlwZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBwb2lfdHlwZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGljb25zW3R5cGUuSURdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2h0dHA6Ly93d3cuaWZpc2tlLnNlLycgKyB0eXBlLmljb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5jaG9yOiBbMTYsIDM3XSwgLy8gcG9pbnQgb2YgdGhlIGljb24gd2hpY2ggd2lsbCBjb3JyZXNwb25kIHRvIG1hcmtlcidzIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzAsIC0zNV0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIERCLmdldFBvaXMoYXJlYS5vcmdpZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihwb2lzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBwb2lzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9pID0gcG9pc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzWydwb2knICsgaV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdwb2lzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHBvaS5sYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHBvaS5sbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29uc1twb2kudHlwZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogcG9pLnRcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzWydhcmVhJ10gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3BvaXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBhcmVhLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogYXJlYS5sbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBhcmVhLnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIERCLmdldFBvbHlnb25zKGFyZWEub3JnaWQpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocG9seWdvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5wYXRocyA9IHBvbHlnb25zLm1hcChmdW5jdGlvbihwb2x5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGxuZ3M6IEpTT04ucGFyc2UoJ1snICsgcG9seS5wb2x5ICsgJ10nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogcG9seS5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBwb2x5LmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3BvbHlnb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBEQi5nZXRBcmVhRmlzaGVzKCRzdGF0ZVBhcmFtcy5pZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZmlzaGVzKSB7XG4gICAgICAgICAgICAkc2NvcGUuZmlzaGVzID0gZmlzaGVzO1xuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS4kZ2V0QnlIYW5kbGUoJ3RhYnMnKS51cGRhdGUoKTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBEQi5nZXRQcm9kdWN0c0J5QXJlYSgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHByb2R1Y3RzKSB7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdHMgPSBwcm9kdWN0cztcbiAgICAgICAgICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUuJGdldEJ5SGFuZGxlKCd0YWJzJykudXBkYXRlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQXJlYSBmaXNoZXNcbiAgICAgICAgJHNjb3BlLnNvcnRvcmRlciA9ICctYW1vdW50JztcblxuICAgICAgICAvL0FyZWFfQ2FyZHNcbiAgICAgICAgJHNjb3BlLnNtc3Rlcm1zID0gbG9jYWxTdG9yYWdlLmdldCgnc21zX3Rlcm1zJyk7XG4gICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSAnc28nO1xuXG4gICAgICAgIC8vU01TLW1vZGFsXG4gICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY29tcG9uZW50cy9hcmVhL3Ntc19tb2RhbC5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAkc2NvcGUuc21zX21vZGFsID0gbW9kYWw7XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUub3Blbk1vZGFsID0gZnVuY3Rpb24ocHJvZHVjdCkge1xuICAgICAgICAgICAgJHNjb3BlLnNtc19tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdCA9IHByb2R1Y3Q7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuc21zX21vZGFsLmhpZGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnNob3dUZXJtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnNob3dpbmd0ZXJtcyA9ICEkc2NvcGUuc2hvd2luZ3Rlcm1zO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuc2hvd2luZ3Rlcm1zID0gZmFsc2U7XG5cbiAgICAgICAgLy9SdWxlcyBtb2RhbFxuICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ2NvbXBvbmVudHMvYXJlYS9ydWxlc19tb2RhbC5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwgPSBtb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5vcGVuUnVsZXNNb2RhbCA9IGZ1bmN0aW9uKHByb2R1Y3QpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdCA9IHByb2R1Y3Q7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jbG9zZVJ1bGVzTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5oaWRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5zbXNfbW9kYWwucmVtb3ZlKCk7XG4gICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJHNjb3BlLmdvdG9Qcm9kdWN0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS4kZ2V0QnlIYW5kbGUoJ3RhYnMnKS5zbGlkZSgxKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvL01hcFxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUubWFwLCB7XG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBiYXNlbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIG91dGRvb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVXRvbWh1c2thcnRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4eXonLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3ttYXB0eXBlfS97en0ve3h9L3t5fUAyeC5wbmc/YWNjZXNzX3Rva2VuPXthcGlrZXl9JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHR5cGU6ICdtYXBib3gub3V0ZG9vcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaWtleTogJ3BrLmV5SjFJam9pYldGcGMzUm9ieUlzSW1FaU9pSTNVbXM1UjBJd0luMC5ET2hVODFjbEhMRWhUajgxRElPamRnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzYXRlbGxpdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTYXRlbGxpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAneHl6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkudGlsZXMubWFwYm94LmNvbS92NC97bWFwdHlwZX0ve3p9L3t4fS97eX1AMngucG5nP2FjY2Vzc190b2tlbj17YXBpa2V5fScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXB0eXBlOiAnbWFwYm94LnNhdGVsbGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpa2V5OiAncGsuZXlKMUlqb2liV0ZwYzNSb2J5SXNJbUVpT2lJM1VtczVSMEl3SW4wLkRPaFU4MWNsSExFaFRqODFESU9qZGcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvaXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdMOkbGxlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2VyY2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd09uU2VsZWN0b3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiA5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNodW5rZWRMb2FkaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb3ZlcmFnZU9uSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU91dHNpZGVWaXNpYmxlQm91bmRzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGF0aHM6IHt9XG4gICAgICAgIH0pO1xuICAgIH1cbl0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignQXJlYXNDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJyRpb25pY1Njcm9sbERlbGVnYXRlJyAsJ0RCJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMsICRpb25pY1Njcm9sbERlbGVnYXRlICxEQikge1xuXG4gICAgdmFyIGNvcHkgPSAkc3RhdGVQYXJhbXMuc2VhcmNoO1xuICAgICRzY29wZS5zZWFyY2ggPSBjb3B5O1xuICAgICRzY29wZS5jb3VudHkgPSAkc3RhdGVQYXJhbXMuY291bnR5O1xuICAgIERCLnNlYXJjaCgnJywgJHN0YXRlUGFyYW1zLmlkKVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5hcmVhcyA9IGRhdGE7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG4gICAgJHNjb3BlLmNsZWFyU2VhcmNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5zZWFyY2ggPSAnJztcbiAgICB9O1xuICAgICRzY29wZS5zY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuc2Nyb2xsVG9wKCk7XG4gICAgfTtcblxufV0pO1xuXG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdDb250YWN0Q3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICRzY29wZS5jb250YWN0SW5mbyA9IGxvY2FsU3RvcmFnZS5nZXQoJ2NvbnRhY3RJbmZvJyk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdDb3VudGllc0N0cmwnLCBbJyRzY29wZScsICdEQicsIGZ1bmN0aW9uKCRzY29wZSwgREIpIHtcbiAgICBEQi5nZXRDb3VudGllcygpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuY291bnRpZXMgPSBkYXRhO1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignRmlzaERldGFpbEN0cmwnLCBbJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgREIpIHtcbiAgICAkc2NvcGUuZmlzaCA9ICRzdGF0ZVBhcmFtcy5maXNoO1xuICAgICRzY29wZS5pbWFnZV9lbmRwb2ludCA9ICdodHRwOi8vd3d3LmlmaXNrZS5zZSc7XG4gICAgaWYoISRzY29wZS5maXNoKSB7XG4gICAgICAgIERCLmdldEZpc2goJHN0YXRlUGFyYW1zLmlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuZmlzaCA9IGRhdGE7XG4gICAgY29uc29sZS5sb2coJHNjb3BlLmZpc2gpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygkc2NvcGUuZmlzaCk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdGaXNoZXNDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgJHNjb3BlLnNvcnRvcmRlciA9ICdzbyc7XG4gICAgJHNjb3BlLmltYWdlX2VuZHBvaW50ID0gJ2h0dHA6Ly93d3cuaWZpc2tlLnNlJztcbiAgICBEQi5nZXRGaXNoZXMoKVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgJHNjb3BlLmZpc2hlcyA9IGRhdGE7XG4gICAgICAgICRzY29wZS5kZWZhdWx0X2ltZyA9IGRhdGFbMF0uaW1nO1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignSG9tZUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZScsXG4gICAgJyRpb25pY0hpc3RvcnknLFxuICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICdzZXNzaW9uRGF0YScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRpb25pY0hpc3RvcnksIGxvY2FsU3RvcmFnZSwgc2Vzc2lvbkRhdGEpIHtcblxuICAgICAgICAkc2NvcGUubG9nZ2VkSW4gPSBzZXNzaW9uRGF0YTtcblxuICAgICAgICAvLyBDdXJyZW50IGhpc3Rvcnkgc3RhY2sgSWQuIFNlZSBhcmVhX2NvbnRyb2xsZXIgZm9yIHVzYWdlLlxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdob21lSGlzdG9yeUlkJywgJGlvbmljSGlzdG9yeS5jdXJyZW50SGlzdG9yeUlkKCkpO1xuXG4gICAgICAgICRzY29wZS5teUZ1bmMgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgIGlmKCRldmVudC5rZXlDb2RlID09IDEzICYmICEkZXZlbnQuc2hpZnRLZXkpIHsgLy9pZiBlbnRlci1rZXlcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5hcmVhcycsIHtzZWFyY2g6ICRldmVudC5zcmNFbGVtZW50LnZhbHVlfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0xlZ2FsQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgbG9jYWxTdG9yYWdlKSB7XG4gICAgJHNjb3BlLnRvcyA9IGxvY2FsU3RvcmFnZS5nZXQoJ3RvcycpO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIFtcblx0JyRzY29wZScsIFxuXHQnJHN0YXRlJywgXG5cdCdVcGRhdGUnLCBcblx0JyRpb25pY0xvYWRpbmcnLCBcblx0JyRpb25pY0hpc3RvcnknLCBcblx0JyRpb25pY1ZpZXdTd2l0Y2hlcicsIFxuXHRmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgVXBkYXRlLCAkaW9uaWNMb2FkaW5nLCAkaW9uaWNIaXN0b3J5LCAkaW9uaWNWaWV3U3dpdGNoZXIpIHtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBzaWduSW5cblx0ICAgICAqIFN1Ym1pdCBoYW5kbGVyIGZvciBsb2dpbiBmb3JtLiBWYWxpZGF0ZXMgbG9naW4gaW5wdXQuIFxuXHQgICAgICogTW92ZXMgdG8gaG9tZSB2aWV3IG9uIHN1Y2Nlc3NmdWwgbG9naW4uXG5cdCAgICAgKi9cblx0ICAgICRzY29wZS5zaWduSW4gPSBmdW5jdGlvbihsb2dpbkZvcm0pIHtcblx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblxuXHRcdFVwZGF0ZS51c2VyX2xvZ2luKGxvZ2luRm9ybS51c2VybmFtZS4kdmlld1ZhbHVlLCBsb2dpbkZvcm0ucGFzc3dvcmQuJHZpZXdWYWx1ZSlcblx0XHQgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0JGlvbmljTG9hZGluZy5oaWRlKCk7XG5cdFx0XHRsb2dpbkZvcm0uJHNldFZhbGlkaXR5KFwibG9naW5FcnJvclwiLCB0cnVlKTtcblx0XHRcdCRpb25pY1ZpZXdTd2l0Y2hlci5uZXh0RGlyZWN0aW9uKCdmb3J3YXJkJyk7XG5cdFx0XHQkc3RhdGUuZ28oJ2FwcC5ob21lJyk7XG5cdFx0ICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkaW9uaWNMb2FkaW5nLmhpZGUoKTtcblx0XHRcdGxvZ2luRm9ybS4kc2V0VmFsaWRpdHkoXCJsb2dpbkVycm9yXCIsIGZhbHNlKTtcblx0XHRcdCRzY29wZS5lcnJvciA9IGVycm9yLnJlc3BvbnNlO1xuXHRcdCAgICB9KTtcblx0ICAgIH07XG5cblx0ICAgIC8qKiBcblx0ICAgICAqIHNraXBcblx0ICAgICAqIFNraXBzIHRvIHRoZSBob21lIHZpZXcuIEZvcmNlcyBmb3J3YXJkIHRyYW5zaXRpb24gYW5kIHNldHMgaG9tZSBhcyByb290IHZpZXcuXG5cdCAgICAgKi9cblx0ICAgICRzY29wZS5za2lwID0gZnVuY3Rpb24oKSB7XG5cdFx0JGlvbmljVmlld1N3aXRjaGVyLm5leHREaXJlY3Rpb24oJ2ZvcndhcmQnKTtcblx0XHQkaW9uaWNIaXN0b3J5Lm5leHRWaWV3T3B0aW9ucyhcblx0XHQgICAge1xuXHRcdFx0ZGlzYWJsZUJhY2s6IHRydWUsXG5cdFx0XHRoaXN0b3J5Um9vdDogdHJ1ZVxuXHRcdCAgICB9KTtcblx0XHQkc3RhdGUuZ28oJ2FwcC5ob21lJyk7XG5cdCAgICB9O1xuXHR9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdNYXBDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICdsZWFmbGV0RGF0YScsXG4gICAgJyRpb25pY1BsYXRmb3JtJyxcbiAgICAnREInLFxuICAgICckY29yZG92YUdlb2xvY2F0aW9uJyxcbiAgICAnJGNvcmRvdmFEZXZpY2VPcmllbnRhdGlvbicsXG4gICAgJyR0aW1lb3V0JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsIGxlYWZsZXREYXRhLCAkaW9uaWNQbGF0Zm9ybSwgREIsICRjb3Jkb3ZhR2VvbG9jYXRpb24sICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24sICR0aW1lb3V0KSB7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTXlwb3Mob2JqKSB7XG4gICAgICAgICAgICAvKiBIYWNrZml4IHRvIG1ha2UgaXQgdXBkYXRlID0oICovXG4gICAgICAgICAgICBpZigkc2NvcGUubWFya2Vycy5teXBvczIpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUubWFya2Vycy5teXBvczIsIG9iaik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMubXlwb3MgPSAkc2NvcGUubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5tYXJrZXJzLm15cG9zMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLm1hcmtlcnMubXlwb3MsIG9iaik7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMubXlwb3MyID0gJHNjb3BlLm1hcmtlcnMubXlwb3M7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5tYXJrZXJzLm15cG9zO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XG4gICAgICAgICAgICBjZW50ZXI6IHtcbiAgICAgICAgICAgICAgICBsYXQ6IDYyLjAsXG4gICAgICAgICAgICAgICAgbG5nOiAxNS4wLFxuICAgICAgICAgICAgICAgIHpvb206IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBiYXNlbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIG91dGRvb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVXRvbWh1c2thcnRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4eXonLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3ttYXB0eXBlfS97en0ve3h9L3t5fUAyeC5wbmc/YWNjZXNzX3Rva2VuPXthcGlrZXl9JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHR5cGU6ICdtYXBib3gub3V0ZG9vcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaWtleTogJ3BrLmV5SjFJam9pYldGcGMzUm9ieUlzSW1FaU9pSTNVbXM1UjBJd0luMC5ET2hVODFjbEhMRWhUajgxRElPamRnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzYXRlbGxpdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTYXRlbGxpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAneHl6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2h0dHA6Ly9hcGkudGlsZXMubWFwYm94LmNvbS92NC97bWFwdHlwZX0ve3p9L3t4fS97eX1AMngucG5nP2FjY2Vzc190b2tlbj17YXBpa2V5fScsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXB0eXBlOiAnbWFwYm94LnNhdGVsbGl0ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpa2V5OiAncGsuZXlKMUlqb2liV0ZwYzNSb2J5SXNJbUVpT2lJM1VtczVSMEl3SW4wLkRPaFU4MWNsSExFaFRqODFESU9qZGcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpc2hhcmVhczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0Zpc2tlb21yw6VkZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21hcmtlcmNsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPblNlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbTogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua2VkTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgbXlwb3M6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiAwLFxuICAgICAgICAgICAgICAgICAgICBsbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgIGljb25BbmdsZTogMCxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2hpIScsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRjb3Jkb3ZhR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbih7XG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiAzMDAwXG4gICAgICAgICAgICB9KS50aGVuKG51bGwsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNeXBvcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHBvcy5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHBvcy5jb29yZHMubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKHtcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IDMwMDBcbiAgICAgICAgICAgIH0pLnRoZW4obnVsbCwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGhlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNeXBvcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5nbGU6IGhlYWRpbmcudHJ1ZUhlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgREIuc2VhcmNoKCcnKS50aGVuKGZ1bmN0aW9uKGFyZWFzKSB7XG4gICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXJlYXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGFyZWFzW2ldO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzWydhcmVhJyArIGldID0ge1xuICAgICAgICAgICAgICAgICAgICBsYXllcjogJ2Zpc2hhcmVhcycsXG4gICAgICAgICAgICAgICAgICAgIGxhdDogYS5sYXQsXG4gICAgICAgICAgICAgICAgICAgIGxuZzogYS5sbmcsXG4gICAgICAgICAgICAgICAgICAgIGdldE1lc3NhZ2VTY29wZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3X3Njb3BlID0gJHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19zY29wZS5hcmVhID0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdfc2NvcGU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8YSB1aS1zcmVmPVwiYXBwLmFyZWEoe2lkOiBhcmVhLklEIH0pXCI+e3thcmVhLnR9fTwvYT4nXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdNZW51Q3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJHN0YXRlJyxcbiAgICAnJGlvbmljVmlld1N3aXRjaGVyJyxcbiAgICAnJGlvbmljUG9wb3ZlcicsXG4gICAgJ3Nlc3Npb25EYXRhJyxcbiAgICAnVXBkYXRlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGlvbmljVmlld1N3aXRjaGVyLCAkaW9uaWNQb3BvdmVyLCBzZXNzaW9uRGF0YSwgVXBkYXRlKSB7XG5cbiAgICAgICAgJHNjb3BlLnNlc3Npb25EYXRhID0gc2Vzc2lvbkRhdGE7XG5cbiAgICAgICAgJGlvbmljUG9wb3Zlci5mcm9tVGVtcGxhdGVVcmwoJ2NvbXBvbmVudHMvbWVudS9wb3BvdmVyLmh0bWwnLCB7XG4gICAgICAgICAgICBzY29wZTogJHNjb3BlXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocG9wb3Zlcikge1xuICAgICAgICAgICAgJHNjb3BlLnBvcG92ZXIgPSBwb3BvdmVyO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUudXNlcmluZm8gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3BvdmVyLmhpZGUoKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwLnVzZXJpbmZvJyk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3BvdmVyLmhpZGUoKTtcbiAgICAgICAgICAgIFVwZGF0ZS51c2VyX2xvZ291dCgpO1xuXG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5sb2dpbicpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3BvdmVyLmhpZGUoKTtcbiAgICAgICAgICAgICRpb25pY1ZpZXdTd2l0Y2hlci5uZXh0RGlyZWN0aW9uKCdiYWNrJyk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5sb2dpbicpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUucmVnaXN0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3BvdmVyLmhpZGUoKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnYXBwLnJlZ2lzdGVyLmRldGFpbHMnKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuZm9yY2VkVXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVcGRhdGUuZm9yY2VkVXBkYXRlKCk7XG4gICAgICAgIH07XG5cbiAgICB9XG5dKTtcbiIsIlxuYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ1JlY292ZXJDdHJsJywgW1xuXHQnJHNjb3BlJyxcblx0JyRzdGF0ZScsXG5cdCckaW9uaWNIaXN0b3J5Jyxcblx0JyRpb25pY1BsYXRmb3JtJyxcblx0JyRpb25pY0xvYWRpbmcnLFxuXHQnJGNvcmRvdmFUb2FzdCcsXG5cdCdBUEknLFxuXHRmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGlvbmljSGlzdG9yeSwgJGlvbmljUGxhdGZvcm0sICRpb25pY0xvYWRpbmcsICRjb3Jkb3ZhVG9hc3QsIEFQSSkge1xuXHQgICAgJ3VzZSBzdHJpY3QnO1xuXG5cdCAgICBcblx0ICAgIHZhciB1c2VyID0gXCJcIjtcblx0ICAgIFxuXHQgICAgLyoqXG5cdCAgICAgKiBza2lwXG5cdCAgICAgKiBTdWJtaXQgaGFuZGxlciBmb3Igc2tpcCBidXR0b25cblx0ICAgICAqL1xuXHQgICAgJHNjb3BlLnNraXAgPSBmdW5jdGlvbigpIHtcblx0XHQkc2NvcGUuaW5mbyA9IFwiXCI7XG5cdFx0JHN0YXRlLmdvKCdeLnJlc2V0cGFzc3dvcmQnKTtcblx0ICAgIH07XG5cdCAgICBcblxuXHQgICAgLyoqXG5cdCAgICAgKiBsb3N0UGFzc3dvcmRcblx0ICAgICAqIFN1Ym1pdCBoYW5kbGVyIGZvciBmaXJzdCBmb3JtXG5cdCAgICAgKi9cblx0ICAgICRzY29wZS5sb3N0UGFzc3dvcmQgPSBmdW5jdGlvbihmb3JtKSB7XG5cblx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblx0XHRcblx0XHR1c2VyID0gZm9ybS51c2VyLiR2aWV3VmFsdWU7XG5cdFx0QVBJLnVzZXJfbG9zdF9wYXNzd29yZCh1c2VyKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcblx0XHRcdC8vIFNldCBpbmZvIG1lc3NhZ2UgZm9yIG5leHQgdmlld1xuXHRcdFx0JHNjb3BlLmluZm8gPSAnRW4gw6V0ZXJzdMOkbGxuaW5nc2tvZCBrb21tZXIgc2tpY2thcyB0aWxsIGRpZyBpbm9tIGtvcnQsIHZpYSAnO1x0XHRcdFxuXHRcdFx0aWYgKGRhdGEubWFpbGVkKSB7XG5cdFx0XHQgICAgJHNjb3BlLmluZm8gKz0gJ2UtbWFpbCc7XG5cdFx0XHQgICAgaWYgKGRhdGEudGV4dGVkKSB7XG5cdFx0XHRcdCRzY29wZS5pbmZvICs9ICcgb2NoICc7XG5cdFx0XHQgICAgfVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGEudGV4dGVkKSB7XG5cdFx0XHQgICAgJHNjb3BlLmluZm8gKz0gJ3Ntcyc7XG5cdFx0XHR9XG5cdFx0XHQkc2NvcGUuaW5mbyArPSAnLic7XG5cdFx0XG5cdFx0XHQkc3RhdGUuZ28oJ14ucmVzZXRwYXNzd29yZCcpO1xuXG5cdFx0ICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQvL1RvRG86IGhhbmRsZSB0aW1lb3V0P1xuXHRcdFx0Ly9Ub0RvOiBjaGVjayBlcnJvciBjb2Rlc1xuXHRcdFx0Zm9ybS51c2VyLiRzZXRWYWxpZGl0eSgnaW52YWxpZFVzZXInLCBmYWxzZSk7XG5cdFx0ICAgIH0pXG5cdFx0ICAgIC5maW5hbGx5KCRpb25pY0xvYWRpbmcuaGlkZSk7XG5cdCAgICB9O1xuXG5cblx0ICAgIC8qKlxuXHQgICAgICogcmVzZXRQYXNzd29yZFxuXHQgICAgICogU3VibWl0IGhhbmRsZXIgZm9yIHNlY29uZCBmb3JtXG5cdCAgICAgKlxuXHQgICAgICogVG9EbzogbG9nIGluIGltbWVkaWF0ZWx5P1xuXHQgICAgICovXG5cdCAgICAkc2NvcGUucmVzZXRQYXNzd29yZCA9IGZ1bmN0aW9uKGZvcm0pIHtcblx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblxuXHRcdEFQSS51c2VyX3Jlc2V0X3Bhc3N3b3JkKHVzZXIsIGZvcm0ucGFzc3dvcmQuJHZpZXdWYWx1ZSwgZm9ybS5jb2RlLiR2aWV3VmFsdWUpXG5cdFx0ICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0Ly8gU3VjY2VzcyB0b2FzdFxuXHRcdFx0JGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgJGNvcmRvdmFUb2FzdC5zaG93TG9uZ0JvdHRvbSgnRGl0dCBsw7ZzZW5vcmQgaGFyIMOkbmRyYXRzJyk7XG5cdFx0XHR9KTtcblx0XHRcdC8vIE5hdmlnYXRlIHRvIGN1cnJlbnQgaGlzdG9yeSByb290XG5cdFx0XHQkaW9uaWNIaXN0b3J5LmdvVG9IaXN0b3J5Um9vdCgkaW9uaWNIaXN0b3J5LmN1cnJlbnRWaWV3KCkuaGlzdG9yeUlkKTtcdFxuXHRcdCAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0Y29uc29sZS5sb2coZXJyb3IpO1xuXHRcdFx0Ly9Ub0RvOiBjaGVjayBlcnJvciBjb2RlXG5cdFx0XHQvLyA1OiBubyBzdWNoIHVzZXJcblx0XHRcdC8vIDEzOiBwYXNzd29yZCBsZW5ndGhcblx0XHRcdC8vIDE2OiBpbnZhbGlkL2V4cGlyZWQgcmVzZXQgY29kZVxuXHRcdCAgICB9KVxuXHRcdCAgICAuZmluYWxseSgkaW9uaWNMb2FkaW5nLmhpZGUpO1xuXHQgICAgfTtcblx0fV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckc3RhdGUnLFxuICAgICckaW9uaWNMb2FkaW5nJyxcbiAgICAnJGlvbmljTW9kYWwnLFxuICAgICckaW9uaWNTY3JvbGxEZWxlZ2F0ZScsXG4gICAgJ0FQSScsXG4gICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRpb25pY0xvYWRpbmcsICRpb25pY01vZGFsLCAkaW9uaWNTY3JvbGxEZWxlZ2F0ZSwgQVBJLCBsb2NhbFN0b3JhZ2UpIHtcblxuICAgICAgICB2YXIgdXNlcm5hbWU7XG5cbiAgICAgICAgLy8gTGl2ZSBjaGVjayBmb3IgdXNlcm5hbWUgYXZhaWxhYmlsaXR5XG4gICAgICAgICRzY29wZS5jaGVja1VzZXJuYW1lID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIEFQSS51c2VyX2V4aXN0cyhpbnB1dC4kdmlld1ZhbHVlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGlucHV0LiRzZXRWYWxpZGl0eSgnbmFtZVRha2VuJywgIWRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gTGl2ZSBjaGVjayBmb3IgZW1haWwgYXZhaWxhYmlsaXR5XG4gICAgICAgICRzY29wZS5jaGVja0VtYWlsID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgIEFQSS51c2VyX2V4aXN0cyhudWxsLCBpbnB1dC4kdmlld1ZhbHVlKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGlucHV0LiRzZXRWYWxpZGl0eSgnZW1haWxUYWtlbicsICFkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLy8gVmFsaWRhdGlvbiBlcnJvcnMgbm90IHRpZWQgdG8gaW5wdXQgZmllbGRcbiAgICAgICAgJHNjb3BlLmZvcm1FcnJvcnMgPSB7fTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogcmVnaXN0ZXJcbiAgICAgICAgICogU3VibWl0IGhhbmRsZXIgZm9yIHRoZSByZWdpc3RyYXRpb24gZm9ybVxuICAgICAgICAgKi9cbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgICAgIC8vIFNhdmUgcGhvbmUgbnVtYmVyIGZvciBuZXh0IHZpZXdcbiAgICAgICAgICAgICRzY29wZS5waG9uZSA9IGZvcm0ucGhvbmUuJHZpZXdWYWx1ZTtcblxuICAgICAgICAgICAgLy8gU2F2ZSB1c2VybmFtZSBmb3IgdmVyaWZ5IHN1Ym1pdCBoYW5kbGVyXG4gICAgICAgICAgICB1c2VybmFtZSA9IGZvcm0udXNlcm5hbWUuJHZpZXdWYWx1ZTtcblxuICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gZm9ybS5wYXNzd29yZC4kdmlld1ZhbHVlO1xuICAgICAgICAgICAgdmFyIGZ1bGxuYW1lID0gZm9ybS5mdWxsbmFtZS4kdmlld1ZhbHVlO1xuICAgICAgICAgICAgdmFyIGVtYWlsID0gZm9ybS5lbWFpbC4kdmlld1ZhbHVlO1xuXG4gICAgICAgICAgICBBUEkudXNlcl9yZWdpc3Rlcih1c2VybmFtZSwgZnVsbG5hbWUsIHBhc3N3b3JkLCBlbWFpbCwgJHNjb3BlLnBob25lKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3M6IEdvIHRvIHZlcmlmeSBhY2NvdW50IHZpZXdcbiAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ14udmVyaWZ5Jyk7XG5cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogRXJyb3I6IEluZm9ybSB0aGUgdXNlciBhYm91dCBmYWlsZWQgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgICAgICogU2VlIEFQSSBkb2N1bWVudGF0aW9uIGZvciBlcnJvciBjb2Rlc1xuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogVG9EbzogSGFuZGxlIHRpbWVvdXRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybUVycm9ycy5yZWdpc3RyYXRpb25FcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuc2Nyb2xsVG9wKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgLy8gSW52YWxpZCBFbWFpbFxuICAgICAgICAgICAgICAgIGlmIChlcnJvci5lcnJvcl9jb2RlID09IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5lbWFpbC4kc2V0VmFsaWRpdHkoJ2ludmFsaWRFbWFpbCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVXNlcm5hbWUgb3IgRW1haWwgYWxyZWFkeSByZWdpc3RlcmVkXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmVycm9yX2NvZGUgPT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tVc2VybmFtZShmb3JtLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrRW1haWwoZm9ybS5lbWFpbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEludmFsaWQgcGhvbmUgbnVtYmVyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yLmVycm9yX2NvZGUgPT0gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5waG9uZS4kc2V0VmFsaWRpdHkoJ2ludmFsaWRQaG9uZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHZlcmlmeVxuICAgICAgICAgKiBTdWJtaXQgaGFuZGxlciBmb3IgdGhlIHZlcmlmaWNhdGlvbiBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICAkc2NvcGUudmVyaWZ5ID0gZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgICAgIHZhciB2ZXJjb2RlID0gZm9ybS52ZXJjb2RlO1xuXG4gICAgICAgICAgICBBUEkudXNlcl9jb25maXJtKHVzZXJuYW1lLCB2ZXJjb2RlLiR2aWV3VmFsdWUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgdmVyY29kZS4kc2V0VmFsaWRpdHkoXCJ2ZXJpZmllZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5sb2dpbicpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB2ZXJjb2RlLiRzZXRWYWxpZGl0eShcInZlcmlmaWVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseSgkaW9uaWNMb2FkaW5nLmhpZGUoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnRvcyA9IGxvY2FsU3RvcmFnZS5nZXQoJ3RvcycpO1xuICAgICAgICAvL01vZGFsIHdpdGggdGhlIEVVTEFcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL3JlZ2lzdGVyL2V1bGEuaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgJHNjb3BlLmV1bGEgPSBtb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5zaG93RXVsYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLmV1bGEuc2hvdygpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuY2xvc2VFdWxhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXVsYS5oaWRlKCk7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuZXVsYS5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdUZWNobmlxdWVEZXRhaWxDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ0RCJywgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgREIsICRpb25pY1NsaWRlQm94RGVsZWdhdGUpIHtcbiAgICAkc2NvcGUuaW1hZ2VfZW5kcG9pbnQgPSAnaHR0cDovL3d3dy5pZmlza2Uuc2UnO1xuICAgICRzY29wZS50ZWNoID0gJHN0YXRlUGFyYW1zLnRlY2g7XG4gICAgJHNjb3BlLmltYWdlcyA9IFtdO1xuXG4gICAgaWYoISRzY29wZS50ZWNoKSB7XG4gICAgICAgIERCLmdldFRlY2huaXF1ZSgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5pbWFnZXMgPSBbZGF0YS5pbWcxLCBkYXRhLmltZzIsIGRhdGEuaW1nM10uZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEvXFwvJC8udGVzdChlbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS51cGRhdGUoKTtcbiAgICAgICAgICAgICRzY29wZS50ZWNoID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkc2NvcGUudGVjaDtcbiAgICAgICAgJHNjb3BlLmltYWdlcyA9IFtkYXRhLmltZzEsIGRhdGEuaW1nMiwgZGF0YS5pbWczXS5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAhL1xcLyQvLnRlc3QoZWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLnVwZGF0ZSgpO1xuICAgIH1cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1RlY2huaXF1ZXNDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgREIuZ2V0VGVjaG5pcXVlcygpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgJHNjb3BlLnRlY2huaXF1ZXMgPSBkYXRhO1xuICAgIH0pO1xuICAgICRzY29wZS5pbWFnZV9lbmRwb2ludCA9ICdodHRwOi8vd3d3LmlmaXNrZS5zZSc7XG4gICAgJHNjb3BlLnNvcnRvcmRlciA9ICdzbyc7XG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgREIuZ2V0VXNlckluZm8oKVxuICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgJHNjb3BlLnVzZXIgPSB1c2VyO1xuICAgIH0pO1xuICAgIERCLmdldFVzZXJOdW1iZXJzKClcbiAgICAudGhlbihmdW5jdGlvbihudW1iZXJzKSB7XG4gICAgICAgICRzY29wZS5udW1iZXJzID0gbnVtYmVycztcbiAgICB9KTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1VzZXJDYXJkc0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgJ0RCJyxcbiAgICAnVXBkYXRlJyxcbiAgICAnJGlvbmljTW9kYWwnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBEQiwgVXBkYXRlLCAkaW9uaWNNb2RhbCkge1xuICAgICAgICAkc2NvcGUucHJlZCA9ICctdG8nO1xuICAgICAgICAkc2NvcGUuZW5kcG9pbnQgPSAnaHR0cHM6Ly93d3cuaWZpc2tlLnNlJztcblxuICAgICAgICB2YXIgaW5pdGlsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUubm93ID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIERCLmdldFVzZXJQcm9kdWN0cygpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2R1Y3RzID0gZGF0YTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmJlZm9yZUVudGVyJywgaW5pdGlsaXplKTtcbiAgICAgICAgLy91c2UgdGhlIHNhbWUgbW9kYWwgYXMgaW4gYXJlYV9jYXJkc1xuICAgICAgICAkaW9uaWNNb2RhbC5mcm9tVGVtcGxhdGVVcmwoJ2NvbXBvbmVudHMvYXJlYV9jYXJkcy9ydWxlc19tb2RhbC5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbjogJ3NsaWRlLWluLXVwJ1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG1vZGFsKSB7XG4gICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwgPSBtb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5vcGVuUnVsZXNNb2RhbCA9IGZ1bmN0aW9uKHByb2R1Y3QpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcm9kdWN0KTtcbiAgICAgICAgICAgICRzY29wZS5wcm9kdWN0ID0gcHJvZHVjdDtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmNsb3NlUnVsZXNNb2RhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsLmhpZGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgVXBkYXRlLnVwZGF0ZSgpXG4gICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuJGJyb2FkY2FzdCgnc2Nyb2xsLnJlZnJlc2hDb21wbGV0ZScpO1xuICAgICAgICAgICAgICAgIGluaXRpbGl6ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXSk7XG4iLCIoZnVuY3Rpb24oYW5ndWxhciwgdW5kZWZpbmVkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5hcGknLCBbJ2lmaXNrZS51dGlscyddKVxuXHQucHJvdmlkZXIoJ0FQSScsIGZ1bmN0aW9uIEFQSVByb3ZpZGVyKCkge1xuXG4gICAgICAgICAgICB0aGlzLmJhc2VfdXJsID0gJ2h0dHBzOi8vd3d3LmlmaXNrZS5zZS9hcGkvdjIvYXBpLnBocCc7XG5cbiAgICAgICAgICAgIHRoaXMuJGdldCA9IFtcblx0XHQnJGh0dHAnLFxuXHRcdCdzZXNzaW9uRGF0YScsXG5cdFx0J2xvY2FsU3RvcmFnZScsXG5cdFx0JyRxJyxcblx0XHRmdW5jdGlvbigkaHR0cCwgc2Vzc2lvbkRhdGEsIGxvY2FsU3RvcmFnZSwgJHEpIHtcblx0XHQgICAgdmFyIGJhc2VfdXJsID0gdGhpcy5iYXNlX3VybDtcblxuXHRcdCAgICAvKipcblx0XHQgICAgICogIyBhcGlfY2FsbCAjXG5cdFx0ICAgICAqIGhhbmRsZXMgaHR0cCByZXF1ZXN0c1xuXHRcdCAgICAgKiByZXR1cm5zIGEgJGh0dHAgb2JqZWN0IGZvciB0aGUgcmVxdWVzdGVkIGFwaSBjYWxsXG5cdFx0ICAgICAqL1xuXHRcdCAgICB2YXIgYXBpX2NhbGwgPSBmdW5jdGlvbihwYXJhbXMsIGNhY2hlKSB7XG5cdFx0XHRyZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG5cdFx0XHQgICAgJGh0dHAoXG5cdFx0XHRcdHtcblx0XHRcdFx0ICAgIG1ldGhvZDonZ2V0Jyxcblx0XHRcdFx0ICAgIHVybDogYmFzZV91cmwsXG5cdFx0XHRcdCAgICBwYXJhbXM6IGFuZ3VsYXIuZXh0ZW5kKHBhcmFtcywgeydrZXknOiAnMDEyMzQ1Njc4OWFiY2RlZid9KSxcblx0XHRcdFx0ICAgIHRpbWVvdXQ6IDUwMDAsXG5cdFx0XHRcdCAgICBjYWNoZTogKGNhY2hlICE9PSBmYWxzZSlcblx0XHRcdFx0fVxuXHRcdFx0ICAgIClcblx0XHRcdCAgICAvLyBUb0RvOiBQcm9wZXIgbG9nZ2luZ1xuXHRcdFx0XHQuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdCAgICBpZihkYXRhLnN0YXR1cyA9PT0gJ2Vycm9yJykge1xuXHRcdFx0XHRcdHJlamVjdChkYXRhLm1lc3NhZ2UpO1xuXHRcdFx0XHQgICAgfSBlbHNlIHtcblx0XHRcdFx0XHRpZihkYXRhLmRhdGEpIHtcblx0XHRcdFx0XHQgICAgZnVsZmlsbChkYXRhLmRhdGEucmVzcG9uc2UpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ICAgIHJlamVjdChkYXRhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCAgICB9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgc3RhdHVzVGV4dCkge1xuXHRcdFx0XHQgICAgaWYgKHN0YXR1cyA9PT0gMCkge1xuXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoJ1JlcXVlc3QgdGltZW91dCcpKTtcblx0XHRcdFx0ICAgIH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVqZWN0KGRhdGEpO1xuXHRcdFx0XHQgICAgfVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdCAgICB9O1xuXG5cdFx0ICAgIC8qKlxuXHRcdCAgICAgKiAjIHNlc3Npb25fYXBpX2NhbGwgI1xuXHRcdCAgICAgKiB3cmFwcGVyIGZvciBhcGlfY2FsbCAtIGluc2VydHMgdGhlIHNlc3Npb24gdG9rZW4gaW50byBwYXJhbXNcblx0XHQgICAgICovXG5cdFx0ICAgIHZhciBzZXNzaW9uX2FwaV9jYWxsID0gZnVuY3Rpb24ocGFyYW1zLCBjYWNoZSkge1xuXHRcdFx0dmFyIHNlc3Npb24gPSBzZXNzaW9uRGF0YS50b2tlbjtcblx0XHRcdHJldHVybiBhcGlfY2FsbChhbmd1bGFyLmV4dGVuZChwYXJhbXMsIHtzOiBzZXNzaW9ufSksIGNhY2hlKTtcblx0XHQgICAgfTtcblxuXHRcdCAgICByZXR1cm4ge1xuXHRcdFx0Z2V0X211bmljaXBhbGl0aWVzOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfbXVuaWNpcGFsaXRpZXMnfSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2NvdW50aWVzOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfY291bnRpZXMnfSk7XG5cdFx0XHR9LFxuXHRcdFx0dXNlcl9leGlzdHM6IGZ1bmN0aW9uKHVzZXJuYW1lLCBlbWFpbCkge1xuXHRcdFx0ICAgIHZhciBhcmdzID0ge206ICd1c2VyX2V4aXN0cyd9O1xuXG5cdFx0XHQgICAgaWYgKHVzZXJuYW1lICYmIHR5cGVvZiB1c2VybmFtZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0YXJncy51c2VybmFtZSA9IHVzZXJuYW1lO1xuXHRcdFx0ICAgIH1cblx0XHRcdCAgICBpZiAoZW1haWwgJiYgdHlwZW9mIGVtYWlsID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRhcmdzLmVtYWlsID0gZW1haWw7XG5cdFx0XHQgICAgfVxuXG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKGFyZ3MsIGZhbHNlKTtcblx0XHRcdH0sXG5cdFx0XHR1c2VyX3JlZ2lzdGVyOiBmdW5jdGlvbih1c2VybmFtZSwgZnVsbG5hbWUsIHBhc3N3b3JkLCBlbWFpbCwgcGhvbmUpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ3VzZXJfcmVnaXN0ZXInLFxuXHRcdFx0XHQgIHVzZXJuYW1lOiB1c2VybmFtZSxcblx0XHRcdFx0ICBmdWxsbmFtZTogZnVsbG5hbWUsXG5cdFx0XHRcdCAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuXHRcdFx0XHQgIGVtYWlsOiBlbWFpbCxcblx0XHRcdFx0ICBwaG9uZTogcGhvbmVcblx0XHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0fSxcblx0XHRcdHVzZXJfY29uZmlybTogZnVuY3Rpb24odXNlcm5hbWUsIHBpbikge1xuXHRcdFx0ICAgIHJldHVybiBhcGlfY2FsbCh7XG5cdFx0XHRcdG06ICd1c2VyX2NvbmZpcm0nLFxuXHRcdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsXG5cdFx0XHRcdHBpbjogcGluXG5cdFx0XHQgICAgfSwgZmFsc2UpO1xuXHRcdFx0fSxcblx0XHRcdHVzZXJfaW5mbzogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIHNlc3Npb25fYXBpX2NhbGwoe206ICd1c2VyX2luZm8nfSk7XG5cdFx0XHR9LFxuXHRcdFx0dXNlcl9sb3N0X3Bhc3N3b3JkOiBmdW5jdGlvbih1c2VyKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKFxuXHRcdFx0XHR7IG06ICd1c2VyX2xvc3RfcGFzc3dvcmQnLFxuXHRcdFx0XHQgIHVzZXJfaWRlbnRpZmljYXRpb246IHVzZXJcblx0XHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0fSxcblx0XHRcdHVzZXJfcmVzZXRfcGFzc3dvcmQ6IGZ1bmN0aW9uKHVzZXJfaWRlbnRpZmljYXRpb24sIHBhc3N3b3JkLCBjb2RlKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHtcblx0XHRcdFx0bTogJ3VzZXJfcmVzZXRfcGFzc3dvcmQnLFxuXHRcdFx0XHR1c2VyX2lkZW50aWZpY2F0aW9uOiB1c2VyX2lkZW50aWZpY2F0aW9uLFxuXHRcdFx0XHRwYXNzd29yZDogcGFzc3dvcmQsXG5cdFx0XHRcdGNvZGU6IGNvZGVcblx0XHRcdCAgICB9LCBmYWxzZSk7XG5cdFx0XHR9LFxuXHRcdFx0dXNlcl9jaGFuZ2VfcGFzc3dvcmQ6IGZ1bmN0aW9uKG9sZF9wYXNzd29yZCwgbmV3X3Bhc3N3b3JkKSB7XG5cdFx0XHQgICAgcmV0dXJuIHNlc3Npb25fYXBpX2NhbGwoe1xuXHRcdFx0XHRtOiAndXNlcl9jaGFuZ2VfcGFzc3dvcmQnLFxuXHRcdFx0XHRvbGRfcGFzc3dvcmQ6IG9sZF9wYXNzd29yZCxcblx0XHRcdFx0bmV3X3Bhc3N3b3JkOiBuZXdfcGFzc3dvcmRcblx0XHRcdCAgICB9LCBmYWxzZSk7XG5cdFx0XHR9LFxuXHRcdFx0dXNlcl9sb2dpbjogZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKFxuXHRcdFx0XHR7IG06ICd1c2VyX2xvZ2luJyxcblx0XHRcdFx0ICB1c2VybmFtZTogdXNlcm5hbWUsXG5cdFx0XHRcdCAgcGFzc3dvcmQ6IHBhc3N3b3JkXG5cdFx0XHRcdH0sIGZhbHNlKVxuXHRcdFx0XHQudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdCAgICBzZXNzaW9uRGF0YS5zZXRUb2tlbihkYXRhKTtcblxuXHRcdFx0XHQgICAgLy9uZWVkZWQgZm9yIGNoYWluaW5nIG9mIHByb21pc2VzLCBzaG91bGQgYmUgZG9uZSBzb21lIG90aGVyIHdheSBwZXJoYXBzP1xuXHRcdFx0XHQgICAgcmV0dXJuIGRhdGE7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdHVzZXJfbG9nb3V0OiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICBzZXNzaW9uX2FwaV9jYWxsKHttOiAndXNlcl9sb2dvdXQnfSwgZmFsc2UpXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0ICAgIHNlc3Npb25EYXRhLmRlbGV0ZVRva2VuKCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdHVzZXJfcHJvZHVjdHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ICAgIHJldHVybiBzZXNzaW9uX2FwaV9jYWxsKHttOiAndXNlcl9wcm9kdWN0cyd9LCBmYWxzZSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2Zpc2hlczogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X2Zpc2hlcyd9KTtcblx0XHRcdH0sXG5cdFx0XHRnZXRfdGVjaG5pcXVlczogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X3RlY2huaXF1ZXMnfSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2JhaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfYmFpdHMnfSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X29yZ2FuaXphdGlvbnM6IGZ1bmN0aW9uKG9yZ2lkKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKFxuXHRcdFx0XHR7IG06ICdnZXRfb3JnYW5pemF0aW9ucycsXG5cdFx0XHRcdCAgb3JnaWQ6IG9yZ2lkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGdldF9vcmdfbW9kaWZpZWQ6IGZ1bmN0aW9uKG9yZ2lkKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKFxuXHRcdFx0XHR7IG06ICdnZXRfb3JnX21vZGlmaWVkJyxcblx0XHRcdFx0ICBvcmdpZDogb3JnaWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2FyZWFzOiBmdW5jdGlvbihhcmVhaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9hcmVhcycsXG5cdFx0XHRcdCAgYXJlYWlkOiBhcmVhaWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2FyZWFzX21vZGlmaWVkOiBmdW5jdGlvbihhcmVhaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9hcmVhc19tb2RpZmllZCcsXG5cdFx0XHRcdCAgYXJlYWlkOiBhcmVhaWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X3Byb2R1Y3RzOiBmdW5jdGlvbihhcmVhaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9wcm9kdWN0cycsXG5cdFx0XHRcdCAgYXJlYWlkOiBhcmVhaWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X3J1bGVzOiBmdW5jdGlvbihydWxlaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9ydWxlcycsXG5cdFx0XHRcdCAgcnVsZWlkOiBydWxlaWRcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X3Bob3RvczogZnVuY3Rpb24ob3JnaWQsIGFyZWFpZCkge1xuXHRcdFx0ICAgIHJldHVybiBhcGlfY2FsbChcblx0XHRcdFx0eyBtOiAnZ2V0X3Bob3RvcycsXG5cdFx0XHRcdCAgb3JnaWQ6IG9yZ2lkLFxuXHRcdFx0XHQgIGFyZWFpZDogYXJlYWlkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGdldF9tYXBfcG9pczogZnVuY3Rpb24ob3JnaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9tYXBfcG9pcycsXG5cdFx0XHRcdCAgb3JnaWQ6IG9yZ2lkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSxcblx0XHRcdGdldF9tYXBfcG9pX3R5cGVzIDogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X21hcF9wb2lfdHlwZXMnfSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X21hcF9wb2x5Z29uczogZnVuY3Rpb24ob3JnaWQpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoXG5cdFx0XHRcdHsgbTogJ2dldF9tYXBfcG9seWdvbnMnLFxuXHRcdFx0XHQgIG9yZ2lkOiBvcmdpZFxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHR1c2VyX2dldF9mYXZvcml0ZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ICAgIHJldHVybiBzZXNzaW9uX2FwaV9jYWxsKHttOiAndXNlcl9nZXRfZmF2b3JpdGVzJ30sIGZhbHNlKTtcblx0XHRcdH0sXG5cdFx0XHRnZXRfdGVybXNfb2Zfc2VydmljZTogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X3Rlcm1zX29mX3NlcnZpY2UnfSk7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0X2NvbnRhY3RfaW5mbzogZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X2NvbnRhY3RfaW5mbyd9KTtcblx0XHRcdH0sXG5cdFx0XHRnZXRfZW5naW5lX3BvbGljaWVzOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfZW5naW5lX3BvbGljaWVzJ30pO1xuXHRcdFx0fSxcblx0XHRcdGdldF9zbXNfdGVybXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0ICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9zbXNfdGVybXMnfSk7XG5cdFx0XHR9XG5cdFx0ICAgIH07XG5cdFx0fV07XG5cdH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdpZmlza2UuZGInLCBbXSlcbiAgICAucHJvdmlkZXIoJ0RCJywgZnVuY3Rpb24gREJQcm92aWRlcigpIHtcblxuICAgICAgICB0aGlzLiRnZXQgPSBbXG4gICAgICAgICAgICAnJGNvcmRvdmFTUUxpdGUnLFxuICAgICAgICAgICAgJ0FQSScsXG4gICAgICAgICAgICAnJHEnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJGNvcmRvdmFTUUxpdGUsIEFQSSwgJHEpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkYjtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LnNxbGl0ZVBsdWdpbikge1xuICAgICAgICAgICAgICAgICAgICBkYiA9ICRjb3Jkb3ZhU1FMaXRlLm9wZW5EQignZmlza2ViYXNlbi5kYicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm9wZW5EYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgICAgICBkYiA9IHdpbmRvdy5vcGVuRGF0YWJhc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlza2ViYXNlbi5kYicsICcxLjAnLCAnZmlza2ViYXNlbicsIDEwICogMTAyNCAqIDEwMjQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOb3Qgc3VwcG9ydGVkIG9uIHRoaXMgZGV2aWNlLCBzb3JyeScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0YWJsZURlZiA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ0FyZWEnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydvcmdpZCcsICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydrdycsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ25vdGUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYzEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2MyJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjMycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbTEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ20yJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtMycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbGF0JywgICAncmVhbCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydsbmcnLCAgICdyZWFsJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3pvb20nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncG50JywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NhcicsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydlbmcnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaGNwJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21hcCcsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnd3NjJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkJywgICAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ0FyZWFfRmlzaCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydhaWQnLCAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZmlkJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2Ftb3VudCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjb21tZW50JywgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1Byb2R1Y3QnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndDInLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbm8nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW0nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncGYnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYWknLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydyaScsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NoJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncHJpY2UnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3NvJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaGwnLCAgICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnQ291bnR5JzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzJywgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdNdW5pY2lwYWxpdHknOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjSUQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbmFtZScsICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdGaXNoJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzbycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbWF4JywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ljb24nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW1nJywgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpbicsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2dlbycsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc2l6ZScsICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydsYXQnLCAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3JlYycsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnUnVsZSc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndmVyJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdVc2VyX1Byb2R1Y3QnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYXQnLCAgICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjb2RlJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ZyJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZnVsbG5hbWUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3QnLCAgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncmVmMScsICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydyZWYyJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3RvJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncGlkJywgICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydwZGYnLCAgICAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdVc2VyX0luZm8nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndXNlcm5hbWUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbG9nZ2VkaW4nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSVAxJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSVAyJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbmFtZScsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZW1haWwnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY3JlYXRlZCcsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnVXNlcl9OdW1iZXInOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ251bWJlcicsICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1RlY2huaXF1ZSc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzbycsICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZGUnLCAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkYScsICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ljb24nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW1nMScsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpbWcyJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ltZzMnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsneW91dHViZScsICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdPcmdhbml6YXRpb24nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY3AnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndXJsJywgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY28nLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ZhdCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZHAnLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydmdmEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ29yZycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbWwnLCAgICAgJ2ludCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdQb2knOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3JnaWQnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0eXBlJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ByaWNlJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbGEnLCAgICAgJ3JlYWwnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbG8nLCAgICAgJ3JlYWwnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnUG9pX1R5cGUnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaWNvbicsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1BvbHlnb24nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3JnaWQnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0JywgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjJywgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd2ZXInLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncG9seScsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdXG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZU9iamVjdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHZhbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEucm93cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsLnB1c2goZGF0YS5yb3dzLml0ZW0oaSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR2YWw7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVGFibGU6IGZ1bmN0aW9uKHRhYmxlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24odHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnREVMRVRFIEZST00gJyArIHRhYmxlICsgJzsnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpZCBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2luZ2xlRGF0YSA9IGRhdGFbaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc2VydERhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGVEZWZbdGFibGVdLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0RGF0YS5wdXNoKHNpbmdsZURhdGFbdGFibGVEZWZbdGFibGVdW2ldWzBdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0lOU0VSVCBJTlRPJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVkFMVUVTKD8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsPycucmVwZWF0KGluc2VydERhdGEubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbChxdWVyeSwgaW5zZXJ0RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgY2xlYW5UYWJsZTogZnVuY3Rpb24odGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi50cmFuc2FjdGlvbihmdW5jdGlvbih0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eC5leGVjdXRlU3FsKCdERUxFVEUgRlJPTSAnICsgdGFibGUgKyAnOycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIERyb3BzIGFsbCB0YWJsZXMgaW4gdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgY2xlYW5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi50cmFuc2FjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRhYmxlIGluIHRhYmxlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnRFJPUCBUQUJMRSBJRiBFWElTVFMgJyArIHRhYmxlICsgJzsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVtb3ZlZCBhbGwgdGFibGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSW5pdGlhbGllcyB0aGUgdGFibGVzIGluIHRoZSBkYXRhYmFzZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGluaXRcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgaW4gdGFibGVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IHRhYmxlRGVmW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlVmFsdWVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBCdWlsZHMgYSBzdHJpbmcgd2l0aCBcIlwiIGFyb3VuZCBhbGwgbmFtZXMsIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGl0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBhbiBTUUwgVGFibGUgd2l0b3V0IGhhdmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogdG8gd29ycnkgYWJvdXQgdXNpbmcgcmVzZXJ2ZWQga2V5d29yZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcy5wdXNoKCdcIicgKyB0YWJsZVtpXVswXSArICdcIiAnICsgdGFibGVbaV1bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMgPSB0YWJsZVZhbHVlcy5qb2luKCcsICcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCBQUklNQVJZIEtFWSgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIicgKyB0YWJsZVswXVswXSArICdcIicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJykpOydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbChxdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG5cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCBhbiBhcmVhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgZ2V0QXJlYVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGlkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRBcmVhOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gQXJlYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBpZCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFtpZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gY3JlYXRlT2JqZWN0KGFyZWEpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IERCIHNob3VsZCBub3QgbmVlZCBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9waG90b3Mob2JqZWN0Lm9yZ2lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpbWFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5pbWFnZXMgPSBpbWFnZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRBcmVhRmlzaGVzOiBmdW5jdGlvbihhaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIEFyZWFfRmlzaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIEZpc2ggT04gQXJlYV9GaXNoLmZpZCA9IEZpc2guSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgQXJlYV9GaXNoLmFpZCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFthaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogU2VhcmNoZXMgdGhlIGRhdGFiYXNlIHVzaW5nIGEgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogVGhlIHF1ZXJ5IGlzIG1hdGNoZWQgdG8gYSBuYW1lIGFuZC9vciBrZXl3b3JkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgc2VhcmNoXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoc3RyaW5nLCBjb3VudHlfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIEFyZWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgdCBMSUtFID8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY291bnR5X2lkID8gJ0FORCBjMSA9ID8nIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1JERVIgQlkgdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHlfaWQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJyUnICsgc2VhcmNoc3RyaW5nICsgJyUnLCBjb3VudHlfaWRdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyclJyArIHNlYXJjaHN0cmluZyArICclJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGdldFByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBwcm9kdWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRQcm9kdWN0OiBmdW5jdGlvbihwcm9kdWN0X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIERJU1RJTkNUIFByb2R1Y3QuKiwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS50IGFzIHJ1bGVfdCwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS52ZXIgYXMgcnVsZV92ZXIsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUuZCBhcyBydWxlX2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQcm9kdWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0pPSU4gUnVsZSBPTiBSdWxlLklEID0gUHJvZHVjdC5yaScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBJRCA9ID8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1JERVIgQlkgc28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3Byb2R1Y3RfaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0cyBhbGwgcHJvZHVjdHMgZnJvbSBhbiBhcmVhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgZ2V0UHJvZHVjdHNCeUFyZWFcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBhcmVhX2lkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRQcm9kdWN0c0J5QXJlYTogZnVuY3Rpb24oYXJlYV9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCBESVNUSU5DVCBQcm9kdWN0LiosJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudCBhcyBydWxlX3QsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudmVyIGFzIHJ1bGVfdmVyLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLmQgYXMgcnVsZV9kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIFJ1bGUgT04gUnVsZS5JRCA9IFByb2R1Y3QucmknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgYWkgPSA/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09SREVSIEJZIHNvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthcmVhX2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCBESVNUSU5DVCBDb3VudHkuKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIENvdW50eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIEFyZWEgT04gQXJlYS5jMSA9IENvdW50eS5JRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPUkRFUiBCWSBDb3VudHkudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlclByb2R1Y3RzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgVXNlcl9Qcm9kdWN0LiosJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudCBhcyBydWxlX3QsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudmVyIGFzIHJ1bGVfdmVyLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLmQgYXMgcnVsZV9kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9Qcm9kdWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xFRlQgSk9JTiBQcm9kdWN0IE9OIFByb2R1Y3QuSUQgPSBVc2VyX1Byb2R1Y3QucGlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xFRlQgSk9JTiBSdWxlIE9OIFJ1bGUuSUQgPSBQcm9kdWN0LnJpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRGaXNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqIEZST00gRmlzaCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RmlzaDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIEZpc2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgaWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRUZWNobmlxdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIFRlY2huaXF1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFRlY2huaXF1ZTogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIFRlY2huaXF1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBJRCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFtpZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRPcmdhbml6YXRpb246IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUICogRlJPTSBPcmdhbml6YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgSUQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlckluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9JbmZvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QodXNlcilbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlck51bWJlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9OdW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBvaXM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgb3JnaWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRQb2lUeXBlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2lfVHlwZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9seWdvbnM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2x5Z29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIG9yZ2lkID0gPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5maWx0ZXJzJywgW10pXG4uZmlsdGVyKCdvbmVicicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKDxicj5cXHMqKSsvZywgJzxicj4nKTtcbiAgICB9O1xufSlcbi5maWx0ZXIoJ25vYnJzJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oPGJyKFxccypcXC8pKj4pKy9nLCAnJyk7XG4gICAgfTtcbn0pXG4uZmlsdGVyKCdjbGVhbnRhYmxlcycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyg8XFwvP3RhYmxlPikrL2csICcnKTtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC8oPFxcLz90cj4pKy9nLCAnJyk7XG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvKDxcXC8/dGg+KSsvZywgJycpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyg8KFxcLz8pdGQuKj8+KSs/L2csICc8JDJwPicpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLzxwPlxccyo8XFwvcD4vZywgJycpO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfTtcbn0pO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdpZmlza2UudXBkYXRlJywgWydpZmlza2UuYXBpJywgJ2lmaXNrZS5kYicsICdpZmlza2UudXRpbHMnXSlcbiAgICAucHJvdmlkZXIoJ1VwZGF0ZScsIGZ1bmN0aW9uIFVwZGF0ZVByb3ZpZGVyKCkge1xuXG4gICAgICAgIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICdBUEknLFxuICAgICAgICAgICAgJ0RCJyxcbiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgICckaW9uaWNMb2FkaW5nJyxcbiAgICAgICAgICAgICdzZXNzaW9uRGF0YScsXG4gICAgICAgICAgICBmdW5jdGlvbihBUEksIERCLCBsb2NhbFN0b3JhZ2UsICRxLCAkaW9uaWNMb2FkaW5nLCBzZXNzaW9uRGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIExBU1RfVVBEQVRFID0gJ2xhc3RfdXBkYXRlJztcblxuICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfYXJlYXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXNoQXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpc2hlcyA9IGRhdGFba2V5XS5maXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaXNoS2V5IGluIGZpc2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlzaEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSUQnOiBrZXkgKyAnXycgKyBmaXNoS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogZmlzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZpc2hlc1tmaXNoS2V5XVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBmaXNoZXNbZmlzaEtleV1bMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQi5wb3B1bGF0ZVRhYmxlKCdBcmVhJywgZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ0FyZWFfRmlzaCcsIGZpc2hBcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBBcmVhJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9wcm9kdWN0cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1Byb2R1Y3QnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFByb2R1Y3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2NvdW50aWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnQ291bnR5JywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBDb3VudHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X211bmljaXBhbGl0aWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnTXVuaWNpcGFsaXR5JywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBNdW5pY2lwYWxpdHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2Zpc2hlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ0Zpc2gnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIEZpc2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X3J1bGVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnUnVsZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgUnVsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfdGVjaG5pcXVlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1RlY2huaXF1ZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVGVjaG5pcXVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9vcmdhbml6YXRpb25zKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnT3JnYW5pemF0aW9uJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBPcmdhbml6YXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2lzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnUG9pJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBQb2knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2lfdHlwZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdQb2lfVHlwZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgUG9pX1R5cGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2x5Z29ucygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1BvbHlnb24nLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFBvbHlnb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZVVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkudXNlcl9wcm9kdWN0cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfUHJvZHVjdCcsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVXNlcl9Qcm9kdWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLnVzZXJfaW5mbygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlcnMgPSBkYXRhLm51bWJlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bUFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1BcnIucHVzaCh7J251bWJlcic6IG51bWJlcnNbaV19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfSW5mbycsIFtkYXRhXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFVzZXJfSW5mbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfTnVtYmVyJywgbnVtQXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVXNlcl9OdW1iZXJzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsZWFuVXNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIERCLmNsZWFuVGFibGUoJ1VzZXJfUHJvZHVjdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgREIuY2xlYW5UYWJsZSgnVXNlcl9OdW1iZXInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIERCLmNsZWFuVGFibGUoJ1VzZXJfSW5mbycpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbW92ZWQgdXNlciBpbmZvIGZyb20gZGF0YWJhc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHJlbW92ZSB1c2VyIGRhdGEgZnJvbSBkYXRhYmFzZSEnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbihmb3JjZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFVwZGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm9yY2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VXBkYXRlID0gbG9jYWxTdG9yYWdlLmdldChMQVNUX1VQREFURSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYVdlZWsgPSAxMDAwICogMzYwMCAqIDI0ICogNztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdFVwZGF0ZSA+IGFXZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsYXN0VXBkYXRlLCBjdXJyZW50VGltZSwgZm9yY2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLmluaXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6ZWQgREIgc3lzdGVtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uRGF0YS50b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGVVc2VyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdWxhdGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9wdWxhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBhbGwgdGhlIHRoaW5ncycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KExBU1RfVVBEQVRFLCBjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLmVycm9yX2NvZGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF1dGhlbnRpY2F0aW9uIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFNob3cgdG8gdXNlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW5Vc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkudXNlcl9sb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdHb3QgYW4gZXJyb3IsIHdpbGwgdHJ5IHRvIHJlY3JlYXRlIGFsbCB0YWJsZXM6JywgZXJyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLmNsZWFuKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9wdWxhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgYWxsIHRoZSB0aGluZ3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KExBU1RfVVBEQVRFLCBjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3RpbGwgZXJyb3IsIGhhbmRsZSBpdCEnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X3Rlcm1zX29mX3NlcnZpY2UoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldCgndG9zJywgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9zbXNfdGVybXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHRlcm1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXQoJ3Ntc190ZXJtcycsIHRlcm1zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2NvbnRhY3RfaW5mbygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdjb250YWN0SW5mbycsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIuaW5pdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6ZWQgREIgc3lzdGVtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVXNlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnIoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdub191cGRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLndoZW4oJ05vIHVwZGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRnVuYygpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlZFVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlRnVuYyh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICB1c2VyX2xvZ291dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhblVzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBUEkudXNlcl9sb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9sb2dpbjogZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQVBJLnVzZXJfbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnVuYygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0KExBU1RfVVBEQVRFKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UudXRpbHMnLCBbXSlcblxuLmZhY3RvcnkoJ2xvY2FsU3RvcmFnZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKVxuLnNlcnZpY2UoJ3Nlc3Npb25EYXRhJywgWydsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbihsb2NhbFN0b3JhZ2UpIHtcbiAgICB0aGlzLnRva2VuID0gbG9jYWxTdG9yYWdlLmdldCgnc2Vzc2lvbicpO1xuXG4gICAgdGhpcy5zZXRUb2tlbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldCgnc2Vzc2lvbicsIHQpO1xuICAgICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuIHNldCcpO1xuICAgIH07XG4gICAgdGhpcy5kZWxldGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlKCdzZXNzaW9uJyk7XG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xuICAgICAgICBjb25zb2xlLmxvZygndG9rZW4gdW5zZXQnKTtcbiAgICB9O1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ25nQ29yZG92YVNtcycsIFtdKVxuLmRpcmVjdGl2ZSgnbmdDb3Jkb3ZhU21zJywgWyckY29yZG92YVNtcycsICckaW9uaWNQb3B1cCcsIGZ1bmN0aW9uKCRjb3Jkb3ZhU21zLCAkaW9uaWNQb3B1cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycykge1xuICAgICAgICAgICAgZWwub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkaW9uaWNQb3B1cC5wcm9tcHQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1Nrcml2IGluIGRpdHQgbmFtbicsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0VHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ0ZJU0tBICcgKyBhdHRycy5uZ0NvcmRvdmFTbXMgKyAnICcgKyBuYW1lO1xuICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNtcy5zZW5kKCc3MjQ1NicsIG1lc3NhZ2UsICdJTlRFTlQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWNjdWVzcycpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5kaXJlY3RpdmVzJylcbiAgICAuZGlyZWN0aXZlKCdpZmlza2VJbnB1dCcsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgcmVzdHJpY3Q6ICdFJyxcblx0ICAgIHRyYW5zY2x1ZGU6IHRydWUsXG5cblx0ICAgIHNjb3BlOiB7XG5cdFx0bmFtZTogJ0AnLFxuXHRcdGlkOiAnQCcsXG5cdFx0bGFiZWw6ICdAJyxcblx0XHRwbGFjZWhvbGRlcjogJ0AnLFxuXHRcdHR5cGU6ICdAJyxcblx0XHRuZ1BhdHRlcm46ICdAJyxcblx0XHRuZ01vZGVsOiAnPT8nXG5cblx0ICAgIH0sXG5cdCAgICB0ZW1wbGF0ZVVybDogJ2RpcmVjdGl2ZXMvaW5wdXRfZmllbGQvaWZpc2tlX2lucHV0Lmh0bWwnLFxuXHQgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKSB7XG5cdFx0JHNjb3BlLmlkID0gJHNjb3BlLmlkIHx8ICRzY29wZS5uYW1lO1xuXHRcdCRzY29wZS50eXBlID0gJHNjb3BlLnR5cGUgfHwgJ3RleHQnO1xuXHQgICAgfVxuXHR9XG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdzeXN0ZW1Ccm93c2VyJywgW10pXG4uZGlyZWN0aXZlKCdzeXN0ZW1Ccm93c2VyJywgWyckY29yZG92YUluQXBwQnJvd3NlcicsIGZ1bmN0aW9uKCRjb3Jkb3ZhSW5BcHBCcm93c2VyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgJGNvcmRvdmFJbkFwcEJyb3dzZXIub3BlbihlbFswXS5ocmVmLCAnX3N5c3RlbScpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKVxuLmRpcmVjdGl2ZSgnZ2xvYmFsU3lzdGVtQnJvd3NlcicsIFsnJGNvcmRvdmFJbkFwcEJyb3dzZXInLCBmdW5jdGlvbigkY29yZG92YUluQXBwQnJvd3Nlcikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycykge1xuICAgICAgICAgICAgZWwub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5ocmVmICYmIGUudGFyZ2V0Lmhvc3QgIT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhSW5BcHBCcm93c2VyLm9wZW4oZS50YXJnZXQuaHJlZiwgJ19zeXN0ZW0nKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==