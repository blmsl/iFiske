angular.module("ifiske",["ionic","ifiske.controllers","ifiske.directives","ifiske.api","ifiske.db","ifiske.utils","ifiske.update","ifiske.filters","ionic.ion.headerShrink","ngCordova","systemBrowser","ngCordovaSms","ngMessages","ImgCache","leaflet-directive","tabSlideBox"]).constant("$ionicLoadingConfig",{template:"<ion-spinner></ion-spinner>"}).run(["$ionicPlatform","Update","ImgCache",function(e,t,n){e.ready(function(){window.ionic&&window.ionic.Keyboard&&window.ionic.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&window.StatusBar.styleDefault(),n.$init(),t.update()})}]).config(["$stateProvider","$urlRouterProvider","$ionicConfigProvider","ImgCacheProvider",function(e,t,n,o){o.setOptions({debug:!1,usePersistentCache:!0}),o.manualInit=!0,n.views.forwardCache(!0),n.backButton.previousTitleText(!1).text(""),n.tabs.position("bottom");var r="/start/login";window.localStorage.getItem("session")&&(r="/menu/home"),t.otherwise(r),e.state("start",{url:"/start","abstract":!0,templateUrl:"components/start/start.html"}).state("start.login",{url:"/login",templateUrl:"components/login/login.html",controller:"LoginCtrl"}).state("start.register",{url:"/register",templateUrl:"components/register/register.html",controller:"RegisterCtrl"}).state("start.register.details",{url:"/details",templateUrl:"components/register/register_details.html"}).state("start.register.verify",{url:"/verify",templateUrl:"components/register/register_verify.html"}).state("menu",{url:"/menu","abstract":!0,templateUrl:"components/menu/menu.html",controller:"MenuCtrl"}).state("menu.home",{url:"/home",templateUrl:"components/home/home.html",controller:"HomeCtrl"}).state("menu.info",{url:"/info",templateUrl:"components/info/info.html"}).state("menu.bugs",{url:"/info",templateUrl:"components/menu/report.html"}).state("menu.contact",{url:"/contact",templateUrl:"components/contact/contact.html",controller:"ContactCtrl"}).state("menu.legal",{url:"/legal",templateUrl:"components/legal/legal.html",controller:"LegalCtrl"}).state("menu.about",{url:"/about",templateUrl:"components/about/about.html",controller:"AboutCtrl"}).state("menu.userinfo",{url:"/userinfo",controller:"UserCtrl",templateUrl:"components/user/user.html"}).state("menu.counties",{url:"/counties",templateUrl:"components/counties/counties.html",controller:"CountiesCtrl"}).state("menu.areas",{url:"/areas",params:{id:!1,county:!1,search:""},templateUrl:"components/area_list/area_list.html",controller:"AreasCtrl"}).state("menu.cards",{url:"/cards",templateUrl:"components/user_cards/user_cards.html",controller:"UserCardsCtrl"}).state("menu.favorites",{url:"/favorites",templateUrl:"components/favorites/favorites.html"}).state("menu.fishes",{url:"/fishes",templateUrl:"components/fishes/fishes.html",controller:"FishesCtrl"}).state("menu.fishdetail",{url:"/fishdetail/:id",params:{id:!1,fish:!1},templateUrl:"components/fish_detail/fish_detail.html",controller:"FishDetailCtrl"}).state("menu.map",{url:"/map",templateUrl:"components/map/map.html",controller:"MapCtrl"}).state("menu.techniques",{url:"/techniques",templateUrl:"components/techniques/techniques.html",controller:"TechniquesCtrl"}).state("menu.techniquedetail",{url:"/techniquedetail/:id",params:{id:!1,tech:!1},templateUrl:"components/technique_detail/technique_detail.html",controller:"TechniqueDetailCtrl"}).state("menu.report",{url:"/report",templateUrl:"components/report/report.html"}).state("menu.area",{url:"/area/:id",views:{"@menu":{templateUrl:"components/area/area.html",controller:"AreaCtrl"},"info@menu.area":{templateUrl:"components/area/info.html"},"map@menu.area":{templateUrl:"components/area/map.html"},"fishinfo@menu.area":{templateUrl:"components/area/fish.html"},"cards@menu.area":{templateUrl:"components/area/cards.html"}}})}]),angular.module("ifiske.controllers",[]),angular.module("ifiske.directives",[]),angular.module("ifiske.controllers").controller("AboutCtrl",["$scope","$cordovaAppVersion","$ionicPlatform","Update",function(e,t,n,o){e.version=e.dbDate="Okänt",e.update=o,n.ready(function(){window.cordova&&t.getAppVersion().then(function(t){console.log("iFiske version:",t),e.version=t})})}]),angular.module("ifiske.controllers").controller("AreaCtrl",["$scope","$ionicHistory","localStorage","$stateParams","DB","$ionicSlideBoxDelegate","$ionicModal",function(e,t,n,o,r,i,s){console.log(e),e.map={center:{}},e.image_endpoint="http://www.ifiske.se";var l={};r.getArea(o.id).then(function(t){e.map.center={lat:t.lat,lng:t.lng,zoom:Number(t.zoom)?Number(t.zoom):9},e.images=t.images,i.update(),e.area=t,r.getOrganization(t.orgid).then(function(t){e.org=t}),r.getPoiTypes().then(function(n){for(var o=0;o<n.length;++o){var i=n[o];l[i.ID]={iconUrl:"http://www.ifiske.se/"+i.icon,iconAnchor:[16,37]}}r.getPois(t.orgid).then(function(t){e.map.markers=t.map(function(e){return{layer:"pois",lat:e.la,lng:e.lo,icon:l[e.type],message:e.t}})},function(e){console.error(e)}),r.getPolygons(t.orgid).then(function(t){e.map.paths=t.map(function(e){return{latlngs:JSON.parse("["+e.poly+"]"),color:e.c,weight:2,opacity:.5,fillColor:e.c,type:"polygon"}}),console.log(e)},function(e){console.error(e)})})},function(e){console.log(e)}),r.getAreaFishes(o.id).then(function(t){e.fishes=t},function(e){console.log(e)}),r.getProductsByArea(o.id).then(function(t){e.products=t},function(e){console.log(e)}),e.sortorder="-amount",e.smsterms=n.get("sms_terms"),e.predicate="so",s.fromTemplateUrl("components/area/sms_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.sms_modal=t}),e.openModal=function(t){e.sms_modal.show(),e.product=t},e.closeModal=function(){e.sms_modal.hide()},e.showTerms=function(){e.showingterms=!e.showingterms},e.showingterms=!1,s.fromTemplateUrl("components/area/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.sms_modal.remove(),e.rules_modal.remove()}),angular.extend(e.map,{layers:{baselayers:{mapbox:{name:"Mapbox",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{pois:{name:"Ställen",type:"markercluster",visible:!0,layerOptions:{disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}},paths:{}})}]),angular.module("ifiske.controllers").controller("AreasCtrl",["$scope","$stateParams","$ionicScrollDelegate","DB",function(e,t,n,o){var r=t.search;e.search=r,e.county=t.county,o.search("",t.id).then(function(t){e.areas=t},function(e){console.log(e)}),e.clearSearch=function(){e.search=""},e.scrollTop=function(){n.scrollTop()}}]),angular.module("ifiske.controllers").controller("ContactCtrl",["$scope","$state","localStorage",function(e,t,n){e.contactInfo=n.get("contactInfo")}]),angular.module("ifiske.controllers").controller("CountiesCtrl",["$scope","DB",function(e,t){t.getCounties().then(function(t){e.counties=t},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("FishDetailCtrl",["$scope","$stateParams","DB",function(e,t,n){e.fish=t.fish,e.image_endpoint="http://www.ifiske.se",e.fish||n.getFish(t.id).then(function(t){e.fish=t,console.log(e.fish)},function(e){console.log(e)}),console.log(e.fish)}]),angular.module("ifiske.controllers").controller("FishesCtrl",["$scope","DB",function(e,t){e.sortorder="so",e.image_endpoint="http://www.ifiske.se",t.getFishes().then(function(t){e.fishes=t,e.default_img=t[0].img},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("HomeCtrl",["$scope","$state","$ionicHistory","localStorage","sessionData",function(e,t,n,o,r){e.loggedIn=r,o.set("homeHistoryId",n.currentHistoryId()),e.myFunc=function(e){13!=e.keyCode||e.shiftKey||t.go("menu.areas",{search:e.srcElement.value})}}]),angular.module("ifiske.controllers").controller("LegalCtrl",["$scope","$state","localStorage",function(e,t,n){e.tos=n.get("tos")}]),angular.module("ifiske.controllers").controller("LoginCtrl",["$scope","$state","Update","$ionicLoading",function(e,t,n,o){e.signIn=function(r){o.show(),n.user_login(r.username.$viewValue,r.password.$viewValue).then(function(){o.hide(),r.$setValidity("loginError",!0),t.go("menu.home")},function(t){o.hide(),r.$setValidity("loginError",!1),e.error=t.response})}}]),angular.module("ifiske.controllers").controller("MapCtrl",["$scope","leafletData","DB",function(e,t,n){n.search("").then(function(t){e.markers=t.map(function(t){return{layer:"fishareas",lat:t.lat,lng:t.lng,getMessageScope:function(){var n=e.$new();return n.area=t,n},message:'<a ui-sref="menu.area({id: area.ID })">{{area.t}}</a>'}})}),angular.extend(e,{center:{lat:62,lng:15,zoom:5},layers:{baselayers:{mapbox:{name:"Mapbox",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{fishareas:{name:"Fiskeområden",type:"markercluster",visible:!0,layerOptions:{disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}}})}]),angular.module("ifiske.controllers").controller("MenuCtrl",["$scope","$state","$ionicPopover","sessionData","Update",function(e,t,n,o,r){e.sessionData=o,n.fromTemplateUrl("components/menu/popover.html",{scope:e}).then(function(t){e.popover=t}),e.userinfo=function(){e.popover.hide(),t.go("menu.userinfo")},e.logout=function(){e.popover.hide(),r.user_logout(),t.go("start.login")},e.login=function(){e.popover.hide(),t.go("start.login")},e.register=function(){e.popover.hide(),t.go("start.register.details")},e.update=function(){r.forcedUpdate()}}]),angular.module("ifiske.controllers").controller("RegisterCtrl",["$scope","$state","$ionicLoading","$ionicModal","$ionicScrollDelegate","API","localStorage",function(e,t,n,o,r,i,s){var l;e.checkUsername=function(e){i.user_exists(e.$viewValue).then(function(t){e.$setValidity("nameTaken",!t)})},e.checkEmail=function(e){i.user_exists(null,e.$viewValue).then(function(t){e.$setValidity("emailTaken",!t)})},e.formErrors={},e.register=function(o){n.show(),e.phone=o.phone.$viewValue,l=o.username.$viewValue;var s=o.password.$viewValue,u=o.fullname.$viewValue,a=o.email.$viewValue;i.user_register(l,u,s,a,e.phone).then(function(){n.hide(),t.go("^.verify")},function(t){e.formErrors.registrationError=!0,r.scrollTop(!0),8==t.error_code&&o.email.$setValidity("invalidEmail",!1),9==t.error_code&&(e.checkUsername(o.username),e.checkEmail(o.email)),10==t.error_code&&o.phone.$setValidity("invalidPhone",!1),n.hide()})},e.verify=function(e){n.show();var o=e.vercode;i.user_confirm(l,o.$viewValue).then(function(){t.go("start.login"),o.$setValidity("verified",!0),n.hide()},function(){o.$setValidity("verified",!1),n.hide()})},e.tos=s.get("tos"),o.fromTemplateUrl("components/register/eula.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.eula=t}),e.showEula=function(){e.eula.show()},e.closeEula=function(){e.eula.hide()},e.$on("$destroy",function(){e.eula.remove()})}]),angular.module("ifiske.controllers").controller("TechniqueDetailCtrl",["$scope","$stateParams","DB","$ionicSlideBoxDelegate",function(e,t,n,o){if(e.image_endpoint="http://www.ifiske.se",e.tech=t.tech,e.images=[],e.tech){var r=e.tech;e.images=[r.img1,r.img2,r.img3].filter(function(e){return!/\/$/.test(e)}),o.update()}else n.getTechnique(t.id).then(function(t){e.images=[t.img1,t.img2,t.img3].filter(function(e){return!/\/$/.test(e)}),o.update(),e.tech=t})}]),angular.module("ifiske.controllers").controller("TechniquesCtrl",["$scope","DB",function(e,t){t.getTechniques().then(function(t){console.log(t),e.techniques=t}),e.image_endpoint="http://www.ifiske.se",e.sortorder="so"}]),angular.module("ifiske.controllers").controller("UserCtrl",["$scope","DB",function(e,t){t.getUserInfo().then(function(t){e.user=t}),t.getUserNumbers().then(function(t){e.numbers=t})}]),angular.module("ifiske.controllers").controller("UserCardsCtrl",["$scope","$stateParams","DB","$ionicModal",function(e,t,n,o){e.pred="-to",e.endpoint="https://www.ifiske.se",e.$on("$ionicView.beforeEnter",function(){e.now=Date.now(),n.getUserProducts().then(function(t){e.products=t},function(e){console.log(e)})}),o.fromTemplateUrl("components/area_cards/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),console.log(t),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.rules_modal.remove()})}]),function(e){"use strict";e.module("ifiske.api",["ifiske.utils"]).provider("API",function(){this.base_url="https://www.ifiske.se/api/v2/api.php",this.$get=["$http","sessionData","localStorage","$q",function(t,n,o,r){var i=this.base_url,s=function(n){return r(function(o,r){t({method:"get",url:i,params:e.extend(n,{key:"0123456789abcdef"}),timeout:5e3,cache:!0}).success(function(e){"error"===e.status?r(e.message):e.data?o(e.data.response):r(e)}).error(function(e,t){r(0===t?new Error("Request timeout"):e)})})},l=function(t){var o=n.token;return s(e.extend(t,{s:o}))};return{get_municipalities:function(){return s({m:"get_municipalities"})},get_counties:function(){return s({m:"get_counties"})},user_exists:function(e,t){var n={m:"user_exists"};return"string"==typeof e&&(n.username=e),"string"==typeof t&&(n.email=t),s(n)},user_register:function(e,t,n,o,r){return s({m:"user_register",username:e,fullname:t,password:n,email:o,phone:r})},user_confirm:function(e,t){return s({m:"user_confirm",username:e,pin:t})},user_info:function(){return l({m:"user_info"})},user_login:function(e,t){return s({m:"user_login",username:e,password:t}).then(function(e){return n.setToken(e),e})},user_logout:function(){l({m:"user_logout"}).then(function(e){return n.deleteToken(),e})},user_products:function(){return l({m:"user_products"})},get_fishes:function(){return s({m:"get_fishes"})},get_techniques:function(){return s({m:"get_techniques"})},get_baits:function(){return s({m:"get_baits"})},get_organizations:function(e){return s({m:"get_organizations",orgid:e})},get_org_modified:function(e){return s({m:"get_org_modified",orgid:e})},get_areas:function(e){return s({m:"get_areas",areaid:e})},get_areas_modified:function(e){return s({m:"get_areas_modified",areaid:e})},get_products:function(e){return s({m:"get_products",areaid:e})},get_rules:function(e){return s({m:"get_rules",ruleid:e})},get_photos:function(e,t){return s({m:"get_photos",orgid:e,areaid:t})},get_map_pois:function(e){return s({m:"get_map_pois",orgid:e})},get_map_poi_types:function(){return s({m:"get_map_poi_types"})},get_map_polygons:function(e){return s({m:"get_map_polygons",orgid:e})},user_get_favorites:function(){return l({m:"user_get_favorites"})},get_terms_of_service:function(){return s({m:"get_terms_of_service"})},get_contact_info:function(){return s({m:"get_contact_info"})},get_engine_policies:function(){return s({m:"get_engine_policies"})},get_sms_terms:function(){return s({m:"get_sms_terms"})}}}]})}(window.angular),function(e,t){"use strict";e.module("ifiske.db",[]).provider("DB",function(){this.$get=["$cordovaSQLite","API","$q",function(e,n,o){var r;if(window.sqlitePlugin)r=e.openDB("fiskebasen.db");else{if(!window.openDatabase)return console.log("Not supported on this device, sorry"),t;r=window.openDatabase("fiskebasen.db","1.0","fiskebasen",10485760)}var i={Area:[["ID","int"],["orgid","int"],["t","text"],["kw","text"],["note","text"],["c1","int"],["c2","int"],["c3","int"],["m1","int"],["m2","int"],["m3","int"],["lat","real"],["lng","real"],["zoom","text"],["pnt","int"],["car","int"],["eng","int"],["hcp","int"],["map","text"],["wsc","int"],["mod","int"],["d","text"]],Area_Fish:[["ID","text"],["aid","int"],["fid","int"],["amount","int"],["comment","text"]],Product:[["ID","int"],["t","text"],["t2","text"],["no","text"],["im","text"],["pf","text"],["ai","int"],["ri","int"],["ch","int"],["price","int"],["mod","int"],["so","int"],["hl","text"]],County:[["ID","int"],["s","text"],["t","text"],["d","text"]],Municipality:[["ID","int"],["cID","int"],["name","text"]],Fish:[["ID","int"],["t","text"],["d","text"],["mod","int"],["so","int"],["max","int"],["icon","text"],["img","text"],["in","text"],["geo","text"],["size","text"],["lat","text"],["rec","text"]],Rule:[["ID","int"],["ver","int"],["d","text"],["t","text"]],User_Product:[["ID","int"],["at","int"],["code","int"],["fr","int"],["fullname","text"],["ot","text"],["ref1","int"],["ref2","int"],["t","text"],["to","int"],["pid","int"],["pdf","text"]],User_Info:[["ID","int"],["username","text"],["loggedin","text"],["IP1","text"],["IP2","text"],["name","text"],["email","text"],["created","text"]],User_Number:[["number","text"]],Technique:[["ID","int"],["t","text"],["d","text"],["so","int"],["de","text"],["da","text"],["icon","text"],["img1","text"],["img2","text"],["img3","text"],["youtube","text"]],Organization:[["ID","int"],["t","text"],["d","text"],["cp","text"],["url","text"],["co","int"],["mod","int"],["vat","int"],["dp","int"],["fva","int"],["org","int"],["ml","int"]],Poi:[["ID","int"],["orgid","int"],["type","int"],["price","int"],["t","text"],["d","text"],["la","real"],["lo","real"]],Poi_Type:[["ID","int"],["t","text"],["icon","text"]],Polygon:[["ID","int"],["orgid","int"],["t","text"],["c","text"],["ver","int"],["mod","int"],["poly","text"]]},s=function(e){for(var t=[],n=0;n<e.rows.length;++n)t.push(e.rows.item(n));return t};return{populateTable:function(e,t){return o(function(n,o){r.transaction(function(n){n.executeSql("DELETE FROM "+e+";");for(var o in t){for(var r=t[o],s=[],l=0;l<i[e].length;++l)s.push(r[i[e][l][0]]);var u=["INSERT INTO",e,"VALUES(?",",?".repeat(s.length-1),")"].join(" ");n.executeSql(u,s)}},o,n)})},cleanTable:function(e){return o(function(t,n){r.transaction(function(t){t.executeSql("DELETE FROM "+e+";")},n,t)})},clean:function(){return o(function(e,t){r.transaction(function(e){for(var t in i)e.executeSql("DROP TABLE IF EXISTS "+t+";")},t,e)}).then(function(){console.log("Removed all tables")})},init:function(){return o(function(e,t){r.transaction(function(e){for(var t in i){for(var n=i[t],o=[],r=0;r<n.length;++r)o.push('"'+n[r][0]+'" '+n[r][1]);o=o.join(", ");var s=["CREATE TABLE IF NOT EXISTS",t,"(",o,", PRIMARY KEY(",'"'+n[0][0]+'"',"));"].join(" ");e.executeSql(s)}},t,e)})},getArea:function(t){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE id = ?"].join(" "),[t]).then(function(e){var t=s(e)[0];n.get_photos(t.orgid).then(function(e){t.images=e,o(t)},function(e){console.warn(e),o(t)})},i)})},getAreaFishes:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Area_Fish","JOIN Fish ON Area_Fish.fid = Fish.ID","WHERE Area_Fish.aid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},search:function(t,n){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE t LIKE ?",n?"AND c1 = ?":"","ORDER BY t"].join(" "),n?["%"+t+"%",n]:["%"+t+"%"]).then(function(e){o(s(e))},i)})},getProduct:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ID = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getProductsByArea:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ai = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getCounties:function(){return o(function(t,n){e.execute(r,["SELECT DISTINCT County.*","FROM County","JOIN Area ON Area.c1 = County.ID","ORDER BY County.t"].join(" ")).then(function(e){t(s(e))},n)})},getUserProducts:function(){return o(function(t,n){e.execute(r,["SELECT User_Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM User_Product","LEFT JOIN Product ON Product.ID = User_Product.pid","LEFT JOIN Rule ON Rule.ID = Product.ri"].join(" ")).then(function(e){t(s(e))},n)})},getFishes:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Fish"].join(" ")).then(function(e){t(s(e))},n)})},getFish:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Fish","WHERE id = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getTechniques:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Technique"].join(" ")).then(function(e){t(s(e))},n)})},getTechnique:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Technique","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getOrganization:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Organization","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getUserInfo:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Info"].join(" ")).then(function(e){t(s(e)[0])},n)})},getUserNumbers:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Number"].join(" ")).then(function(e){t(s(e))},n)})},getPois:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Poi","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},getPoiTypes:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM Poi_Type"].join(" ")).then(function(e){t(s(e))},n)})},getPolygons:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Polygon","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})}}}]})}(window.angular),angular.module("ifiske.filters",[]).filter("onebr",function(){return function(e){return e.replace(/(<br>\s*)+/g,"<br>")}}).filter("nobrs",function(){return function(e){return e.replace(/(<br(\s*\/)*>)+/g,"")}}).filter("cleantables",function(){return function(e){return e=e.replace(/(<\/?table>)+/g,""),e=e.replace(/(<\/?tr>)+/g,""),e=e.replace(/(<\/?th>)+/g,""),e=e.replace(/(<(\/?)td.*?>)+?/g,"<$2p>"),e=e.replace(/<p>\s*<\/p>/g,"")}}),function(e){"use strict";e.module("ifiske.update",["ifiske.api","ifiske.db","ifiske.utils"]).provider("Update",function(){this.$get=["API","DB","localStorage","$q","$ionicLoading","sessionData",function(e,t,n,o,r,i){var s="last_update",l=function(){return o.all([e.get_areas().then(function(e){var n=[];for(var r in e){var i=e[r].fish;for(var s in i)n.push({ID:r+"_"+s,fid:s,aid:r,amount:i[s][0],comment:i[s][1]})}return o.all([t.populateTable("Area",e),t.populateTable("Area_Fish",n)]).then(function(){console.log("Populated Area")},function(e){return console.log(e),o.reject(e)})}),e.get_products().then(function(e){return t.populateTable("Product",e).then(function(){console.log("Populated Product")},function(e){return console.log(e),o.reject(e)})}),e.get_counties().then(function(e){return t.populateTable("County",e).then(function(){console.log("Populated County")},function(e){return console.log(e),o.reject(e)})}),e.get_municipalities().then(function(e){return t.populateTable("Municipality",e).then(function(){console.log("Populated Municipality")},function(e){return console.log(e),o.reject(e)})}),e.get_fishes().then(function(e){return t.populateTable("Fish",e).then(function(){console.log("Populated Fish")},function(e){return console.log(e),o.reject(e)})}),e.get_rules().then(function(e){return t.populateTable("Rule",e).then(function(){console.log("Populated Rule")},function(e){return console.log(e),o.reject(e)})}),e.get_techniques().then(function(e){return t.populateTable("Technique",e).then(function(){console.log("Populated Technique")},function(e){return console.log(e),o.reject(e)})}),e.get_organizations().then(function(e){return t.populateTable("Organization",e).then(function(){console.log("Populated Organization")},function(e){return console.log(e),o.reject(e)})}),e.get_map_pois().then(function(e){return t.populateTable("Poi",e).then(function(){console.log("Populated Poi")},function(e){return console.log(e),o.reject(e)})}),e.get_map_poi_types().then(function(e){return t.populateTable("Poi_Type",e).then(function(){console.log("Populated Poi_Type")},function(e){return console.log(e),o.reject(e)})}),e.get_map_polygons().then(function(e){return t.populateTable("Polygon",e).then(function(){console.log("Populated Polygon")},function(e){return console.log(e),o.reject(e)})})])},u=function(){return o.all([e.user_products().then(function(e){return console.log(e),t.populateTable("User_Product",e).then(function(){console.log("Populated User_Product")},function(e){return console.log(e),o.reject(e)})}),e.user_info().then(function(e){for(var n=e.numbers,r=[],i=0;i<n.length;++i)r.push({number:n[i]});return o.all([t.populateTable("User_Info",[e]).then(function(){console.log("Populated User_Info")},function(t){return console.log(e),console.log(t),o.reject(t)}),t.populateTable("User_Number",r).then(function(){console.log("Populated User_Numbers")},function(e){return console.log(e),o.reject(e)})])})])},a=function(){return o.all([t.cleanTable("User_Product"),t.cleanTable("User_Number"),t.cleanTable("User_Info")]).then(function(){console.log("Removed user info from database")},function(e){console.log("Could not remove user data from database!",e)})},c=function(c){r.show();var f=Date.now(),m=0;c||(m=n.get(s));var p=6048e5;f-m>p?(t.init().then(function(){return console.log("Initialized DB system"),i.token?o.all([u(),l()]):l()}).then(function(){console.log("Populated all the things"),n.set(s,f),r.hide()},function(o){return 7!==o.error_code?(console.warn("Got an error, will try to recreate all tables:",o),t.clean().then(function(){return t.init()}).then(function(){return l()}).then(function(){console.log("Populated all the things"),n.set(s,f),r.hide()},function(e){console.log("Still error, handle it!",e),r.hide()})):(a(),e.user_logout(),r.hide(),void 0)}),e.get_terms_of_service().then(function(e){n.set("tos",e)}),e.get_sms_terms().then(function(e){n.set("sms_terms",e)}),e.get_contact_info().then(function(e){n.set("contactInfo",e)})):i.token?t.init().then(function(){console.log("Initialized DB system"),i.token&&u().then(function(){r.hide()},function(e){console.err(e),r.hide()}),r.hide()}):(console.log("no_update"),r.hide())};return{update:function(){c()},forcedUpdate:function(){c(!0)},user_logout:function(){a(),e.user_logout()},user_login:function(t,n){return e.user_login(t,n).then(function(){c()})},last_update:function(){return n.get(s)}}}]})}(window.angular),angular.module("ifiske.utils",[]).factory("localStorage",["$window",function(e){return{set:function(t,n){e.localStorage.setItem(t,n)},get:function(t){return e.localStorage.getItem(t)},remove:function(t){e.localStorage.removeItem(t)}}}]).service("sessionData",["localStorage",function(e){this.token=e.get("session"),this.setToken=function(t){e.set("session",t),this.token=t,console.log("token set")},this.deleteToken=function(){e.remove("session"),this.token=null,console.log("token unset")}}]),angular.module("ngCordovaSms",[]).directive("ngCordovaSms",["$cordovaSms","$ionicPopup",function(e,t){"use strict";return{restrict:"A",link:function(n,o,r){o.on("click",function(n){n.preventDefault(),t.prompt({title:"Skriv in ditt namn",inputType:"text"}).then(function(t){var n="FISKA "+r.ngCordovaSms+" "+t;e.send("72456",n,"INTENT",function(){console.log("succuess")},function(e){console.log(e)})})})}}}]),angular.module("ifiske.directives").directive("ifiskeInput",function(){return{restrict:"E",transclude:!0,scope:{name:"@",id:"@",label:"@",placeholder:"@",type:"@",ngPattern:"@",ngModel:"=?"},templateUrl:"directives/input_field/ifiske_input.html",controller:function(e){e.id=e.id||e.name,e.type=e.type||"text"}}}),angular.module("systemBrowser",[]).directive("systemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){e.open(n[0].href,"_system"),t.preventDefault()})}}}]).directive("globalSystemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){t.target.href&&t.target.host!==window.location.host&&(e.open(t.target.href,"_system"),t.preventDefault())})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFib3V0L2Fib3V0X2NvbnRyb2xsZXIuanMiLCJhcmVhL2FyZWFfY29udHJvbGxlci5qcyIsImFyZWFfbGlzdC9hcmVhX2xpc3RfY29udHJvbGxlci5qcyIsImNvbnRhY3QvY29udGFjdF9jb250cm9sbGVyLmpzIiwiY291bnRpZXMvY291bnRpZXNfY29udHJvbGxlci5qcyIsImZpc2hfZGV0YWlsL2Zpc2hfZGV0YWlsX2NvbnRyb2xsZXIuanMiLCJmaXNoZXMvZmlzaGVzX2NvbnRyb2xsZXIuanMiLCJob21lL2hvbWVfY29udHJvbGxlci5qcyIsImxlZ2FsL2xlZ2FsX2NvbnRyb2xsZXIuanMiLCJsb2dpbi9sb2dpbl9jb250cm9sbGVyLmpzIiwibWFwL21hcF9jb250cm9sbGVyLmpzIiwibWVudS9tZW51X2NvbnRyb2xsZXIuanMiLCJyZWdpc3Rlci9yZWdpc3Rlcl9jb250cm9sbGVyLmpzIiwidGVjaG5pcXVlX2RldGFpbC90ZWNobmlxdWVfZGV0YWlsX2NvbnRyb2xsZXIuanMiLCJ0ZWNobmlxdWVzL3RlY2huaXF1ZXNfY29udHJvbGxlci5qcyIsInVzZXIvdXNlcl9jb250cm9sbGVyLmpzIiwidXNlcl9jYXJkcy91c2VyX2NhcmRzX2NvbnRyb2xsZXIuanMiLCJhcGkuanMiLCJkYi5qcyIsImZpbHRlci5qcyIsInVwZGF0ZS5qcyIsInV0aWxzLmpzIiwiaWZpc2tlX3Ntcy9pZmlza2Vfc21zLmpzIiwiaW5wdXRfZmllbGQvaWZpc2tlX2lucHV0LmpzIiwic3lzdGVtX2Jyb3dzZXIvc3lzdGVtX2Jyb3dzZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwidGVtcGxhdGUiLCJydW4iLCIkaW9uaWNQbGF0Zm9ybSIsIlVwZGF0ZSIsIkltZ0NhY2hlIiwicmVhZHkiLCJ3aW5kb3ciLCJpb25pYyIsIktleWJvYXJkIiwiaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyIiwiU3RhdHVzQmFyIiwic3R5bGVEZWZhdWx0IiwiJGluaXQiLCJ1cGRhdGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRpb25pY0NvbmZpZ1Byb3ZpZGVyIiwiSW1nQ2FjaGVQcm92aWRlciIsInNldE9wdGlvbnMiLCJkZWJ1ZyIsInVzZVBlcnNpc3RlbnRDYWNoZSIsIm1hbnVhbEluaXQiLCJ2aWV3cyIsImZvcndhcmRDYWNoZSIsImJhY2tCdXR0b24iLCJwcmV2aW91c1RpdGxlVGV4dCIsInRleHQiLCJ0YWJzIiwicG9zaXRpb24iLCJkZWZhdWx0VXJsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwiYWJzdHJhY3QiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJwYXJhbXMiLCJpZCIsImNvdW50eSIsInNlYXJjaCIsImZpc2giLCJ0ZWNoIiwiQG1lbnUiLCJpbmZvQG1lbnUuYXJlYSIsIm1hcEBtZW51LmFyZWEiLCJmaXNoaW5mb0BtZW51LmFyZWEiLCJjYXJkc0BtZW51LmFyZWEiLCIkc2NvcGUiLCIkY29yZG92YUFwcFZlcnNpb24iLCJ2ZXJzaW9uIiwiZGJEYXRlIiwiY29yZG92YSIsImdldEFwcFZlcnNpb24iLCJ0aGVuIiwiY29uc29sZSIsImxvZyIsIiRpb25pY0hpc3RvcnkiLCIkc3RhdGVQYXJhbXMiLCJEQiIsIiRpb25pY1NsaWRlQm94RGVsZWdhdGUiLCIkaW9uaWNNb2RhbCIsIm1hcCIsImNlbnRlciIsImltYWdlX2VuZHBvaW50IiwiaWNvbnMiLCJnZXRBcmVhIiwiYXJlYSIsImxhdCIsImxuZyIsInpvb20iLCJOdW1iZXIiLCJpbWFnZXMiLCJnZXRPcmdhbml6YXRpb24iLCJvcmdpZCIsIm9yZyIsImdldFBvaVR5cGVzIiwicG9pX3R5cGVzIiwiaSIsImxlbmd0aCIsInR5cGUiLCJJRCIsImljb25VcmwiLCJpY29uIiwiaWNvbkFuY2hvciIsImdldFBvaXMiLCJwb2lzIiwibWFya2VycyIsInBvaSIsImxheWVyIiwibGEiLCJsbyIsIm1lc3NhZ2UiLCJ0IiwiZXJyIiwiZXJyb3IiLCJnZXRQb2x5Z29ucyIsInBvbHlnb25zIiwicGF0aHMiLCJwb2x5IiwibGF0bG5ncyIsIkpTT04iLCJwYXJzZSIsImNvbG9yIiwiYyIsIndlaWdodCIsIm9wYWNpdHkiLCJmaWxsQ29sb3IiLCJnZXRBcmVhRmlzaGVzIiwiZmlzaGVzIiwiZ2V0UHJvZHVjdHNCeUFyZWEiLCJwcm9kdWN0cyIsInNvcnRvcmRlciIsInNtc3Rlcm1zIiwiZ2V0IiwicHJlZGljYXRlIiwiZnJvbVRlbXBsYXRlVXJsIiwic2NvcGUiLCJhbmltYXRpb24iLCJtb2RhbCIsInNtc19tb2RhbCIsIm9wZW5Nb2RhbCIsInByb2R1Y3QiLCJzaG93IiwiY2xvc2VNb2RhbCIsImhpZGUiLCJzaG93VGVybXMiLCJzaG93aW5ndGVybXMiLCJydWxlc19tb2RhbCIsIm9wZW5SdWxlc01vZGFsIiwiY2xvc2VSdWxlc01vZGFsIiwiJG9uIiwicmVtb3ZlIiwiZXh0ZW5kIiwibGF5ZXJzIiwiYmFzZWxheWVycyIsIm1hcGJveCIsIm5hbWUiLCJsYXllck9wdGlvbnMiLCJtYXB0eXBlIiwiYXBpa2V5Iiwib3ZlcmxheXMiLCJ2aXNpYmxlIiwiZGlzYWJsZUNsdXN0ZXJpbmdBdFpvb20iLCJjaHVua2VkTG9hZGluZyIsInNob3dDb3ZlcmFnZU9uSG92ZXIiLCJyZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kcyIsIiRpb25pY1Njcm9sbERlbGVnYXRlIiwiY29weSIsImRhdGEiLCJhcmVhcyIsImNsZWFyU2VhcmNoIiwic2Nyb2xsVG9wIiwiJHN0YXRlIiwiY29udGFjdEluZm8iLCJnZXRDb3VudGllcyIsImNvdW50aWVzIiwiZ2V0RmlzaCIsImdldEZpc2hlcyIsImRlZmF1bHRfaW1nIiwiaW1nIiwic2Vzc2lvbkRhdGEiLCJsb2dnZWRJbiIsInNldCIsImN1cnJlbnRIaXN0b3J5SWQiLCJteUZ1bmMiLCIkZXZlbnQiLCJrZXlDb2RlIiwic2hpZnRLZXkiLCJnbyIsInNyY0VsZW1lbnQiLCJ2YWx1ZSIsInRvcyIsIiRpb25pY0xvYWRpbmciLCJzaWduSW4iLCJsb2dpbkZvcm0iLCJ1c2VyX2xvZ2luIiwidXNlcm5hbWUiLCIkdmlld1ZhbHVlIiwicGFzc3dvcmQiLCIkc2V0VmFsaWRpdHkiLCJyZXNwb25zZSIsImxlYWZsZXREYXRhIiwiYSIsImdldE1lc3NhZ2VTY29wZSIsIm5ld19zY29wZSIsIiRuZXciLCJmaXNoYXJlYXMiLCIkaW9uaWNQb3BvdmVyIiwicG9wb3ZlciIsInVzZXJpbmZvIiwibG9nb3V0IiwidXNlcl9sb2dvdXQiLCJsb2dpbiIsInJlZ2lzdGVyIiwiZm9yY2VkVXBkYXRlIiwiQVBJIiwiY2hlY2tVc2VybmFtZSIsImlucHV0IiwidXNlcl9leGlzdHMiLCJjaGVja0VtYWlsIiwiZm9ybUVycm9ycyIsImZvcm0iLCJwaG9uZSIsImZ1bGxuYW1lIiwiZW1haWwiLCJ1c2VyX3JlZ2lzdGVyIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJlcnJvcl9jb2RlIiwidmVyaWZ5IiwidmVyY29kZSIsInVzZXJfY29uZmlybSIsImV1bGEiLCJzaG93RXVsYSIsImNsb3NlRXVsYSIsImltZzEiLCJpbWcyIiwiaW1nMyIsImZpbHRlciIsImVsIiwidGVzdCIsImdldFRlY2huaXF1ZSIsImdldFRlY2huaXF1ZXMiLCJ0ZWNobmlxdWVzIiwiZ2V0VXNlckluZm8iLCJ1c2VyIiwiZ2V0VXNlck51bWJlcnMiLCJudW1iZXJzIiwicHJlZCIsImVuZHBvaW50Iiwibm93IiwiRGF0ZSIsImdldFVzZXJQcm9kdWN0cyIsInByb3ZpZGVyIiwidGhpcyIsImJhc2VfdXJsIiwiJGdldCIsIiRodHRwIiwiJHEiLCJhcGlfY2FsbCIsImZ1bGZpbGwiLCJyZWplY3QiLCJtZXRob2QiLCJrZXkiLCJ0aW1lb3V0IiwiY2FjaGUiLCJzdWNjZXNzIiwic3RhdHVzIiwiRXJyb3IiLCJzZXNzaW9uX2FwaV9jYWxsIiwic2Vzc2lvbiIsInRva2VuIiwicyIsImdldF9tdW5pY2lwYWxpdGllcyIsIm0iLCJnZXRfY291bnRpZXMiLCJhcmdzIiwicGluIiwidXNlcl9pbmZvIiwic2V0VG9rZW4iLCJkZWxldGVUb2tlbiIsInVzZXJfcHJvZHVjdHMiLCJnZXRfZmlzaGVzIiwiZ2V0X3RlY2huaXF1ZXMiLCJnZXRfYmFpdHMiLCJnZXRfb3JnYW5pemF0aW9ucyIsImdldF9vcmdfbW9kaWZpZWQiLCJnZXRfYXJlYXMiLCJhcmVhaWQiLCJnZXRfYXJlYXNfbW9kaWZpZWQiLCJnZXRfcHJvZHVjdHMiLCJnZXRfcnVsZXMiLCJydWxlaWQiLCJnZXRfcGhvdG9zIiwiZ2V0X21hcF9wb2lzIiwiZ2V0X21hcF9wb2lfdHlwZXMiLCJnZXRfbWFwX3BvbHlnb25zIiwidXNlcl9nZXRfZmF2b3JpdGVzIiwiZ2V0X3Rlcm1zX29mX3NlcnZpY2UiLCJnZXRfY29udGFjdF9pbmZvIiwiZ2V0X2VuZ2luZV9wb2xpY2llcyIsImdldF9zbXNfdGVybXMiLCJ1bmRlZmluZWQiLCIkY29yZG92YVNRTGl0ZSIsImRiIiwic3FsaXRlUGx1Z2luIiwib3BlbkRCIiwib3BlbkRhdGFiYXNlIiwidGFibGVEZWYiLCJBcmVhIiwiQXJlYV9GaXNoIiwiUHJvZHVjdCIsIkNvdW50eSIsIk11bmljaXBhbGl0eSIsIkZpc2giLCJSdWxlIiwiVXNlcl9Qcm9kdWN0IiwiVXNlcl9JbmZvIiwiVXNlcl9OdW1iZXIiLCJUZWNobmlxdWUiLCJPcmdhbml6YXRpb24iLCJQb2kiLCJQb2lfVHlwZSIsIlBvbHlnb24iLCJjcmVhdGVPYmplY3QiLCJyZXR2YWwiLCJyb3dzIiwicHVzaCIsIml0ZW0iLCJwb3B1bGF0ZVRhYmxlIiwidGFibGUiLCJ0cmFuc2FjdGlvbiIsInR4IiwiZXhlY3V0ZVNxbCIsInNpbmdsZURhdGEiLCJpbnNlcnREYXRhIiwicXVlcnkiLCJyZXBlYXQiLCJqb2luIiwiY2xlYW5UYWJsZSIsImNsZWFuIiwiaW5pdCIsInRhYmxlVmFsdWVzIiwiZXhlY3V0ZSIsIm9iamVjdCIsIndhcm4iLCJhaWQiLCJzZWFyY2hzdHJpbmciLCJjb3VudHlfaWQiLCJnZXRQcm9kdWN0IiwicHJvZHVjdF9pZCIsImFyZWFfaWQiLCJyZXBsYWNlIiwiTEFTVF9VUERBVEUiLCJwb3B1bGF0ZSIsImFsbCIsImZpc2hBcnIiLCJmaXNoS2V5IiwiZmlkIiwiYW1vdW50IiwiY29tbWVudCIsInBvcHVsYXRlVXNlciIsIm51bUFyciIsIm51bWJlciIsImNsZWFuVXNlciIsInVwZGF0ZUZ1bmMiLCJmb3JjZWQiLCJjdXJyZW50VGltZSIsImxhc3RVcGRhdGUiLCJhV2VlayIsInRlcm1zIiwibGFzdF91cGRhdGUiLCJmYWN0b3J5IiwiJHdpbmRvdyIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic2VydmljZSIsImRpcmVjdGl2ZSIsIiRjb3Jkb3ZhU21zIiwiJGlvbmljUG9wdXAiLCJyZXN0cmljdCIsImxpbmsiLCJhdHRycyIsIm9uIiwiZSIsInByZXZlbnREZWZhdWx0IiwicHJvbXB0IiwidGl0bGUiLCJpbnB1dFR5cGUiLCJuZ0NvcmRvdmFTbXMiLCJzZW5kIiwidHJhbnNjbHVkZSIsImxhYmVsIiwicGxhY2Vob2xkZXIiLCJuZ1BhdHRlcm4iLCJuZ01vZGVsIiwiJGNvcmRvdmFJbkFwcEJyb3dzZXIiLCJvcGVuIiwiaHJlZiIsInRhcmdldCIsImhvc3QiLCJsb2NhdGlvbiJdLCJtYXBwaW5ncyI6IkFBS0FBLFFBQUFDLE9BQUEsVUFDQSxRQUNBLHFCQUNBLG9CQUNBLGFBQ0EsWUFDQSxlQUNBLGdCQUNBLGlCQUNBLHlCQUNBLFlBQ0EsZ0JBQ0EsZUFDQSxhQUNBLFdBQ0Esb0JBQ0EsZ0JBRUFDLFNBQUEsdUJBQ0FDLFNBQUEsZ0NBR0FDLEtBQUEsaUJBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0FGLEVBQUFHLE1BQUEsV0FFQUMsT0FBQUMsT0FBQUQsT0FBQUMsTUFBQUMsVUFDQUYsT0FBQUMsTUFBQUMsU0FBQUMsMEJBQUEsR0FFQUgsT0FBQUksV0FFQUosT0FBQUksVUFBQUMsZUFHQVAsRUFBQVEsUUFDQVQsRUFBQVUsY0FJQUMsUUFDQSxpQkFDQSxxQkFD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LEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLE1BQUEsU0FDQSxNQUFBLFNBQ0EsT0FBQSxTQUNBLE1BQUEsUUFDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLE1BQUEsUUFDQSxNQUFBLFNBQ0EsTUFBQSxRQUNBLE1BQUEsUUFDQSxJQUFBLFNBRUFDLFlBQ0EsS0FBQSxTQUNBLE1BQUEsUUFDQSxNQUFBLFFBQ0EsU0FBQSxRQUNBLFVBQUEsU0FFQUMsVUFDQSxLQUFBLFFBQ0EsSUFBQSxTQUNBLEtBQUEsU0FDQSxLQUFBLFNBQ0EsS0FBQSxTQUNBLEtBQUEsU0FDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxRQUFBLFFBQ0EsTUFBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFNBRUFDLFNBQ0EsS0FBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsSUFBQSxTQUVBQyxlQUNBLEtBQUEsUUFDQSxNQUFBLFFBQ0EsT0FBQSxTQUVBQyxPQUNBLEtBQUEsUUFDQSxJQUFBLFNBQ0EsSUFBQSxTQUNBLE1BQUEsUUFDQSxLQUFBLFFBQ0EsTUFBQSxRQUNBLE9BQUEsU0FDQSxNQUFBLFNBQ0EsS0FBQSxTQUNBLE1BQUEsU0FDQSxPQUFBLFNBQ0EsTUFBQSxTQUNBLE1BQUEsU0FFQUMsT0FDQSxLQUFBLFFBQ0EsTUFBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBRUFDLGVBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxPQUFBLFFBQ0EsS0FBQSxRQUNBLFdBQUEsU0FDQSxLQUFBLFNBQ0EsT0FBQSxRQUNBLE9BQUEsUUFDQSxJQUFBLFNBQ0EsS0FBQSxRQUNBLE1BQUEsUUFDQSxNQUFBLFNBRUFDLFlBQ0EsS0FBQSxRQUNBLFdBQUEsU0FDQSxXQUFBLFNBQ0EsTUFBQSxTQUNBLE1BQUEsU0FDQSxPQUFBLFNBQ0EsUUFBQSxTQUNBLFVBQUEsU0FFQUMsY0FDQSxTQUFBLFNBRUFDLFlBQ0EsS0FBQSxRQUNBLElBQUEsU0FDQSxJQUFBLFNBQ0EsS0FBQSxRQUNB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QUFDLHdCQUtBUixVQUFBLHVCQUFBLHVCQUFBLFNBQUFtQixHQUNBLFlBQ0EsUUFDQWhCLFNBQUEsSUFDQUMsS0FBQSxTQUFBcFAsRUFBQXNHLEdBQ0FBLEVBQUFnSixHQUFBLFFBQUEsU0FBQUMsR0FDQUEsRUFBQWUsT0FBQUQsTUFBQWQsRUFBQWUsT0FBQUMsT0FBQXhYLE9BQUF5WCxTQUFBRCxPQUNBSixFQUFBQyxLQUFBYixFQUFBZSxPQUFBRCxLQUFBLFdBQ0FkLEVBQUFDIiwiZmlsZSI6ImFsbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBhbmd1bGFyLm1vZHVsZSBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXIgbW9kdWxlc1xuLy8gJ2lmaXNrZScgaXMgdGhlIG5hbWUgb2YgdGhpcyBhbmd1bGFyIG1vZHVsZSAoYWxzbyBzZXQgaW4gYSA8Ym9keT4gYXR0cmlidXRlIGluIGluZGV4Lmh0bWwpXG4vLyB0aGUgMm5kIHBhcmFtZXRlciBpcyBhbiBhcnJheSBvZiAncmVxdWlyZXMnXG4vLyAnaWZpc2tlLmNvbnRyb2xsZXJzJyBpcyBmb3VuZCBpbiBjb250cm9sbGVycy5qc1xuXG5hbmd1bGFyLm1vZHVsZSgnaWZpc2tlJywgW1xuICAgICdpb25pYycsXG4gICAgJ2lmaXNrZS5jb250cm9sbGVycycsXG4gICAgJ2lmaXNrZS5kaXJlY3RpdmVzJyxcbiAgICAnaWZpc2tlLmFwaScsXG4gICAgJ2lmaXNrZS5kYicsXG4gICAgJ2lmaXNrZS51dGlscycsXG4gICAgJ2lmaXNrZS51cGRhdGUnLFxuICAgICdpZmlza2UuZmlsdGVycycsXG4gICAgJ2lvbmljLmlvbi5oZWFkZXJTaHJpbmsnLFxuICAgICduZ0NvcmRvdmEnLFxuICAgICdzeXN0ZW1Ccm93c2VyJyxcbiAgICAnbmdDb3Jkb3ZhU21zJyxcbiAgICAnbmdNZXNzYWdlcycsXG4gICAgJ0ltZ0NhY2hlJyxcbiAgICAnbGVhZmxldC1kaXJlY3RpdmUnLFxuICAgICd0YWJTbGlkZUJveCdcbl0pXG4uY29uc3RhbnQoJyRpb25pY0xvYWRpbmdDb25maWcnLCB7XG4gICAgdGVtcGxhdGU6ICc8aW9uLXNwaW5uZXI+PC9pb24tc3Bpbm5lcj4nXG4gICAgLy8gaGlkZU9uU3RhdGVDaGFuZ2U6IHRydWVcbn0pXG4ucnVuKFsnJGlvbmljUGxhdGZvcm0nLCAnVXBkYXRlJywgJ0ltZ0NhY2hlJywgZnVuY3Rpb24oJGlvbmljUGxhdGZvcm0sIFVwZGF0ZSwgSW1nQ2FjaGUpIHtcbiAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWNjZXNzb3J5IGJhciBhYm92ZSB0aGUga2V5Ym9hcmQgZm9yIGZvcm0gaW5wdXRzXG4gICAgICAgIGlmICh3aW5kb3cuaW9uaWMgJiYgd2luZG93LmlvbmljLktleWJvYXJkKSB7XG4gICAgICAgICAgICB3aW5kb3cuaW9uaWMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICAgICAgICAvLyBvcmcuYXBhY2hlLmNvcmRvdmEuc3RhdHVzYmFyIHJlcXVpcmVkXG4gICAgICAgICAgICB3aW5kb3cuU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgSW1nQ2FjaGUuJGluaXQoKTtcbiAgICAgICAgVXBkYXRlLnVwZGF0ZSgpO1xuICAgIH0pO1xufV0pXG5cbi5jb25maWcoW1xuICAgICckc3RhdGVQcm92aWRlcicsXG4gICAgJyR1cmxSb3V0ZXJQcm92aWRlcicsXG4gICAgJyRpb25pY0NvbmZpZ1Byb3ZpZGVyJyxcbiAgICAnSW1nQ2FjaGVQcm92aWRlcicsXG4gICAgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGlvbmljQ29uZmlnUHJvdmlkZXIsIEltZ0NhY2hlUHJvdmlkZXIpIHtcblxuICAgICAgICBJbWdDYWNoZVByb3ZpZGVyLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgdXNlUGVyc2lzdGVudENhY2hlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBJbWdDYWNoZVByb3ZpZGVyLm1hbnVhbEluaXQgPSB0cnVlO1xuXG4gICAgICAgIC8vIENhY2hlIHZpZXdzIGluIHRoZSBmb3J3YXJkIHN0YWNrXG4gICAgICAgICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnZpZXdzLmZvcndhcmRDYWNoZSh0cnVlKTtcblxuICAgICAgICAvLyBDbGVhciBiYWNrIGJ1dHRvbiBkZWZhdWx0IHRleHRcbiAgICAgICAgJGlvbmljQ29uZmlnUHJvdmlkZXIuYmFja0J1dHRvbi5wcmV2aW91c1RpdGxlVGV4dChmYWxzZSkudGV4dCgnJyk7XG5cbiAgICAgICAgLy8gVGFicyBwb3NpdGlvblxuICAgICAgICAkaW9uaWNDb25maWdQcm92aWRlci50YWJzLnBvc2l0aW9uKCdib3R0b20nKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW9uaWMgdXNlcyBBbmd1bGFyVUkgUm91dGVyLiBMZWFybiBtb3JlIGhlcmU6XG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXJvdXRlclxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgZGVmYXVsdFVybCA9ICcvc3RhcnQvbG9naW4nO1xuICAgICAgICBpZiAod2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXNzaW9uJykpIHtcbiAgICAgICAgICAgIGRlZmF1bHRVcmwgPSAnL21lbnUvaG9tZSc7XG4gICAgICAgIH1cbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShkZWZhdWx0VXJsKTtcblxuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAvLyBBYnN0cmFjdCBwcmUtbWVudSBzdGF0ZS4gTmVlZGVkIGZvciBuYXZpZ2F0aW9uIGJldHdlZW4gbG9naW4gYW5kIHJlZ2lzdGVyIHZpZXdzLlxuICAgICAgICAuc3RhdGUoJ3N0YXJ0Jywge1xuICAgICAgICAgICAgdXJsOiAnL3N0YXJ0JyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3N0YXJ0L3N0YXJ0Lmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnc3RhcnQubG9naW4nLCB7XG4gICAgICAgICAgICB1cmw6ICcvbG9naW4nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2xvZ2luL2xvZ2luLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdzdGFydC5yZWdpc3RlcicsIHtcbiAgICAgICAgICAgIHVybDogJy9yZWdpc3RlcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ3N0YXJ0LnJlZ2lzdGVyLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXJfZGV0YWlscy5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ3N0YXJ0LnJlZ2lzdGVyLnZlcmlmeScsIHtcbiAgICAgICAgICAgIHVybDogJy92ZXJpZnknLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlZ2lzdGVyL3JlZ2lzdGVyX3ZlcmlmeS5odG1sJ1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEFic3RyYWN0IG1lbnUgc3RhdGUuIFwiUm9vdFwiIHN0YXRlIG9uY2Ugd2UncmUgcGFzdCB0aGUgbG9naW4gc3RhdGUuXG4gICAgICAgIC5zdGF0ZSgnbWVudScsIHtcbiAgICAgICAgICAgIHVybDogJy9tZW51JyxcbiAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL21lbnUvbWVudS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNZW51Q3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LmhvbWUnLCB7XG4gICAgICAgICAgICB1cmw6ICcvaG9tZScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvaG9tZS9ob21lLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0hvbWVDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUuaW5mbycsIHtcbiAgICAgICAgICAgIHVybDogJy9pbmZvJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9pbmZvL2luZm8uaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LmJ1Z3MnLCB7XG4gICAgICAgICAgICB1cmw6ICcvaW5mbycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbWVudS9yZXBvcnQuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LmNvbnRhY3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvY29udGFjdCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvY29udGFjdC9jb250YWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbnRhY3RDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUubGVnYWwnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbGVnYWwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2xlZ2FsL2xlZ2FsLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0xlZ2FsQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LmFib3V0Jywge1xuICAgICAgICAgICAgdXJsOiAnL2Fib3V0JyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hYm91dC9hYm91dC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dEN0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnbWVudS51c2VyaW5mbycsIHtcbiAgICAgICAgICAgIHVybDogJy91c2VyaW5mbycsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckN0cmwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3VzZXIvdXNlci5odG1sJyxcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LmNvdW50aWVzJywge1xuICAgICAgICAgICAgdXJsOiAnL2NvdW50aWVzJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9jb3VudGllcy9jb3VudGllcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb3VudGllc0N0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnbWVudS5hcmVhcycsIHtcbiAgICAgICAgICAgIHVybDogJy9hcmVhcycsXG4gICAgICAgICAgICBwYXJhbXM6IHsnaWQnOiBmYWxzZSwgJ2NvdW50eSc6IGZhbHNlLCAnc2VhcmNoJzogJyd9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWFfbGlzdC9hcmVhX2xpc3QuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXJlYXNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUuY2FyZHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvY2FyZHMnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3VzZXJfY2FyZHMvdXNlcl9jYXJkcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdVc2VyQ2FyZHNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUuZmF2b3JpdGVzJywge1xuICAgICAgICAgICAgdXJsOiAnL2Zhdm9yaXRlcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmF2b3JpdGVzL2Zhdm9yaXRlcy5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUuZmlzaGVzJywge1xuICAgICAgICAgICAgdXJsOiAnL2Zpc2hlcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmlzaGVzL2Zpc2hlcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdGaXNoZXNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ21lbnUuZmlzaGRldGFpbCcsIHtcbiAgICAgICAgICAgIHVybDogJy9maXNoZGV0YWlsLzppZCcsXG4gICAgICAgICAgICBwYXJhbXM6IHsnaWQnOiBmYWxzZSwgJ2Zpc2gnOiBmYWxzZX0sXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmlzaF9kZXRhaWwvZmlzaF9kZXRhaWwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRmlzaERldGFpbEN0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnbWVudS5tYXAnLCB7XG4gICAgICAgICAgICB1cmw6ICcvbWFwJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9tYXAvbWFwLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ01hcEN0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnbWVudS50ZWNobmlxdWVzJywge1xuICAgICAgICAgICAgdXJsOiAnL3RlY2huaXF1ZXMnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3RlY2huaXF1ZXMvdGVjaG5pcXVlcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUZWNobmlxdWVzQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LnRlY2huaXF1ZWRldGFpbCcsIHtcbiAgICAgICAgICAgIHVybDogJy90ZWNobmlxdWVkZXRhaWwvOmlkJyxcbiAgICAgICAgICAgIHBhcmFtczogeydpZCc6IGZhbHNlLCAndGVjaCc6IGZhbHNlfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy90ZWNobmlxdWVfZGV0YWlsL3RlY2huaXF1ZV9kZXRhaWwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVGVjaG5pcXVlRGV0YWlsQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdtZW51LnJlcG9ydCcsIHtcbiAgICAgICAgICAgIHVybDogJy9yZXBvcnQnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlcG9ydC9yZXBvcnQuaHRtbCdcbiAgICAgICAgfSlcblxuICAgICAgICAuc3RhdGUoJ21lbnUuYXJlYScsIHtcbiAgICAgICAgICAgIHVybDogJy9hcmVhLzppZCcsXG4gICAgICAgICAgICB2aWV3czoge1xuICAgICAgICAgICAgICAgICdAbWVudSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvYXJlYS5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFDdHJsJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdpbmZvQG1lbnUuYXJlYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvaW5mby5odG1sJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ21hcEBtZW51LmFyZWEnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hcmVhL21hcC5odG1sJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2Zpc2hpbmZvQG1lbnUuYXJlYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvZmlzaC5odG1sJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2NhcmRzQG1lbnUuYXJlYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvY2FyZHMuaHRtbCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbl0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJywgW10pO1xuYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5kaXJlY3RpdmVzJywgW10pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ0Fib3V0Q3RybCcsIFsnJHNjb3BlJywnJGNvcmRvdmFBcHBWZXJzaW9uJywgJyRpb25pY1BsYXRmb3JtJywgJ1VwZGF0ZScsIGZ1bmN0aW9uKCRzY29wZSwgJGNvcmRvdmFBcHBWZXJzaW9uLCAkaW9uaWNQbGF0Zm9ybSwgVXBkYXRlKSB7XG5cdCRzY29wZS52ZXJzaW9uID0gJHNjb3BlLmRiRGF0ZSA9ICdPa8OkbnQnO1xuICAgICRzY29wZS51cGRhdGUgPSBVcGRhdGU7XG5cblx0JGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAod2luZG93LmNvcmRvdmEpIHtcblx0XHQkY29yZG92YUFwcFZlcnNpb24uZ2V0QXBwVmVyc2lvbigpLnRoZW4oZnVuY3Rpb24odmVyc2lvbikge1xuXHRcdCAgICBjb25zb2xlLmxvZygnaUZpc2tlIHZlcnNpb246JywgdmVyc2lvbik7XG5cdFx0ICAgICRzY29wZS52ZXJzaW9uID0gdmVyc2lvbjtcblx0XHR9KTtcblx0ICAgIH1cblx0fSk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdBcmVhQ3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJGlvbmljSGlzdG9yeScsXG4gICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgJ0RCJyxcbiAgICAnJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZScsXG4gICAgJyRpb25pY01vZGFsJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRpb25pY0hpc3RvcnksIGxvY2FsU3RvcmFnZSwgICRzdGF0ZVBhcmFtcywgREIsICRpb25pY1NsaWRlQm94RGVsZWdhdGUsICRpb25pY01vZGFsKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCRzY29wZSk7XG5cbiAgICAgICAgJHNjb3BlLm1hcCA9IHtcbiAgICAgICAgICAgIGNlbnRlcjoge31cbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmltYWdlX2VuZHBvaW50ID0gJ2h0dHA6Ly93d3cuaWZpc2tlLnNlJztcblxuICAgICAgICB2YXIgaWNvbnMgPSB7fTtcbiAgICAgICAgLy8gQXJlYWluZm9cbiAgICAgICAgREIuZ2V0QXJlYSgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGFyZWEpIHtcbiAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyID0ge1xuICAgICAgICAgICAgICAgIGxhdDogYXJlYS5sYXQsXG4gICAgICAgICAgICAgICAgbG5nOiBhcmVhLmxuZyxcbiAgICAgICAgICAgICAgICB6b29tOiBOdW1iZXIoYXJlYS56b29tKSA/IE51bWJlcihhcmVhLnpvb20pIDogOVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRzY29wZS5pbWFnZXMgPSBhcmVhLmltYWdlcztcblxuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS51cGRhdGUoKTtcbiAgICAgICAgICAgICRzY29wZS5hcmVhID0gYXJlYTtcblxuICAgICAgICAgICAgREIuZ2V0T3JnYW5pemF0aW9uKGFyZWEub3JnaWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihvcmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JnID0gb3JnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBEQi5nZXRQb2lUeXBlcygpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihwb2lfdHlwZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaV90eXBlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHBvaV90eXBlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWNvbnNbdHlwZS5JRF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaHR0cDovL3d3dy5pZmlza2Uuc2UvJyArIHR5cGUuaWNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25BbmNob3I6ICAgWzE2LCAzN10gLy8gcG9pbnQgb2YgdGhlIGljb24gd2hpY2ggd2lsbCBjb3JyZXNwb25kIHRvIG1hcmtlcidzIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIERCLmdldFBvaXMoYXJlYS5vcmdpZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihwb2lzKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2VycyA9IHBvaXMubWFwKGZ1bmN0aW9uKHBvaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3BvaXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogcG9pLmxhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcG9pLmxvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zW3BvaS50eXBlXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwb2kudFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBEQi5nZXRQb2x5Z29ucyhhcmVhLm9yZ2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHBvbHlnb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAucGF0aHMgPSBwb2x5Z29ucy5tYXAoZnVuY3Rpb24ocG9seSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRsbmdzOiBKU09OLnBhcnNlKCdbJyArIHBvbHkucG9seSArICddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBvbHkuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogcG9seS5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwb2x5Z29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgREIuZ2V0QXJlYUZpc2hlcygkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGZpc2hlcykge1xuICAgICAgICAgICAgJHNjb3BlLmZpc2hlcyA9IGZpc2hlcztcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBEQi5nZXRQcm9kdWN0c0J5QXJlYSgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHByb2R1Y3RzKSB7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdHMgPSBwcm9kdWN0cztcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBBcmVhIGZpc2hlc1xuICAgICAgICAkc2NvcGUuc29ydG9yZGVyID0gJy1hbW91bnQnO1xuXG4gICAgICAgIC8vQXJlYV9DYXJkc1xuICAgICAgICAkc2NvcGUuc21zdGVybXMgPSBsb2NhbFN0b3JhZ2UuZ2V0KCdzbXNfdGVybXMnKTtcbiAgICAgICAgJHNjb3BlLnByZWRpY2F0ZSA9ICdzbyc7XG5cbiAgICAgICAgLy9TTVMtbW9kYWxcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL2FyZWEvc21zX21vZGFsLmh0bWwnLCB7XG4gICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICRzY29wZS5zbXNfbW9kYWwgPSBtb2RhbDtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS5vcGVuTW9kYWwgPSBmdW5jdGlvbihwcm9kdWN0KSB7XG4gICAgICAgICAgICAkc2NvcGUuc21zX21vZGFsLnNob3coKTtcbiAgICAgICAgICAgICRzY29wZS5wcm9kdWN0ID0gcHJvZHVjdDtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmNsb3NlTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5zbXNfbW9kYWwuaGlkZSgpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuc2hvd1Rlcm1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2hvd2luZ3Rlcm1zID0gISRzY29wZS5zaG93aW5ndGVybXM7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5zaG93aW5ndGVybXMgPSBmYWxzZTtcblxuICAgICAgICAvL1J1bGVzIG1vZGFsXG4gICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY29tcG9uZW50cy9hcmVhL3J1bGVzX21vZGFsLmh0bWwnLCB7XG4gICAgICAgICAgICBzY29wZTogJHNjb3BlLFxuICAgICAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbCA9IG1vZGFsO1xuICAgICAgICB9KTtcbiAgICAgICAgJHNjb3BlLm9wZW5SdWxlc01vZGFsID0gZnVuY3Rpb24ocHJvZHVjdCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsLnNob3coKTtcbiAgICAgICAgICAgICRzY29wZS5wcm9kdWN0ID0gcHJvZHVjdDtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmNsb3NlUnVsZXNNb2RhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsLmhpZGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLnNtc19tb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy9NYXBcbiAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLm1hcCwge1xuICAgICAgICAgICAgbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgYmFzZWxheWVyczoge1xuICAgICAgICAgICAgICAgICAgICBtYXBib3g6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdNYXBib3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3h5eicsXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve21hcHR5cGV9L3t6fS97eH0ve3l9QDJ4LnBuZz9hY2Nlc3NfdG9rZW49e2FwaWtleX0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwdHlwZTogJ21hcGJveC5vdXRkb29ycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpa2V5OiAncGsuZXlKMUlqb2liV0ZwYzNSb2J5SXNJbUVpT2lJM1VtczVSMEl3SW4wLkRPaFU4MWNsSExFaFRqODFESU9qZGcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIHBvaXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdMOkbGxlbicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2VyY2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZUNsdXN0ZXJpbmdBdFpvb206IDksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2h1bmtlZExvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHM6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXRoczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdBcmVhc0N0cmwnLCBbJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnJGlvbmljU2Nyb2xsRGVsZWdhdGUnICwnREInLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgJGlvbmljU2Nyb2xsRGVsZWdhdGUgLERCKSB7XG5cbiAgICB2YXIgY29weSA9ICRzdGF0ZVBhcmFtcy5zZWFyY2g7XG4gICAgJHNjb3BlLnNlYXJjaCA9IGNvcHk7XG4gICAgJHNjb3BlLmNvdW50eSA9ICRzdGF0ZVBhcmFtcy5jb3VudHk7XG4gICAgREIuc2VhcmNoKCcnLCAkc3RhdGVQYXJhbXMuaWQpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgJHNjb3BlLmFyZWFzID0gZGF0YTtcbiAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9KTtcbiAgICAkc2NvcGUuY2xlYXJTZWFyY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJHNjb3BlLnNlYXJjaCA9ICcnO1xuICAgIH07XG4gICAgJHNjb3BlLnNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkaW9uaWNTY3JvbGxEZWxlZ2F0ZS5zY3JvbGxUb3AoKTtcbiAgICB9O1xuXG59XSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0NvbnRhY3RDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJ2xvY2FsU3RvcmFnZScsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCBsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgJHNjb3BlLmNvbnRhY3RJbmZvID0gbG9jYWxTdG9yYWdlLmdldCgnY29udGFjdEluZm8nKTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0NvdW50aWVzQ3RybCcsIFsnJHNjb3BlJywgJ0RCJywgZnVuY3Rpb24oJHNjb3BlLCBEQikge1xuICAgIERCLmdldENvdW50aWVzKClcbiAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICRzY29wZS5jb3VudGllcyA9IGRhdGE7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdGaXNoRGV0YWlsQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsICdEQicsIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBEQikge1xuICAgICRzY29wZS5maXNoID0gJHN0YXRlUGFyYW1zLmZpc2g7XG4gICAgJHNjb3BlLmltYWdlX2VuZHBvaW50ID0gJ2h0dHA6Ly93d3cuaWZpc2tlLnNlJztcbiAgICBpZighJHNjb3BlLmZpc2gpIHtcbiAgICAgICAgREIuZ2V0RmlzaCgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5maXNoID0gZGF0YTtcbiAgICBjb25zb2xlLmxvZygkc2NvcGUuZmlzaCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCRzY29wZS5maXNoKTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0Zpc2hlc0N0cmwnLCBbJyRzY29wZScsICdEQicsIGZ1bmN0aW9uKCRzY29wZSwgREIpIHtcbiAgICAkc2NvcGUuc29ydG9yZGVyID0gJ3NvJztcbiAgICAkc2NvcGUuaW1hZ2VfZW5kcG9pbnQgPSAnaHR0cDovL3d3dy5pZmlza2Uuc2UnO1xuICAgIERCLmdldEZpc2hlcygpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuZmlzaGVzID0gZGF0YTtcbiAgICAgICAgJHNjb3BlLmRlZmF1bHRfaW1nID0gZGF0YVswXS5pbWc7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdIb21lQ3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnJHN0YXRlJyxcbiAgICAnJGlvbmljSGlzdG9yeScsXG4gICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgJ3Nlc3Npb25EYXRhJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGlvbmljSGlzdG9yeSwgbG9jYWxTdG9yYWdlLCBzZXNzaW9uRGF0YSkge1xuXG4gICAgICAgICRzY29wZS5sb2dnZWRJbiA9IHNlc3Npb25EYXRhO1xuXG4gICAgICAgIC8vIEN1cnJlbnQgaGlzdG9yeSBzdGFjayBJZC4gU2VlIGFyZWFfY29udHJvbGxlciBmb3IgdXNhZ2UuXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXQoJ2hvbWVIaXN0b3J5SWQnLCAkaW9uaWNIaXN0b3J5LmN1cnJlbnRIaXN0b3J5SWQoKSk7XG5cbiAgICAgICAgJHNjb3BlLm15RnVuYyA9IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgaWYoJGV2ZW50LmtleUNvZGUgPT0gMTMgJiYgISRldmVudC5zaGlmdEtleSkgeyAvL2lmIGVudGVyLWtleVxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbWVudS5hcmVhcycsIHtzZWFyY2g6ICRldmVudC5zcmNFbGVtZW50LnZhbHVlfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0xlZ2FsQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgbG9jYWxTdG9yYWdlKSB7XG4gICAgJHNjb3BlLnRvcyA9IGxvY2FsU3RvcmFnZS5nZXQoJ3RvcycpO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJ1VwZGF0ZScsICckaW9uaWNMb2FkaW5nJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsIFVwZGF0ZSwgJGlvbmljTG9hZGluZykge1xuICAgIC8vJHNjb3BlLnVzZXIgPSB7fTtcbiAgICAkc2NvcGUuc2lnbkluID0gZnVuY3Rpb24obG9naW5Gb3JtKSB7XG4gICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG4gICAgICAgIFVwZGF0ZS51c2VyX2xvZ2luKGxvZ2luRm9ybS51c2VybmFtZS4kdmlld1ZhbHVlLCBsb2dpbkZvcm0ucGFzc3dvcmQuJHZpZXdWYWx1ZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICBsb2dpbkZvcm0uJHNldFZhbGlkaXR5KFwibG9naW5FcnJvclwiLCB0cnVlKTtcbiAgICAgICAgICAgICRzdGF0ZS5nbygnbWVudS5ob21lJyk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgIGxvZ2luRm9ybS4kc2V0VmFsaWRpdHkoXCJsb2dpbkVycm9yXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGVycm9yLnJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9O1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignTWFwQ3RybCcsIFtcbiAgICAnJHNjb3BlJyxcbiAgICAnbGVhZmxldERhdGEnLFxuICAgICdEQicsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCBsZWFmbGV0RGF0YSwgREIpIHtcbiAgICAgICAgREIuc2VhcmNoKCcnKS50aGVuKGZ1bmN0aW9uKGFyZWFzKSB7XG4gICAgICAgICAgICAkc2NvcGUubWFya2VycyA9IGFyZWFzLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdmaXNoYXJlYXMnLFxuICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0LFxuICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG5nLFxuICAgICAgICAgICAgICAgICAgICBnZXRNZXNzYWdlU2NvcGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld19zY29wZSA9ICRzY29wZS4kbmV3KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfc2NvcGUuYXJlYSA9IGE7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3X3Njb3BlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGEgdWktc3JlZj1cIm1lbnUuYXJlYSh7aWQ6IGFyZWEuSUQgfSlcIj57e2FyZWEudH19PC9hPidcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgIGxhdDogNjIuMCxcbiAgICAgICAgICAgICAgICBsbmc6IDE1LjAsXG4gICAgICAgICAgICAgICAgem9vbTogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxheWVyczoge1xuICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFwYm94OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTWFwYm94JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4eXonLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3ttYXB0eXBlfS97en0ve3h9L3t5fUAyeC5wbmc/YWNjZXNzX3Rva2VuPXthcGlrZXl9JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHR5cGU6ICdtYXBib3gub3V0ZG9vcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaWtleTogJ3BrLmV5SjFJam9pYldGcGMzUm9ieUlzSW1FaU9pSTNVbXM1UjBJd0luMC5ET2hVODFjbEhMRWhUajgxRElPamRnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvdmVybGF5czoge1xuICAgICAgICAgICAgICAgICAgICBmaXNoYXJlYXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdGaXNrZW9tcsOlZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtYXJrZXJjbHVzdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbTogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua2VkTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ01lbnVDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckc3RhdGUnLFxuICAgICckaW9uaWNQb3BvdmVyJyxcbiAgICAnc2Vzc2lvbkRhdGEnLFxuICAgICdVcGRhdGUnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCAkaW9uaWNQb3BvdmVyLCBzZXNzaW9uRGF0YSwgVXBkYXRlKSB7XG5cbiAgICAkc2NvcGUuc2Vzc2lvbkRhdGEgPSBzZXNzaW9uRGF0YTtcblxuICAgICRpb25pY1BvcG92ZXIuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL21lbnUvcG9wb3Zlci5odG1sJywge1xuICAgICAgICBzY29wZTogJHNjb3BlXG4gICAgfSkudGhlbihmdW5jdGlvbihwb3BvdmVyKSB7XG4gICAgICAgICRzY29wZS5wb3BvdmVyID0gcG9wb3ZlcjtcbiAgICB9KTtcblxuICAgICRzY29wZS51c2VyaW5mbyA9IGZ1bmN0aW9uKCkge1xuXHQkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG5cdCRzdGF0ZS5nbygnbWVudS51c2VyaW5mbycpO1xuICAgIH07XG4gICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuXHQkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG5cdFVwZGF0ZS51c2VyX2xvZ291dCgpO1xuXG5cdCRzdGF0ZS5nbygnc3RhcnQubG9naW4nKTtcbiAgICB9O1xuICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuXHQkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG5cdCRzdGF0ZS5nbygnc3RhcnQubG9naW4nKTtcbiAgICB9O1xuICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKCkge1xuXHQkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG5cdCRzdGF0ZS5nbygnc3RhcnQucmVnaXN0ZXIuZGV0YWlscycpO1xuICAgIH07XG5cbiAgICAkc2NvcGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFVwZGF0ZS5mb3JjZWRVcGRhdGUoKTtcbiAgICB9O1xuXG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZScsXG4gICAgJyRpb25pY0xvYWRpbmcnLFxuICAgICckaW9uaWNNb2RhbCcsXG4gICAgJyRpb25pY1Njcm9sbERlbGVnYXRlJyxcbiAgICAnQVBJJyxcbiAgICAnbG9jYWxTdG9yYWdlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgJGlvbmljTG9hZGluZywgJGlvbmljTW9kYWwsICRpb25pY1Njcm9sbERlbGVnYXRlLCBBUEksIGxvY2FsU3RvcmFnZSkge1xuXG4gICAgdmFyIHVzZXJuYW1lO1xuXG4gICAgLy8gTGl2ZSBjaGVjayBmb3IgdXNlcm5hbWUgYXZhaWxhYmlsaXR5XG4gICAgJHNjb3BlLmNoZWNrVXNlcm5hbWUgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBBUEkudXNlcl9leGlzdHMoaW5wdXQuJHZpZXdWYWx1ZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaW5wdXQuJHNldFZhbGlkaXR5KCduYW1lVGFrZW4nLCAhZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBMaXZlIGNoZWNrIGZvciBlbWFpbCBhdmFpbGFiaWxpdHlcbiAgICAkc2NvcGUuY2hlY2tFbWFpbCA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIEFQSS51c2VyX2V4aXN0cyhudWxsLCBpbnB1dC4kdmlld1ZhbHVlKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICBpbnB1dC4kc2V0VmFsaWRpdHkoJ2VtYWlsVGFrZW4nLCAhZGF0YSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuICAgIC8vIFZhbGlkYXRpb24gZXJyb3JzIG5vdCB0aWVkIHRvIGlucHV0IGZpZWxkXG4gICAgJHNjb3BlLmZvcm1FcnJvcnMgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIHJlZ2lzdGVyXG4gICAgICogU3VibWl0IGhhbmRsZXIgZm9yIHRoZSByZWdpc3RyYXRpb24gZm9ybVxuICAgICAqL1xuICAgICRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgLy8gU2F2ZSBwaG9uZSBudW1iZXIgZm9yIG5leHQgdmlld1xuICAgICAgICAkc2NvcGUucGhvbmUgPSBmb3JtLnBob25lLiR2aWV3VmFsdWU7XG5cbiAgICAgICAgLy8gU2F2ZSB1c2VybmFtZSBmb3IgdmVyaWZ5IHN1Ym1pdCBoYW5kbGVyXG4gICAgICAgIHVzZXJuYW1lID0gZm9ybS51c2VybmFtZS4kdmlld1ZhbHVlO1xuXG4gICAgICAgIHZhciBwYXNzd29yZCA9IGZvcm0ucGFzc3dvcmQuJHZpZXdWYWx1ZTtcbiAgICAgICAgdmFyIGZ1bGxuYW1lID0gZm9ybS5mdWxsbmFtZS4kdmlld1ZhbHVlO1xuICAgICAgICB2YXIgZW1haWwgPSBmb3JtLmVtYWlsLiR2aWV3VmFsdWU7XG5cbiAgICAgICAgQVBJLnVzZXJfcmVnaXN0ZXIodXNlcm5hbWUsIGZ1bGxuYW1lLCBwYXNzd29yZCwgZW1haWwsICRzY29wZS5waG9uZSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgLy8gU3VjY2VzczogR28gdG8gdmVyaWZ5IGFjY291bnQgdmlld1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ14udmVyaWZ5Jyk7XG5cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRXJyb3I6IEluZm9ybSB0aGUgdXNlciBhYm91dCBmYWlsZWQgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgKiBTZWUgQVBJIGRvY3VtZW50YXRpb24gZm9yIGVycm9yIGNvZGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICRzY29wZS5mb3JtRXJyb3JzLnJlZ2lzdHJhdGlvbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICRpb25pY1Njcm9sbERlbGVnYXRlLnNjcm9sbFRvcCh0cnVlKTtcblxuICAgICAgICAgICAgLy8gSW52YWxpZCBFbWFpbFxuICAgICAgICAgICAgaWYgKGVycm9yLmVycm9yX2NvZGUgPT0gOCkge1xuICAgICAgICAgICAgICAgIGZvcm0uZW1haWwuJHNldFZhbGlkaXR5KCdpbnZhbGlkRW1haWwnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2VybmFtZSBvciBFbWFpbCBhbHJlYWR5IHJlZ2lzdGVyZWRcbiAgICAgICAgICAgIGlmIChlcnJvci5lcnJvcl9jb2RlID09IDkpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tVc2VybmFtZShmb3JtLnVzZXJuYW1lKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tFbWFpbChmb3JtLmVtYWlsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEludmFsaWQgcGhvbmUgbnVtYmVyXG4gICAgICAgICAgICBpZiAoZXJyb3IuZXJyb3JfY29kZSA9PSAxMCkge1xuICAgICAgICAgICAgICAgIGZvcm0ucGhvbmUuJHNldFZhbGlkaXR5KCdpbnZhbGlkUGhvbmUnLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiB2ZXJpZnlcbiAgICAgKiBTdWJtaXQgaGFuZGxlciBmb3IgdGhlIHZlcmlmaWNhdGlvbiBmb3JtXG4gICAgICovXG4gICAgJHNjb3BlLnZlcmlmeSA9IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgdmFyIHZlcmNvZGUgPSBmb3JtLnZlcmNvZGU7XG5cbiAgICAgICAgQVBJLnVzZXJfY29uZmlybSh1c2VybmFtZSwgdmVyY29kZS4kdmlld1ZhbHVlKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ3N0YXJ0LmxvZ2luJyk7XG4gICAgICAgICAgICB2ZXJjb2RlLiRzZXRWYWxpZGl0eShcInZlcmlmaWVkXCIsIHRydWUpO1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG5cbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgIHZlcmNvZGUuJHNldFZhbGlkaXR5KFwidmVyaWZpZWRcIiwgZmFsc2UpO1xuICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUudG9zID0gbG9jYWxTdG9yYWdlLmdldCgndG9zJyk7XG4gICAgLy9Nb2RhbCB3aXRoIHRoZSBFVUxBXG4gICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL3JlZ2lzdGVyL2V1bGEuaHRtbCcsIHtcbiAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgYW5pbWF0aW9uOiAnc2xpZGUtaW4tdXAnXG4gICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAkc2NvcGUuZXVsYSA9IG1vZGFsO1xuICAgIH0pO1xuICAgICRzY29wZS5zaG93RXVsYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkc2NvcGUuZXVsYS5zaG93KCk7XG4gICAgfTtcbiAgICAkc2NvcGUuY2xvc2VFdWxhID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5ldWxhLmhpZGUoKTtcbiAgICB9O1xuICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5ldWxhLnJlbW92ZSgpO1xuICAgIH0pO1xuXG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdUZWNobmlxdWVEZXRhaWxDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJ0RCJywgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgREIsICRpb25pY1NsaWRlQm94RGVsZWdhdGUpIHtcbiAgICAkc2NvcGUuaW1hZ2VfZW5kcG9pbnQgPSAnaHR0cDovL3d3dy5pZmlza2Uuc2UnO1xuICAgICRzY29wZS50ZWNoID0gJHN0YXRlUGFyYW1zLnRlY2g7XG4gICAgJHNjb3BlLmltYWdlcyA9IFtdO1xuXG4gICAgaWYoISRzY29wZS50ZWNoKSB7XG4gICAgICAgIERCLmdldFRlY2huaXF1ZSgkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5pbWFnZXMgPSBbZGF0YS5pbWcxLCBkYXRhLmltZzIsIGRhdGEuaW1nM10uZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEvXFwvJC8udGVzdChlbCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS51cGRhdGUoKTtcbiAgICAgICAgICAgICRzY29wZS50ZWNoID0gZGF0YTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkc2NvcGUudGVjaDtcbiAgICAgICAgJHNjb3BlLmltYWdlcyA9IFtkYXRhLmltZzEsIGRhdGEuaW1nMiwgZGF0YS5pbWczXS5maWx0ZXIoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAhL1xcLyQvLnRlc3QoZWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLnVwZGF0ZSgpO1xuICAgIH1cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1RlY2huaXF1ZXNDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgREIuZ2V0VGVjaG5pcXVlcygpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgJHNjb3BlLnRlY2huaXF1ZXMgPSBkYXRhO1xuICAgIH0pO1xuICAgICRzY29wZS5pbWFnZV9lbmRwb2ludCA9ICdodHRwOi8vd3d3LmlmaXNrZS5zZSc7XG4gICAgJHNjb3BlLnNvcnRvcmRlciA9ICdzbyc7XG5cbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1VzZXJDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgREIuZ2V0VXNlckluZm8oKVxuICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgJHNjb3BlLnVzZXIgPSB1c2VyO1xuICAgIH0pO1xuICAgIERCLmdldFVzZXJOdW1iZXJzKClcbiAgICAudGhlbihmdW5jdGlvbihudW1iZXJzKSB7XG4gICAgICAgICRzY29wZS5udW1iZXJzID0gbnVtYmVycztcbiAgICB9KTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ1VzZXJDYXJkc0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZVBhcmFtcycsXG4gICAgJ0RCJyxcbiAgICAnJGlvbmljTW9kYWwnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBEQiwgJGlvbmljTW9kYWwpIHtcbiAgICAgICAgJHNjb3BlLnByZWQgPSAnLXRvJztcbiAgICAgICAgJHNjb3BlLmVuZHBvaW50ID0gJ2h0dHBzOi8vd3d3LmlmaXNrZS5zZSc7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVFbnRlcicsIGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgJHNjb3BlLm5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBEQi5nZXRVc2VyUHJvZHVjdHMoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9kdWN0cyA9IGRhdGE7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG4gICAgICAgIC8vdXNlIHRoZSBzYW1lIG1vZGFsIGFzIGluIGFyZWFfY2FyZHNcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL2FyZWFfY2FyZHMvcnVsZXNfbW9kYWwuaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsID0gbW9kYWw7XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUub3BlblJ1bGVzTW9kYWwgPSBmdW5jdGlvbihwcm9kdWN0KSB7XG4gICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwuc2hvdygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvZHVjdCk7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdCA9IHByb2R1Y3Q7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jbG9zZVJ1bGVzTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5oaWRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXSk7XG4iLCIoZnVuY3Rpb24oYW5ndWxhciwgdW5kZWZpbmVkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5hcGknLCBbJ2lmaXNrZS51dGlscyddKVxuICAgIC5wcm92aWRlcignQVBJJywgZnVuY3Rpb24gQVBJUHJvdmlkZXIoKSB7XG5cbiAgICAgICAgdGhpcy5iYXNlX3VybCA9ICdodHRwczovL3d3dy5pZmlza2Uuc2UvYXBpL3YyL2FwaS5waHAnO1xuXG4gICAgICAgIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaHR0cCcsXG4gICAgICAgICAgICAnc2Vzc2lvbkRhdGEnLFxuICAgICAgICAgICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgICAgICAgICAnJHEnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJGh0dHAsIHNlc3Npb25EYXRhLCBsb2NhbFN0b3JhZ2UsICRxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhc2VfdXJsID0gdGhpcy5iYXNlX3VybDtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqICMgYXBpX2NhbGwgI1xuICAgICAgICAgICAgICAgICAqIGhhbmRsZXMgaHR0cCByZXF1ZXN0c1xuICAgICAgICAgICAgICAgICAqIHJldHVybnMgYSAkaHR0cCBvYmplY3QgZm9yIHRoZSByZXF1ZXN0ZWQgYXBpIGNhbGxcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICB2YXIgYXBpX2NhbGwgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6J2dldCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogYmFzZV91cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogYW5ndWxhci5leHRlbmQocGFyYW1zLCB7J2tleSc6ICcwMTIzNDU2Nzg5YWJjZGVmJ30pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lb3V0OiA1MDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvRG86IFByb3BlciBsb2dnaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoZGF0YS5kYXRhLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Vycm9yIGdldHMgKGRhdGEsIHN0YXR1cywgaGVhZGVycywgY29uZmlnLCBzdGF0dXNUZXh0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqICMgc2Vzc2lvbl9hcGlfY2FsbCAjXG4gICAgICAgICAgICAgICAgICogd3JhcHBlciBmb3IgYXBpX2NhbGwgLSBpbnNlcnRzIHRoZSBzZXNzaW9uIHRva2VuIGludG8gcGFyYW1zXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNlc3Npb25fYXBpX2NhbGwgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBzZXNzaW9uRGF0YS50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKGFuZ3VsYXIuZXh0ZW5kKHBhcmFtcywge3M6IHNlc3Npb259KSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGdldF9tdW5pY2lwYWxpdGllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfbXVuaWNpcGFsaXRpZXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9jb3VudGllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfY291bnRpZXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfZXhpc3RzOiBmdW5jdGlvbih1c2VybmFtZSwgZW1haWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmdzID0ge206ICd1c2VyX2V4aXN0cyd9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHVzZXJuYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MudXNlcm5hbWUgPSB1c2VybmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZW1haWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy5lbWFpbCA9IGVtYWlsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoYXJncyk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfcmVnaXN0ZXI6IGZ1bmN0aW9uKHVzZXJuYW1lLCBmdWxsbmFtZSwgcGFzc3dvcmQsIGVtYWlsLCBwaG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAndXNlcl9yZWdpc3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGZ1bGxuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHBob25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfY29uZmlybTogZnVuY3Rpb24odXNlcm5hbWUsIHBpbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAndXNlcl9jb25maXJtJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW46IHBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2luZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25fYXBpX2NhbGwoe206ICd1c2VyX2luZm8nfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbG9naW46IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAndXNlcl9sb2dpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25EYXRhLnNldFRva2VuKGRhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCB3ZSBjYW4gY2hhaW4gdGhpcyBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2xvZ291dDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uX2FwaV9jYWxsKHttOiAndXNlcl9sb2dvdXQnfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uRGF0YS5kZWxldGVUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfcHJvZHVjdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25fYXBpX2NhbGwoe206ICd1c2VyX3Byb2R1Y3RzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfZmlzaGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9maXNoZXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF90ZWNobmlxdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF90ZWNobmlxdWVzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfYmFpdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X2JhaXRzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfb3JnYW5pemF0aW9uczogZnVuY3Rpb24ob3JnaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTogJ2dldF9vcmdhbml6YXRpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdpZDogb3JnaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfb3JnX21vZGlmaWVkOiBmdW5jdGlvbihvcmdpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtOiAnZ2V0X29yZ19tb2RpZmllZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnaWQ6IG9yZ2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X2FyZWFzOiBmdW5jdGlvbihhcmVhaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTogJ2dldF9hcmVhcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlYWlkOiBhcmVhaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfYXJlYXNfbW9kaWZpZWQ6IGZ1bmN0aW9uKGFyZWFpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtOiAnZ2V0X2FyZWFzX21vZGlmaWVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhaWQ6IGFyZWFpZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9wcm9kdWN0czogZnVuY3Rpb24oYXJlYWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG06ICdnZXRfcHJvZHVjdHMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFpZDogYXJlYWlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X3J1bGVzOiBmdW5jdGlvbihydWxlaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTogJ2dldF9ydWxlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZWlkOiBydWxlaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfcGhvdG9zOiBmdW5jdGlvbihvcmdpZCwgYXJlYWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG06ICdnZXRfcGhvdG9zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdpZDogb3JnaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlYWlkOiBhcmVhaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfbWFwX3BvaXM6IGZ1bmN0aW9uKG9yZ2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG06ICdnZXRfbWFwX3BvaXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2lkOiBvcmdpZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9tYXBfcG9pX3R5cGVzIDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfbWFwX3BvaV90eXBlcyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X21hcF9wb2x5Z29uczogZnVuY3Rpb24ob3JnaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG06ICdnZXRfbWFwX3BvbHlnb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnaWQ6IG9yZ2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfZ2V0X2Zhdm9yaXRlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvbl9hcGlfY2FsbCh7bTogJ3VzZXJfZ2V0X2Zhdm9yaXRlcyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X3Rlcm1zX29mX3NlcnZpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X3Rlcm1zX29mX3NlcnZpY2UnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9jb250YWN0X2luZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X2NvbnRhY3RfaW5mbyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X2VuZ2luZV9wb2xpY2llczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfZW5naW5lX3BvbGljaWVzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfc21zX3Rlcm1zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9zbXNfdGVybXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdpZmlza2UuZGInLCBbXSlcbiAgICAucHJvdmlkZXIoJ0RCJywgZnVuY3Rpb24gREJQcm92aWRlcigpIHtcblxuICAgICAgICB0aGlzLiRnZXQgPSBbXG4gICAgICAgICAgICAnJGNvcmRvdmFTUUxpdGUnLFxuICAgICAgICAgICAgJ0FQSScsXG4gICAgICAgICAgICAnJHEnLFxuICAgICAgICAgICAgZnVuY3Rpb24oJGNvcmRvdmFTUUxpdGUsIEFQSSwgJHEpIHtcblxuICAgICAgICAgICAgICAgIHZhciBkYjtcbiAgICAgICAgICAgICAgICBpZiAod2luZG93LnNxbGl0ZVBsdWdpbikge1xuICAgICAgICAgICAgICAgICAgICBkYiA9ICRjb3Jkb3ZhU1FMaXRlLm9wZW5EQignZmlza2ViYXNlbi5kYicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm9wZW5EYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgICAgICBkYiA9IHdpbmRvdy5vcGVuRGF0YWJhc2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlza2ViYXNlbi5kYicsICcxLjAnLCAnZmlza2ViYXNlbicsIDEwICogMTAyNCAqIDEwMjQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOb3Qgc3VwcG9ydGVkIG9uIHRoaXMgZGV2aWNlLCBzb3JyeScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciB0YWJsZURlZiA9IHtcbiAgICAgICAgICAgICAgICAgICAgJ0FyZWEnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydvcmdpZCcsICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydrdycsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ25vdGUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYzEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2MyJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjMycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbTEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ20yJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtMycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbGF0JywgICAncmVhbCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydsbmcnLCAgICdyZWFsJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3pvb20nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncG50JywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NhcicsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydlbmcnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaGNwJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21hcCcsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnd3NjJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkJywgICAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ0FyZWFfRmlzaCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydhaWQnLCAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZmlkJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2Ftb3VudCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjb21tZW50JywgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1Byb2R1Y3QnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndDInLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbm8nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW0nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncGYnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYWknLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydyaScsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NoJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncHJpY2UnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3NvJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaGwnLCAgICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnQ291bnR5JzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzJywgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdNdW5pY2lwYWxpdHknOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjSUQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbmFtZScsICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdGaXNoJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzbycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbWF4JywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ljb24nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW1nJywgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpbicsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2dlbycsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc2l6ZScsICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydsYXQnLCAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3JlYycsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnUnVsZSc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndmVyJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdVc2VyX1Byb2R1Y3QnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYXQnLCAgICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjb2RlJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ZyJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZnVsbG5hbWUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3QnLCAgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncmVmMScsICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydyZWYyJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3RvJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncGlkJywgICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydwZGYnLCAgICAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdVc2VyX0luZm8nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndXNlcm5hbWUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbG9nZ2VkaW4nLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSVAxJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSVAyJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbmFtZScsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZW1haWwnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY3JlYXRlZCcsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnVXNlcl9OdW1iZXInOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ251bWJlcicsICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1RlY2huaXF1ZSc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzbycsICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZGUnLCAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkYScsICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ljb24nLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW1nMScsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpbWcyJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ltZzMnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsneW91dHViZScsICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdPcmdhbml6YXRpb24nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY3AnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndXJsJywgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY28nLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ZhdCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZHAnLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydmdmEnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ29yZycsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbWwnLCAgICAgJ2ludCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdQb2knOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3JnaWQnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0eXBlJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ByaWNlJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbGEnLCAgICAgJ3JlYWwnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbG8nLCAgICAgJ3JlYWwnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnUG9pX1R5cGUnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaWNvbicsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1BvbHlnb24nOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3JnaWQnLCAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0JywgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjJywgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd2ZXInLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21vZCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncG9seScsICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdXG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZU9iamVjdCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHZhbCA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEucm93cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsLnB1c2goZGF0YS5yb3dzLml0ZW0oaSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR2YWw7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVGFibGU6IGZ1bmN0aW9uKHRhYmxlLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24odHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnREVMRVRFIEZST00gJyArIHRhYmxlICsgJzsnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpZCBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2luZ2xlRGF0YSA9IGRhdGFbaWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc2VydERhdGEgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGVEZWZbdGFibGVdLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0RGF0YS5wdXNoKHNpbmdsZURhdGFbdGFibGVEZWZbdGFibGVdW2ldWzBdXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0lOU0VSVCBJTlRPJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVkFMVUVTKD8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcsPycucmVwZWF0KGluc2VydERhdGEubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyknXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbChxdWVyeSwgaW5zZXJ0RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgY2xlYW5UYWJsZTogZnVuY3Rpb24odGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi50cmFuc2FjdGlvbihmdW5jdGlvbih0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eC5leGVjdXRlU3FsKCdERUxFVEUgRlJPTSAnICsgdGFibGUgKyAnOycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIERyb3BzIGFsbCB0YWJsZXMgaW4gdGhlIGRhdGFiYXNlXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgY2xlYW5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi50cmFuc2FjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRhYmxlIGluIHRhYmxlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnRFJPUCBUQUJMRSBJRiBFWElTVFMgJyArIHRhYmxlICsgJzsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVtb3ZlZCBhbGwgdGFibGVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogSW5pdGlhbGllcyB0aGUgdGFibGVzIGluIHRoZSBkYXRhYmFzZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGluaXRcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgaW4gdGFibGVEZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IHRhYmxlRGVmW3RdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlVmFsdWVzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBCdWlsZHMgYSBzdHJpbmcgd2l0aCBcIlwiIGFyb3VuZCBhbGwgbmFtZXMsIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIGl0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBhbiBTUUwgVGFibGUgd2l0b3V0IGhhdmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogdG8gd29ycnkgYWJvdXQgdXNpbmcgcmVzZXJ2ZWQga2V5d29yZHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcy5wdXNoKCdcIicgKyB0YWJsZVtpXVswXSArICdcIiAnICsgdGFibGVbaV1bMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMgPSB0YWJsZVZhbHVlcy5qb2luKCcsICcpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVZhbHVlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLCBQUklNQVJZIEtFWSgnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIicgKyB0YWJsZVswXVswXSArICdcIicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJykpOydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbChxdWVyeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG5cblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCBhbiBhcmVhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgZ2V0QXJlYVxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0ludGVnZXJ9IGlkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRBcmVhOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gQXJlYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBpZCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFtpZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oYXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0gY3JlYXRlT2JqZWN0KGFyZWEpWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86IERCIHNob3VsZCBub3QgbmVlZCBBUElcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9waG90b3Mob2JqZWN0Lm9yZ2lkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihpbWFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5pbWFnZXMgPSBpbWFnZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKG9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRBcmVhRmlzaGVzOiBmdW5jdGlvbihhaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIEFyZWFfRmlzaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIEZpc2ggT04gQXJlYV9GaXNoLmZpZCA9IEZpc2guSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgQXJlYV9GaXNoLmFpZCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFthaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogU2VhcmNoZXMgdGhlIGRhdGFiYXNlIHVzaW5nIGEgcXVlcnlcbiAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICogVGhlIHF1ZXJ5IGlzIG1hdGNoZWQgdG8gYSBuYW1lIGFuZC9vciBrZXl3b3JkXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2Qgc2VhcmNoXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaDogZnVuY3Rpb24oc2VhcmNoc3RyaW5nLCBjb3VudHlfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIEFyZWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgdCBMSUtFID8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY291bnR5X2lkID8gJ0FORCBjMSA9ID8nIDogJycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1JERVIgQlkgdCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHlfaWQgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbJyUnICsgc2VhcmNoc3RyaW5nICsgJyUnLCBjb3VudHlfaWRdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyclJyArIHNlYXJjaHN0cmluZyArICclJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBHZXRzIGluZm9ybWF0aW9uIGFib3V0IGEgcHJvZHVjdFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGdldFByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBwcm9kdWN0X2lkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRQcm9kdWN0OiBmdW5jdGlvbihwcm9kdWN0X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIERJU1RJTkNUIFByb2R1Y3QuKiwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS50IGFzIHJ1bGVfdCwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS52ZXIgYXMgcnVsZV92ZXIsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUuZCBhcyBydWxlX2QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQcm9kdWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0pPSU4gUnVsZSBPTiBSdWxlLklEID0gUHJvZHVjdC5yaScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBJRCA9ID8nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1JERVIgQlkgc28nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3Byb2R1Y3RfaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0cyBhbGwgcHJvZHVjdHMgZnJvbSBhbiBhcmVhXG4gICAgICAgICAgICAgICAgICAgICAqIEBtZXRob2QgZ2V0UHJvZHVjdHNCeUFyZWFcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBhcmVhX2lkXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBnZXRQcm9kdWN0c0J5QXJlYTogZnVuY3Rpb24oYXJlYV9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCBESVNUSU5DVCBQcm9kdWN0LiosJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudCBhcyBydWxlX3QsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudmVyIGFzIHJ1bGVfdmVyLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLmQgYXMgcnVsZV9kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIFJ1bGUgT04gUnVsZS5JRCA9IFByb2R1Y3QucmknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgYWkgPSA/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09SREVSIEJZIHNvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFthcmVhX2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0Q291bnRpZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCBESVNUSU5DVCBDb3VudHkuKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIENvdW50eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIEFyZWEgT04gQXJlYS5jMSA9IENvdW50eS5JRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPUkRFUiBCWSBDb3VudHkudCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlclByb2R1Y3RzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgVXNlcl9Qcm9kdWN0LiosJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudCBhcyBydWxlX3QsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudmVyIGFzIHJ1bGVfdmVyLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLmQgYXMgcnVsZV9kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9Qcm9kdWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xFRlQgSk9JTiBQcm9kdWN0IE9OIFByb2R1Y3QuSUQgPSBVc2VyX1Byb2R1Y3QucGlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0xFRlQgSk9JTiBSdWxlIE9OIFJ1bGUuSUQgPSBQcm9kdWN0LnJpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRGaXNoZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqIEZST00gRmlzaCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RmlzaDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIEZpc2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgaWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRUZWNobmlxdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIFRlY2huaXF1ZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFRlY2huaXF1ZTogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIFRlY2huaXF1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBJRCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFtpZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRPcmdhbml6YXRpb246IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUICogRlJPTSBPcmdhbml6YXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgSUQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlckluZm86IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9JbmZvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QodXNlcilbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0VXNlck51bWJlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gVXNlcl9OdW1iZXInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBvaXM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgb3JnaWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRQb2lUeXBlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2lfVHlwZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9seWdvbnM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBQb2x5Z29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIG9yZ2lkID0gPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5maWx0ZXJzJywgW10pXG4uZmlsdGVyKCdvbmVicicsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKDxicj5cXHMqKSsvZywgJzxicj4nKTtcbiAgICB9O1xufSlcbi5maWx0ZXIoJ25vYnJzJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC8oPGJyKFxccypcXC8pKj4pKy9nLCAnJyk7XG4gICAgfTtcbn0pXG4uZmlsdGVyKCdjbGVhbnRhYmxlcycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyg8XFwvP3RhYmxlPikrL2csICcnKTtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC8oPFxcLz90cj4pKy9nLCAnJyk7XG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvKDxcXC8/dGg+KSsvZywgJycpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyg8KFxcLz8pdGQuKj8+KSs/L2csICc8JDJwPicpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLzxwPlxccyo8XFwvcD4vZywgJycpO1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfTtcbn0pO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdpZmlza2UudXBkYXRlJywgWydpZmlza2UuYXBpJywgJ2lmaXNrZS5kYicsICdpZmlza2UudXRpbHMnXSlcbiAgICAucHJvdmlkZXIoJ1VwZGF0ZScsIGZ1bmN0aW9uIFVwZGF0ZVByb3ZpZGVyKCkge1xuXG4gICAgICAgIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICdBUEknLFxuICAgICAgICAgICAgJ0RCJyxcbiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgICckaW9uaWNMb2FkaW5nJyxcbiAgICAgICAgICAgICdzZXNzaW9uRGF0YScsXG4gICAgICAgICAgICBmdW5jdGlvbihBUEksIERCLCBsb2NhbFN0b3JhZ2UsICRxLCAkaW9uaWNMb2FkaW5nLCBzZXNzaW9uRGF0YSkge1xuXG4gICAgICAgICAgICAgICAgdmFyIExBU1RfVVBEQVRFID0gJ2xhc3RfdXBkYXRlJztcblxuICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfYXJlYXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXNoQXJyID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpc2hlcyA9IGRhdGFba2V5XS5maXNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaXNoS2V5IGluIGZpc2hlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlzaEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSUQnOiBrZXkgKyAnXycgKyBmaXNoS2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZDogZmlzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQ6IGZpc2hlc1tmaXNoS2V5XVswXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50OiBmaXNoZXNbZmlzaEtleV1bMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQi5wb3B1bGF0ZVRhYmxlKCdBcmVhJywgZGF0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ0FyZWFfRmlzaCcsIGZpc2hBcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBBcmVhJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9wcm9kdWN0cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1Byb2R1Y3QnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFByb2R1Y3QnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2NvdW50aWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnQ291bnR5JywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBDb3VudHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X211bmljaXBhbGl0aWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnTXVuaWNpcGFsaXR5JywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBNdW5pY2lwYWxpdHknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2Zpc2hlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ0Zpc2gnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIEZpc2gnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X3J1bGVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnUnVsZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgUnVsZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfdGVjaG5pcXVlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1RlY2huaXF1ZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVGVjaG5pcXVlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9vcmdhbml6YXRpb25zKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnT3JnYW5pemF0aW9uJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBPcmdhbml6YXRpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2lzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnUG9pJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBQb2knKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2lfdHlwZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdQb2lfVHlwZScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgUG9pX1R5cGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcF9wb2x5Z29ucygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1BvbHlnb24nLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFBvbHlnb24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBwb3B1bGF0ZVVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkudXNlcl9wcm9kdWN0cygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfUHJvZHVjdCcsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVXNlcl9Qcm9kdWN0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLnVzZXJfaW5mbygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlcnMgPSBkYXRhLm51bWJlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bUFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1BcnIucHVzaCh7J251bWJlcic6IG51bWJlcnNbaV19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfSW5mbycsIFtkYXRhXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIFVzZXJfSW5mbycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfTnVtYmVyJywgbnVtQXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQgVXNlcl9OdW1iZXJzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsZWFuVXNlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIERCLmNsZWFuVGFibGUoJ1VzZXJfUHJvZHVjdCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgREIuY2xlYW5UYWJsZSgnVXNlcl9OdW1iZXInKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIERCLmNsZWFuVGFibGUoJ1VzZXJfSW5mbycpXG4gICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbW92ZWQgdXNlciBpbmZvIGZyb20gZGF0YWJhc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ291bGQgbm90IHJlbW92ZSB1c2VyIGRhdGEgZnJvbSBkYXRhYmFzZSEnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdmFyIHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbihmb3JjZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFVwZGF0ZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZm9yY2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0VXBkYXRlID0gbG9jYWxTdG9yYWdlLmdldChMQVNUX1VQREFURSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYVdlZWsgPSAxMDAwICogMzYwMCAqIDI0ICogNztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdFVwZGF0ZSA+IGFXZWVrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBEQi5pbml0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXplZCBEQiBzeXN0ZW0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbkRhdGEudG9rZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZVVzZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcHVsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZCBhbGwgdGhlIHRoaW5ncycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXQoTEFTVF9VUERBVEUsIGN1cnJlbnRUaW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIuZXJyb3JfY29kZSA9PT0gNykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBdXRoZW50aWNhdGlvbiBmYWlsdXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFNob3cgdG8gdXNlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhblVzZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLnVzZXJfbG9nb3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignR290IGFuIGVycm9yLCB3aWxsIHRyeSB0byByZWNyZWF0ZSBhbGwgdGFibGVzOicsIGVycik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLmNsZWFuKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIuaW5pdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcHVsYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUG9wdWxhdGVkIGFsbCB0aGUgdGhpbmdzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KExBU1RfVVBEQVRFLCBjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3RpbGwgZXJyb3IsIGhhbmRsZSBpdCEnLCBlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF90ZXJtc19vZl9zZXJ2aWNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCd0b3MnLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9zbXNfdGVybXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24odGVybXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdzbXNfdGVybXMnLCB0ZXJtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfY29udGFjdF9pbmZvKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdjb250YWN0SW5mbycsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzZXNzaW9uRGF0YS50b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgREIuaW5pdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6ZWQgREIgc3lzdGVtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVXNlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnIoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdub191cGRhdGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGdW5jKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZm9yY2VkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgdXNlcl9sb2dvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW5Vc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkudXNlcl9sb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9sb2dpbjogZnVuY3Rpb24odXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQVBJLnVzZXJfbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlRnVuYygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RfdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0KExBU1RfVVBEQVRFKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UudXRpbHMnLCBbXSlcblxuLmZhY3RvcnkoJ2xvY2FsU3RvcmFnZScsIFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICR3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gJHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xuICAgICAgICB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgICAgICB9XG4gICAgfTtcbn1dKVxuLnNlcnZpY2UoJ3Nlc3Npb25EYXRhJywgWydsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbihsb2NhbFN0b3JhZ2UpIHtcbiAgICB0aGlzLnRva2VuID0gbG9jYWxTdG9yYWdlLmdldCgnc2Vzc2lvbicpO1xuXG4gICAgdGhpcy5zZXRUb2tlbiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldCgnc2Vzc2lvbicsIHQpO1xuICAgICAgICB0aGlzLnRva2VuID0gdDtcbiAgICAgICAgY29uc29sZS5sb2coJ3Rva2VuIHNldCcpO1xuICAgIH07XG4gICAgdGhpcy5kZWxldGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlKCdzZXNzaW9uJyk7XG4gICAgICAgIHRoaXMudG9rZW4gPSBudWxsO1xuICAgICAgICBjb25zb2xlLmxvZygndG9rZW4gdW5zZXQnKTtcbiAgICB9O1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ25nQ29yZG92YVNtcycsIFtdKVxuLmRpcmVjdGl2ZSgnbmdDb3Jkb3ZhU21zJywgWyckY29yZG92YVNtcycsICckaW9uaWNQb3B1cCcsIGZ1bmN0aW9uKCRjb3Jkb3ZhU21zLCAkaW9uaWNQb3B1cCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycykge1xuICAgICAgICAgICAgZWwub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkaW9uaWNQb3B1cC5wcm9tcHQoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1Nrcml2IGluIGRpdHQgbmFtbicsXG4gICAgICAgICAgICAgICAgICAgIGlucHV0VHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlID0gJ0ZJU0tBICcgKyBhdHRycy5uZ0NvcmRvdmFTbXMgKyAnICcgKyBuYW1lO1xuICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNtcy5zZW5kKCc3MjQ1NicsIG1lc3NhZ2UsICdJTlRFTlQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdWNjdWVzcycpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5kaXJlY3RpdmVzJylcbiAgICAuZGlyZWN0aXZlKCdpZmlza2VJbnB1dCcsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgcmVzdHJpY3Q6ICdFJyxcblx0ICAgIHRyYW5zY2x1ZGU6IHRydWUsXG5cblx0ICAgIHNjb3BlOiB7XG5cdFx0bmFtZTogJ0AnLFxuXHRcdGlkOiAnQCcsXG5cdFx0bGFiZWw6ICdAJyxcblx0XHRwbGFjZWhvbGRlcjogJ0AnLFxuXHRcdHR5cGU6ICdAJyxcblx0XHRuZ1BhdHRlcm46ICdAJyxcblx0XHRuZ01vZGVsOiAnPT8nXG5cblx0ICAgIH0sXG5cdCAgICB0ZW1wbGF0ZVVybDogJ2RpcmVjdGl2ZXMvaW5wdXRfZmllbGQvaWZpc2tlX2lucHV0Lmh0bWwnLFxuXHQgICAgY29udHJvbGxlcjogZnVuY3Rpb24oJHNjb3BlKSB7XG5cdFx0JHNjb3BlLmlkID0gJHNjb3BlLmlkIHx8ICRzY29wZS5uYW1lO1xuXHRcdCRzY29wZS50eXBlID0gJHNjb3BlLnR5cGUgfHwgJ3RleHQnO1xuXHQgICAgfVxuXHR9XG4gICAgfSlcbiIsImFuZ3VsYXIubW9kdWxlKCdzeXN0ZW1Ccm93c2VyJywgW10pXG4uZGlyZWN0aXZlKCdzeXN0ZW1Ccm93c2VyJywgWyckY29yZG92YUluQXBwQnJvd3NlcicsIGZ1bmN0aW9uKCRjb3Jkb3ZhSW5BcHBCcm93c2VyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgJGNvcmRvdmFJbkFwcEJyb3dzZXIub3BlbihlbFswXS5ocmVmLCAnX3N5c3RlbScpO1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKVxuLmRpcmVjdGl2ZSgnZ2xvYmFsU3lzdGVtQnJvd3NlcicsIFsnJGNvcmRvdmFJbkFwcEJyb3dzZXInLCBmdW5jdGlvbigkY29yZG92YUluQXBwQnJvd3Nlcikge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsLCBhdHRycykge1xuICAgICAgICAgICAgZWwub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5ocmVmICYmIGUudGFyZ2V0Lmhvc3QgIT09IHdpbmRvdy5sb2NhdGlvbi5ob3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhSW5BcHBCcm93c2VyLm9wZW4oZS50YXJnZXQuaHJlZiwgJ19zeXN0ZW0nKTtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==