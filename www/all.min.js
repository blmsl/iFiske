angular.module("ifiske",["ionic","ifiske.controllers","ifiske.directives","ifiske.api","ifiske.db","ifiske.utils","ifiske.update","ifiske.filters","ionic.ion.headerShrink","ngCordova","systemBrowser","ngCordovaSms","ngMessages","ImgCache","leaflet-directive","tabSlideBox"]).constant("$ionicLoadingConfig",{template:"<ion-spinner></ion-spinner>"}).run(["$ionicPlatform","Update","ImgCache",function(e,t,n){e.ready(function(){window.ionic&&window.ionic.Keyboard&&window.ionic.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&StatusBar.styleDefault(),n.$init(),t.update()})}]).config(["$stateProvider","$urlRouterProvider","$ionicConfigProvider","ImgCacheProvider",function(e,t,n,o){o.setOptions({debug:!0,usePersistentCache:!0}),o.manualInit=!0,n.views.forwardCache(!0),n.backButton.previousTitleText(!1).text(""),n.tabs.position("bottom");var r="/start/login";window.localStorage.getItem("session")&&(r="/menu/home"),t.otherwise(r),e.state("start",{url:"/start","abstract":!0,templateUrl:"components/start/start.html"}).state("start.login",{url:"/login",templateUrl:"components/login/login.html",controller:"LoginCtrl"}).state("start.register",{url:"/register",templateUrl:"components/register/register.html",controller:"RegisterCtrl"}).state("start.register.details",{url:"/details",templateUrl:"components/register/register_details.html"}).state("start.register.verify",{url:"/verify",templateUrl:"components/register/register_verify.html"}).state("menu",{url:"/menu","abstract":!0,templateUrl:"components/menu/menu.html",controller:"MenuCtrl"}).state("menu.home",{url:"/home",templateUrl:"components/home/home.html",controller:"HomeCtrl"}).state("menu.info",{url:"/info",templateUrl:"components/info/info.html"}).state("menu.bugs",{url:"/info",templateUrl:"components/menu/report.html"}).state("menu.contact",{url:"/contact",templateUrl:"components/contact/contact.html",controller:"ContactCtrl"}).state("menu.legal",{url:"/legal",templateUrl:"components/legal/legal.html",controller:"LegalCtrl"}).state("menu.about",{url:"/about",templateUrl:"components/about/about.html",controller:"AboutCtrl"}).state("menu.userinfo",{url:"/userinfo",controller:"UserCtrl",templateUrl:"components/user/user.html"}).state("menu.counties",{url:"/counties",templateUrl:"components/counties/counties.html",controller:"CountiesCtrl"}).state("menu.areas",{url:"/areas",params:{id:!1,county:!1,search:""},templateUrl:"components/area_list/area_list.html",controller:"AreasCtrl"}).state("menu.cards",{url:"/cards",templateUrl:"components/user_cards/user_cards.html",controller:"UserCardsCtrl"}).state("menu.favorites",{url:"/favorites",templateUrl:"components/favorites/favorites.html"}).state("menu.fishes",{url:"/fishes",templateUrl:"components/fishes/fishes.html",controller:"FishesCtrl"}).state("menu.fishdetail",{url:"/fishdetail/:id",params:{id:!1,fish:!1},templateUrl:"components/fish_detail/fish_detail.html",controller:"FishDetailCtrl"}).state("menu.map",{url:"/map",templateUrl:"components/map/map.html",controller:"MapCtrl"}).state("menu.techniques",{url:"/techniques",templateUrl:"components/techniques/techniques.html",controller:"TechniquesCtrl"}).state("menu.techniquedetail",{url:"/techniquedetail/:id",params:{id:!1,tech:!1},templateUrl:"components/technique_detail/technique_detail.html",controller:"TechniqueDetailCtrl"}).state("menu.report",{url:"/report",templateUrl:"components/report/report.html"}).state("menu.area",{url:"/area/:id",views:{"@menu":{templateUrl:"components/area/area.html",controller:"AreaCtrl"},"info@menu.area":{templateUrl:"components/area/info.html"},"map@menu.area":{templateUrl:"components/area/map.html"},"fishinfo@menu.area":{templateUrl:"components/area/fish.html"},"cards@menu.area":{templateUrl:"components/area/cards.html"}}})}]),angular.module("ifiske.controllers",[]),angular.module("ifiske.directives",[]),angular.module("ifiske.controllers").controller("AboutCtrl",["$scope","$cordovaAppVersion","$ionicPlatform","Update",function(e,t,n,o){e.version=e.dbDate="Okänt",e.update=o,n.ready(function(){window.cordova&&t.getAppVersion().then(function(t){console.log("iFiske version:",t),e.version=t})})}]),angular.module("ifiske.controllers").controller("AreaCtrl",["$scope","$ionicHistory","localStorage","$stateParams","DB","$ionicSlideBoxDelegate","$ionicModal","$state",function(e,t,n,o,r,i,s){e.map={center:{}},e.image_endpoint="http://www.ifiske.se",e.$on("$ionicView.beforeEnter",function(){var t={};r.getArea(o.id).then(function(n){e.map.center={lat:n.lat,lng:n.lng,zoom:Number(n.zoom)?Number(n.zoom):9},e.images=n.images,i.update(),e.area=n,r.getOrganization(n.orgid).then(function(t){e.org=t}),r.getPoiTypes().then(function(o){for(var i=0;i<o.length;++i){var s=o[i];t[s.ID]={iconUrl:"http://www.ifiske.se/"+s.icon,iconAnchor:[16,37]}}r.getPois(n.orgid).then(function(n){e.map.markers=n.map(function(e){return{layer:"pois",lat:e.la,lng:e.lo,icon:t[e.type],message:e.t}})},function(e){console.error(e)}),r.getPolygons(n.orgid).then(function(t){e.map.paths=t.map(function(e){return{latlngs:JSON.parse("["+e.poly+"]"),color:e.c,weight:2,opacity:.5,fillColor:e.c,type:"polygon"}})},function(e){console.error(e)})})},function(e){console.log(e)}),r.getAreaFishes(o.id).then(function(t){e.fishes=t},function(e){console.log(e)}),r.getProductsByArea(o.id).then(function(t){e.products=t},function(e){console.log(e)})}),e.sortorder="-amount",e.smsterms=n.get("sms_terms"),e.predicate="so",s.fromTemplateUrl("components/area/sms_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.sms_modal=t}),e.openModal=function(t){e.sms_modal.show(),e.product=t},e.closeModal=function(){e.sms_modal.hide()},e.showTerms=function(){e.showingterms=!e.showingterms},e.showingterms=!1,s.fromTemplateUrl("components/area/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.sms_modal.remove(),e.rules_modal.remove()}),angular.extend(e.map,{layers:{baselayers:{mapbox:{name:"Mapbox",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{pois:{name:"Ställen",type:"markercluster",visible:!0,layerOptions:{disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}}})}]),angular.module("ifiske.controllers").controller("AreasCtrl",["$scope","$stateParams","$ionicScrollDelegate","DB",function(e,t,n,o){var r=t.search;e.search=r,e.county=t.county,o.search("",t.id).then(function(t){e.areas=t},function(e){console.log(e)}),e.clearSearch=function(){e.search=""},e.scrollTop=function(){n.scrollTop()}}]),angular.module("ifiske.controllers").controller("ContactCtrl",["$scope","$state","localStorage",function(e,t,n){e.contactInfo=n.get("contactInfo")}]),angular.module("ifiske.controllers").controller("CountiesCtrl",["$scope","DB",function(e,t){t.getCounties().then(function(t){e.counties=t},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("FishDetailCtrl",["$scope","$stateParams","DB",function(e,t,n){e.fish=t.fish,e.image_endpoint="http://www.ifiske.se",e.fish||n.getFish(t.id).then(function(t){e.fish=t,console.log(e.fish)},function(e){console.log(e)}),console.log(e.fish)}]),angular.module("ifiske.controllers").controller("FishesCtrl",["$scope","DB",function(e,t){e.sortorder="so",e.image_endpoint="http://www.ifiske.se",t.getFishes().then(function(t){e.fishes=t,e.default_img=t[0].img},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("HomeCtrl",["$scope","$state","$ionicHistory","localStorage","sessionData",function(e,t,n,o,r){e.loggedIn=r,o.set("homeHistoryId",n.currentHistoryId()),e.myFunc=function(e){13!=e.keyCode||e.shiftKey||t.go("menu.areas",{search:e.srcElement.value})}}]),angular.module("ifiske.controllers").controller("LegalCtrl",["$scope","$state","localStorage",function(e,t,n){e.tos=n.get("tos")}]),angular.module("ifiske.controllers").controller("LoginCtrl",["$scope","$state","Update","$ionicLoading",function(e,t,n,o){e.signIn=function(r){o.show(),n.user_login(r.username.$viewValue,r.password.$viewValue).then(function(){o.hide(),r.$setValidity("loginError",!0),t.go("menu.home")},function(t){o.hide(),r.$setValidity("loginError",!1),e.error=t.response})}}]),angular.module("ifiske.controllers").controller("MapCtrl",["$scope","leafletData","DB",function(e,t,n){e.test="hej",n.search("").then(function(t){e.markers=t.map(function(t){return{layer:"fishareas",lat:t.lat,lng:t.lng,getMessageScope:function(){var n=e.$new();return n.area=t,n},message:'<a ui-sref="menu.area({id: area.ID })">{{area.t}}</a>'}})}),angular.extend(e,{center:{lat:62,lng:15,zoom:5},layers:{baselayers:{mapbox:{name:"Mapbox",type:"xyz",url:"http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",layerOptions:{maptype:"mapbox.outdoors",apikey:"pk.eyJ1IjoibWFpc3RobyIsImEiOiI3Ums5R0IwIn0.DOhU81clHLEhTj81DIOjdg"}}},overlays:{fishareas:{name:"Fiskeområden",type:"markercluster",visible:!0,layerOptions:{disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}}})}]),angular.module("ifiske.controllers").controller("MenuCtrl",["$scope","$state","$ionicPopover","sessionData","Update",function(e,t,n,o,r){e.sessionData=o,n.fromTemplateUrl("components/menu/popover.html",{scope:e}).then(function(t){e.popover=t}),e.userinfo=function(){e.popover.hide(),t.go("menu.userinfo")},e.logout=function(){e.popover.hide(),r.user_logout(),t.go("start.login")},e.login=function(){e.popover.hide(),t.go("start.login")},e.register=function(){e.popover.hide(),t.go("start.register.details")},e.update=function(){r.forcedUpdate()}}]),angular.module("ifiske.controllers").controller("RegisterCtrl",["$scope","$state","$ionicLoading","$ionicModal","$ionicScrollDelegate","API","localStorage",function(e,t,n,o,r,i,s){var l;e.checkUsername=function(e){i.user_exists(e.$viewValue).then(function(t){e.$setValidity("nameTaken",!t)})},e.checkEmail=function(e){i.user_exists(null,e.$viewValue).then(function(t){e.$setValidity("emailTaken",!t)})},e.formErrors={},e.register=function(o){n.show(),e.phone=o.phone.$viewValue,l=o.username.$viewValue;var s=o.password.$viewValue,u=o.fullname.$viewValue,a=o.email.$viewValue;i.user_register(l,u,s,a,e.phone).then(function(){n.hide(),t.go("^.verify")},function(t){e.formErrors.registrationError=!0,r.scrollTop(!0),8==t.error_code&&o.email.$setValidity("invalidEmail",!1),9==t.error_code&&(e.checkUsername(o.username),e.checkEmail(o.email)),10==t.error_code&&o.phone.$setValidity("invalidPhone",!1),n.hide()})},e.verify=function(e){n.show();var o=e.vercode;i.user_confirm(l,o.$viewValue).then(function(){t.go("start.login"),o.$setValidity("verified",!0),n.hide()},function(){o.$setValidity("verified",!1),n.hide()})},e.tos=s.get("tos"),o.fromTemplateUrl("components/register/eula.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.eula=t}),e.showEula=function(){e.eula.show()},e.closeEula=function(){e.eula.hide()},e.$on("$destroy",function(){e.eula.remove()})}]),angular.module("ifiske.controllers").controller("TechniqueDetailCtrl",["$scope","$stateParams","DB","$ionicSlideBoxDelegate",function(e,t,n,o){if(e.image_endpoint="http://www.ifiske.se",e.tech=t.tech,e.images=[],e.tech){var r=e.tech;e.images=[r.img1,r.img2,r.img3].filter(function(e){return!/\/$/.test(e)}),o.update()}else n.getTechnique(t.id).then(function(t){e.images=[t.img1,t.img2,t.img3].filter(function(e){return!/\/$/.test(e)}),o.update(),e.tech=t})}]),angular.module("ifiske.controllers").controller("TechniquesCtrl",["$scope","DB",function(e,t){t.getTechniques().then(function(t){console.log(t),e.techniques=t}),e.image_endpoint="http://www.ifiske.se",e.sortorder="so"}]),angular.module("ifiske.controllers").controller("UserCtrl",["$scope","DB",function(e,t){t.getUserInfo().then(function(t){e.user=t}),t.getUserNumbers().then(function(t){e.numbers=t})}]),angular.module("ifiske.controllers").controller("UserCardsCtrl",["$scope","$stateParams","DB","$ionicModal",function(e,t,n,o){e.pred="-to",e.endpoint="https://www.ifiske.se",e.$on("$ionicView.beforeEnter",function(){e.now=Date.now(),n.getUserProducts().then(function(t){e.products=t},function(e){console.log(e)})}),o.fromTemplateUrl("components/area_cards/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),console.log(t),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.rules_modal.remove()})}]),function(e){"use strict";e.module("ifiske.api",["ifiske.utils"]).provider("API",function(){this.base_url="https://www.ifiske.se/api/v2/api.php",this.$get=["$http","sessionData","localStorage","$q",function(t,n,o,r){var i=this.base_url,s=function(n){return r(function(o,r){t({method:"get",url:i,params:e.extend(n,{key:"0123456789abcdef"}),timeout:5e3,cache:!0}).success(function(e){"error"===e.status?r(e.message):e.data?o(e.data.response):r(e)}).error(function(e,t){r(0===t?new Error("Request timeout"):e)})})},l=function(t){var o=n.token;return s(e.extend(t,{s:o}))};return{get_municipalities:function(){return s({m:"get_municipalities"})},get_counties:function(){return s({m:"get_counties"})},user_exists:function(e,t){var n={m:"user_exists"};return"string"==typeof e&&(n.username=e),"string"==typeof t&&(n.email=t),s(n)},user_register:function(e,t,n,o,r){return s({m:"user_register",username:e,fullname:t,password:n,email:o,phone:r})},user_confirm:function(e,t){return s({m:"user_confirm",username:e,pin:t})},user_info:function(){return l({m:"user_info"})},user_login:function(e,t){return s({m:"user_login",username:e,password:t}).then(function(e){return n.setToken(e),e})},user_logout:function(){l({m:"user_logout"}).then(function(){n.deleteToken()})},user_products:function(){return l({m:"user_products"})},get_fishes:function(){return s({m:"get_fishes"})},get_techniques:function(){return s({m:"get_techniques"})},get_baits:function(){return s({m:"get_baits"})},get_organizations:function(e){return s({m:"get_organizations",orgid:e})},get_org_modified:function(e){return s({m:"get_org_modified",orgid:e})},get_areas:function(e){return s({m:"get_areas",areaid:e})},get_areas_modified:function(e){return s({m:"get_areas_modified",areaid:e})},get_products:function(e){return s({m:"get_products",areaid:e})},get_rules:function(e){return s({m:"get_rules",ruleid:e})},get_photos:function(e,t){return s({m:"get_photos",orgid:e,areaid:t})},get_map_pois:function(e){return s({m:"get_map_pois",orgid:e})},get_map_poi_types:function(){return s({m:"get_map_poi_types"})},get_map_polygons:function(e){return s({m:"get_map_polygons",orgid:e})},user_get_favorites:function(){return l({m:"user_get_favorites"})},get_terms_of_service:function(){return s({m:"get_terms_of_service"})},get_contact_info:function(){return s({m:"get_contact_info"})},get_engine_policies:function(){return s({m:"get_engine_policies"})},get_sms_terms:function(){return s({m:"get_sms_terms"})}}}]})}(window.angular),function(e,t){"use strict";e.module("ifiske.db",[]).provider("DB",function(){this.$get=["$cordovaSQLite","API","$q",function(e,n,o){var r;if(window.sqlitePlugin)r=e.openDB("fiskebasen.db");else{if(!window.openDatabase)return console.log("Not supported on this device, sorry"),t;r=window.openDatabase("fiskebasen.db","1.0","fiskebasen",10485760)}var i={Area:[["ID","int"],["orgid","int"],["t","text"],["kw","text"],["note","text"],["c1","int"],["c2","int"],["c3","int"],["m1","int"],["m2","int"],["m3","int"],["lat","real"],["lng","real"],["zoom","text"],["pnt","int"],["car","int"],["eng","int"],["hcp","int"],["map","text"],["wsc","int"],["mod","int"],["d","text"]],Area_Fish:[["ID","text"],["aid","int"],["fid","int"],["amount","int"],["comment","text"]],Product:[["ID","int"],["t","text"],["t2","text"],["no","text"],["im","text"],["pf","text"],["ai","int"],["ri","int"],["ch","int"],["price","int"],["mod","int"],["so","int"],["hl","text"]],County:[["ID","int"],["s","text"],["t","text"],["d","text"]],Municipality:[["ID","int"],["cID","int"],["name","text"]],Fish:[["ID","int"],["t","text"],["d","text"],["mod","int"],["so","int"],["max","int"],["icon","text"],["img","text"],["in","text"],["geo","text"],["size","text"],["lat","text"],["rec","text"]],Rule:[["ID","int"],["ver","int"],["d","text"],["t","text"]],User_Product:[["ID","int"],["at","int"],["code","int"],["fr","int"],["fullname","text"],["ot","text"],["ref1","int"],["ref2","int"],["t","text"],["to","int"],["pid","int"],["pdf","text"]],User_Info:[["ID","int"],["username","text"],["loggedin","text"],["IP1","text"],["IP2","text"],["name","text"],["email","text"],["created","text"]],User_Number:[["number","text"]],Technique:[["ID","int"],["t","text"],["d","text"],["so","int"],["de","text"],["da","text"],["icon","text"],["img1","text"],["img2","text"],["img3","text"],["youtube","text"]],Organization:[["ID","int"],["t","text"],["d","text"],["cp","text"],["url","text"],["co","int"],["mod","int"],["vat","int"],["dp","int"],["fva","int"],["org","int"],["ml","int"]],Poi:[["ID","int"],["orgid","int"],["type","int"],["price","int"],["t","text"],["d","text"],["la","real"],["lo","real"]],Poi_Type:[["ID","int"],["t","text"],["icon","text"]],Polygon:[["ID","int"],["orgid","int"],["t","text"],["c","text"],["ver","int"],["mod","int"],["poly","text"]]},s=function(e){for(var t=[],n=0;n<e.rows.length;++n)t.push(e.rows.item(n));return t};return{populateTable:function(e,t){return o(function(n,o){r.transaction(function(n){n.executeSql("DELETE FROM "+e+";");for(var o in t){for(var r=t[o],s=[],l=0;l<i[e].length;++l)s.push(r[i[e][l][0]]);var u=["INSERT INTO",e,"VALUES(?",",?".repeat(s.length-1),")"].join(" ");n.executeSql(u,s)}},o,n)})},cleanTable:function(e){return o(function(t,n){r.transaction(function(t){t.executeSql("DELETE FROM "+e+";")},n,t)})},clean:function(){return o(function(e,t){r.transaction(function(e){for(var t in i)e.executeSql("DROP TABLE IF EXISTS "+t+";")},t,e)}).then(function(){console.log("Removed all tables")})},init:function(){return o(function(e,t){r.transaction(function(e){for(var t in i){var n=["CREATE TABLE IF NOT EXISTS",t,"(",'"'+i[t].join('___"').split(",").join('" ').split("___").join(", "),", PRIMARY KEY(",'"'+i[t][0][0]+'"',"));"].join(" ");e.executeSql(n)}},t,e)})},getArea:function(t){return o(function(o){e.execute(r,["SELECT *","FROM Area","WHERE id = ?"].join(" "),[t]).then(function(e){var t=s(e)[0];n.get_photos(t.orgid).then(function(e){t.images=e,o(t)},function(){o(t)})})})},getAreaFishes:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Area_Fish","JOIN Fish ON Area_Fish.fid = Fish.ID","WHERE Area_Fish.aid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},search:function(t,n){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE t LIKE ?",n?"AND c1 = ?":"","ORDER BY t"].join(" "),n?["%"+t+"%",n]:["%"+t+"%"]).then(function(e){o(s(e))},i)})},getProduct:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ID = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getProductsByArea:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ai = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(s(e))},o)})},getCounties:function(){return o(function(t,n){e.execute(r,["SELECT DISTINCT County.*","FROM County","JOIN Area ON Area.c1 = County.ID","ORDER BY County.t"].join(" ")).then(function(e){t(s(e))},n)})},getUserProducts:function(){return o(function(t,n){e.execute(r,["SELECT User_Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM User_Product","LEFT JOIN Product ON Product.ID = User_Product.pid","LEFT JOIN Rule ON Rule.ID = Product.ri"].join(" ")).then(function(e){t(s(e))},n)})},getFishes:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Fish"].join(" ")).then(function(e){t(s(e))},n)})},getFish:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Fish","WHERE id = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getTechniques:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Technique"].join(" ")).then(function(e){t(s(e))},n)})},getTechnique:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Technique","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getOrganization:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Organization","WHERE ID = ?"].join(" "),[t]).then(function(e){n(s(e)[0])},o)})},getUserInfo:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Info"].join(" ")).then(function(e){t(s(e)[0])},n)})},getUserNumbers:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Number"].join(" ")).then(function(e){t(s(e))},n)})},getPois:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Poi","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})},getPoiTypes:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM Poi_Type"].join(" ")).then(function(e){t(s(e))},n)})},getPolygons:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Polygon","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(s(e))},o)})}}}]})}(window.angular),angular.module("ifiske.filters",[]).filter("onebr",function(){return function(e){return e.replace(/(<br>\s*)+/g,"<br>")}}).filter("nobrs",function(){return function(e){return e.replace(/(<br(\s*\/)*>)+/g,"")}}).filter("cleantables",function(){return function(e){return e=e.replace(/(<\/?table>)+/g,""),e=e.replace(/(<\/?tr>)+/g,""),e=e.replace(/(<\/?th>)+/g,""),e=e.replace(/(<(\/?)td.*?>)+?/g,"<$2p>"),e=e.replace(/<p>\s*<\/p>/g,"")}}),function(e){"use strict";e.module("ifiske.update",["ifiske.api","ifiske.db","ifiske.utils"]).provider("Update",function(){this.$get=["API","DB","localStorage","$q","$ionicLoading","sessionData",function(e,t,n,o,r,i){var s="last_update",l=function(){return o.all([e.get_areas().then(function(e){var n=[];for(var r in e){var i=e[r].fish;for(var s in i)n.push({ID:r+"_"+s,fid:s,aid:r,amount:i[s][0],comment:i[s][1]})}return o.all([t.populateTable("Area",e),t.populateTable("Area_Fish",n)]).then(function(){console.log("Populated Area")},function(e){return console.log(e),o.reject(e)})}),e.get_products().then(function(e){return t.populateTable("Product",e).then(function(){console.log("Populated Product")},function(e){return console.log(e),o.reject(e)})}),e.get_counties().then(function(e){return t.populateTable("County",e).then(function(){console.log("Populated County")},function(e){return console.log(e),o.reject(e)})}),e.get_municipalities().then(function(e){return t.populateTable("Municipality",e).then(function(){console.log("Populated Municipality")},function(e){return console.log(e),o.reject(e)})}),e.get_fishes().then(function(e){return t.populateTable("Fish",e).then(function(){console.log("Populated Fish")},function(e){return console.log(e),o.reject(e)})}),e.get_rules().then(function(e){return t.populateTable("Rule",e).then(function(){console.log("Populated Rule")},function(e){return console.log(e),o.reject(e)})}),e.get_techniques().then(function(e){return t.populateTable("Technique",e).then(function(){console.log("Populated Technique")},function(e){return console.log(e),o.reject(e)})}),e.get_organizations().then(function(e){return t.populateTable("Organization",e).then(function(){console.log("Populated Organization")},function(e){return console.log(e),o.reject(e)})}),e.get_map_pois().then(function(e){return t.populateTable("Poi",e).then(function(){console.log("Populated Poi")},function(e){return console.log(e),o.reject(e)})}),e.get_map_poi_types().then(function(e){return t.populateTable("Poi_Type",e).then(function(){console.log("Populated Poi_Type")},function(e){return console.log(e),o.reject(e)})}),e.get_map_polygons().then(function(e){return t.populateTable("Polygon",e).then(function(){console.log("Populated Polygon")},function(e){return console.log(e),o.reject(e)})})])},u=function(){return o.all([e.user_products().then(function(e){return console.log(e),t.populateTable("User_Product",e).then(function(){console.log("Populated User_Product")},function(e){return console.log(e),o.reject(e)})}),e.user_info().then(function(e){for(var n=e.numbers,r=[],i=0;i<n.length;++i)r.push({number:n[i]});return o.all([t.populateTable("User_Info",[e]).then(function(){console.log("Populated User_Info")},function(t){return console.log(e),console.log(t),o.reject(t)}),t.populateTable("User_Number",r).then(function(){console.log("Populated User_Numbers")},function(e){return console.log(e),o.reject(e)})])})])},a=function(){return o.all([t.cleanTable("User_Product"),t.cleanTable("User_Number"),t.cleanTable("User_Info")]).then(function(){console.log("Removed user info from database")},function(e){console.log("Could not remove user data from database!",e)})},c=function(c){r.show();var f=Date.now(),m=0;c||(m=n.get(s));var p=6048e5;f-m>p?(t.init().then(function(){return console.log("Initialized DB system"),i.token?o.all([u(),l()]):l()}).then(function(){console.log("Populated all the things"),n.set(s,f),r.hide()},function(o){return 7!==o.error_code?(console.warn("Got an error, will try to recreate all tables: ",o),t.clean().then(function(){return t.init()}).then(function(){return l()}).then(function(){console.log("Populated all the things"),n.set(s,f),r.hide()},function(e){console.log("Still error, handle it!",e),r.hide()})):(a(),e.user_logout(),r.hide(),void 0)}),e.get_terms_of_service().then(function(e){n.set("tos",e)}),e.get_sms_terms().then(function(e){n.set("sms_terms",e)}),e.get_contact_info().then(function(e){n.set("contactInfo",e)})):i.token?t.init().then(function(){console.log("Initialized DB system"),i.token&&u().then(function(){r.hide()},function(){r.hide()}),r.hide()}):(console.log("no_update"),r.hide())};return{update:function(){c()},forcedUpdate:function(){c(!0)},user_logout:function(){a(),e.user_logout()},user_login:function(t,n){return e.user_login(t,n).then(function(){c()})},last_update:function(){return n.get(s)}}}]})}(window.angular),angular.module("ifiske.utils",[]).factory("localStorage",["$window",function(e){return{set:function(t,n){e.localStorage.setItem(t,n)},get:function(t){return e.localStorage.getItem(t)},remove:function(t){e.localStorage.removeItem(t)}}}]).service("sessionData",["localStorage",function(e){this.token=e.get("session"),this.setToken=function(t){e.set("session",t),this.token=t,console.log("token set")},this.deleteToken=function(){e.remove("session"),this.token=null,console.log("token unset")}}]),angular.module("ngCordovaSms",[]).directive("ngCordovaSms",["$cordovaSms","$ionicPopup",function(e,t){"use strict";return{restrict:"A",link:function(n,o,r){o.on("click",function(n){n.preventDefault(),t.prompt({title:"Skriv in ditt namn",inputType:"text"}).then(function(t){var n="FISKA "+r.ngCordovaSms+" "+t;e.send("72456",n,"INTENT",function(){console.log("succuess")},function(e){console.log(e)})})})}}}]),angular.module("ifiske.directives").directive("ifiskeInput",function(){return{restrict:"E",transclude:!0,scope:{name:"@",id:"@",label:"@",placeholder:"@",type:"@",ngPattern:"@",ngModel:"=?"},templateUrl:"directives/input_field/ifiske_input.html",controller:function(e){e.id=e.id||e.name,e.type=e.type||"text"}}}),angular.module("systemBrowser",[]).directive("systemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){e.open(n[0].href,"_system"),t.preventDefault()})}}}]).directive("globalSystemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){t.target.href&&t.target.host!==window.location.host&&(e.open(t.target.href,"_system"),t.preventDefault())})}}}]);
//# sourceMappingURL=data:application/json;base64,