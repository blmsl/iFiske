angular.module("ifiske",["ionic","ifiske.controllers","ifiske.directives","ifiske.api","ifiske.db","ifiske.utils","ifiske.update","ifiske.filters","ionic.ion.headerShrink","ngCordova","systemBrowser","ngCordovaSms","ngMessages","ImgCache","leaflet-directive","tabSlideBox"]).constant("$ionicLoadingConfig",{template:"<ion-spinner></ion-spinner>"}).run(["$ionicPlatform","Update","ImgCache",function(e,t,n){e.ready(function(){window.ionic&&window.ionic.Keyboard&&window.ionic.Keyboard.hideKeyboardAccessoryBar(!0),window.StatusBar&&window.StatusBar.styleDefault(),n.$init(),t.update()})}]).config(["$stateProvider","$urlRouterProvider","$ionicConfigProvider","ImgCacheProvider",function(e,t,n,o){o.setOptions({debug:!1,usePersistentCache:!0}),o.manualInit=!0,n.views.forwardCache(!0),n.backButton.previousTitleText(!1).text(""),n.tabs.position("bottom");var r="/app/login";window.localStorage.getItem("session")&&(r="/app/home"),t.otherwise(r),e.state("app",{url:"/app",templateUrl:"components/menu/menu.html",controller:"MenuCtrl"}).state("app.login",{url:"/login",templateUrl:"components/login/login.html",controller:"LoginCtrl"}).state("app.recover",{url:"/recover",templateUrl:"components/recover/recover.html",controller:"RecoverCtrl"}).state("app.recover.lostpassword",{url:"/lostpassword",templateUrl:"components/recover/lostpassword.html"}).state("app.recover.resetpassword",{url:"/resetpassword",templateUrl:"components/recover/resetpassword.html"}).state("app.register",{url:"/register",templateUrl:"components/register/register.html",controller:"RegisterCtrl"}).state("app.register.details",{url:"/details",templateUrl:"components/register/register_details.html"}).state("app.register.verify",{url:"/verify",templateUrl:"components/register/register_verify.html"}).state("app.home",{url:"/home",templateUrl:"components/home/home.html",controller:"HomeCtrl"}).state("app.info",{url:"/info",templateUrl:"components/info/info.html"}).state("app.bugs",{url:"/info",templateUrl:"components/menu/report.html"}).state("app.contact",{url:"/contact",templateUrl:"components/contact/contact.html",controller:"ContactCtrl"}).state("app.legal",{url:"/legal",templateUrl:"components/legal/legal.html",controller:"LegalCtrl"}).state("app.about",{url:"/about",templateUrl:"components/about/about.html",controller:"AboutCtrl"}).state("app.userinfo",{url:"/userinfo",controller:"UserCtrl",templateUrl:"components/user/user.html"}).state("app.counties",{url:"/counties",templateUrl:"components/counties/counties.html",controller:"CountiesCtrl"}).state("app.areas",{url:"/areas",params:{id:!1,county:!1,search:""},templateUrl:"components/area_list/area_list.html",controller:"AreasCtrl"}).state("app.cards",{url:"/cards",templateUrl:"components/user_cards/user_cards.html",controller:"UserCardsCtrl"}).state("app.favorites",{url:"/favorites",templateUrl:"components/favorites/favorites.html"}).state("app.fishes",{url:"/fishes",templateUrl:"components/fishes/fishes.html",controller:"FishesCtrl"}).state("app.fishdetail",{url:"/fishdetail/:id",params:{id:!1,fish:!1},templateUrl:"components/fish_detail/fish_detail.html",controller:"FishDetailCtrl"}).state("app.map",{url:"/map",templateUrl:"components/map/map.html",controller:"MapCtrl"}).state("app.techniques",{url:"/techniques",templateUrl:"components/techniques/techniques.html",controller:"TechniquesCtrl"}).state("app.techniquedetail",{url:"/techniquedetail/:id",params:{id:!1,tech:!1},templateUrl:"components/technique_detail/technique_detail.html",controller:"TechniqueDetailCtrl"}).state("app.area",{url:"/area/:id",views:{"@app":{templateUrl:"components/area/area.html",controller:"AreaCtrl"},"info@app.area":{templateUrl:"components/area/info.html",controller:"AreaInfoCtrl"},"map@app.area":{templateUrl:"components/area/map.html",controller:"AreaMapCtrl"},"fishinfo@app.area":{templateUrl:"components/area/fish.html",controller:"AreaFishCtrl"},"cards@app.area":{templateUrl:"components/area/cards.html",controller:"AreaCardsCtrl"}}})}]),angular.module("ifiske.controllers",[]),angular.module("ifiske.directives",[]),angular.module("ifiske.controllers").controller("AboutCtrl",["$scope","$cordovaAppVersion","$ionicPlatform","Update",function(e,t,n,o){e.version=e.dbDate="Okänt",e.update=o,n.ready(function(){window.cordova&&t.getAppVersion().then(function(t){console.log("iFiske version:",t),e.version=t})})}]),angular.module("ifiske.controllers").controller("AreaCardsCtrl",["$scope","$ionicModal","localStorage",function(e,t,n){e.$on("$ionicView.beforeEnter",function(){e.smsterms=n.get("sms_terms"),e.predicate="so",t.fromTemplateUrl("components/area/sms_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.sms_modal=t}),e.openModal=function(t){e.sms_modal.show(),e.product=t},e.closeModal=function(){e.sms_modal.hide()},e.showTerms=function(){e.showingterms=!e.showingterms},e.showingterms=!1,t.fromTemplateUrl("components/area/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.sms_modal.remove(),e.rules_modal.remove()})})}]),angular.module("ifiske.controllers").controller("AreaCtrl",["$scope","$stateParams","DB","$ionicSlideBoxDelegate",function(e,t,n,o){e.image_endpoint="http://www.ifiske.se/",n.getArea(t.id).then(function(t){e.area=t,e.$broadcast("ifiske-area"),e.images=t.images,o.$getByHandle("tabs").update(),n.getOrganization(t.orgid).then(function(t){e.org=t})},function(e){console.log(e)}),n.getAreaFishes(t.id).then(function(t){e.fishes=t,o.$getByHandle("tabs").update()},function(e){console.log(e)}),n.getProductsByArea(t.id).then(function(t){e.products=t,o.$getByHandle("tabs").update()},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("AreaFishCtrl",["$scope",function(e){e.sortorder="-amount",e.$on("$ionicView.beforeEnter",function(){})}]),angular.module("ifiske.controllers").controller("AreaInfoCtrl",["$scope","$ionicSlideBoxDelegate",function(e,t){e.gotoProducts=function(){t.$getByHandle("tabs").slide(1)},e.$on("$ionicView.beforeEnter",function(){})}]),angular.module("ifiske.controllers").controller("AreaMapCtrl",["$scope","DB","leafletEvents","$ionicPlatform","$cordovaGeolocation","$cordovaDeviceOrientation","$timeout","localStorage",function(e,t,n,o,r,i,a,s){function l(t){t.iconAngle=(0|t.iconAngle)-45,e.map.markers.mypos2?(angular.extend(e.map.markers.mypos2,t),e.map.markers.mypos=e.map.markers.mypos2,delete e.map.markers.mypos2):(angular.extend(e.map.markers.mypos,t),e.map.markers.mypos2=e.map.markers.mypos,delete e.map.markers.mypos)}var u={},c="http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",p=s.get("mapbox_api"),f=function(){e.map.center={lat:e.area.lat,lng:e.area.lng,zoom:Number(e.area.zoom)?Number(e.area.zoom):9},t.getPoiTypes().then(function(n){for(var o=0;o<n.length;++o){var r=n[o];u[r.ID]={iconUrl:e.image_endpoint+r.icon,iconAnchor:[16,37],popupAnchor:[0,-35]}}t.getPois(e.area.orgid).then(function(t){for(var n=0;n<t.length;++n){var o=t[n];e.map.markers["poi"+n]={layer:"pois",lat:o.la,lng:o.lo,icon:u[o.type],message:"<h4>"+o.t+"</h4><p>"+o.d+"</p>",popupOptions:{maxWidth:window.innerWidth-50}}}e.map.markers.area={layer:"pois",lat:e.area.lat,lng:e.area.lng,message:e.area.t}},function(e){console.error(e)}),t.getPolygons(e.area.orgid).then(function(t){e.map.paths=t.map(function(e){return{latlngs:JSON.parse("["+e.poly+"]"),color:e.c,weight:2,opacity:.5,fillColor:e.c,type:"polygon"}})},function(e){console.error(e)})})};angular.extend(e,{map:{center:{},paths:{},markers:{mypos:{lat:0,lng:0,iconAngle:0,message:"This is you!",icon:{type:"div",iconSize:[40,40],iconAnchor:[20,20],className:"icon ion-navigate myposition"}}},layers:{baselayers:{outdoors:{name:"Utomhus",type:"xyz",url:c,layerOptions:{maptype:"mapbox.outdoors",apikey:p}},satellite:{name:"Satellit",type:"xyz",url:c,layerOptions:{maptype:"mapbox.satellite",apikey:p}}},overlays:{pois:{name:"Ställen",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1,disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}}}}),e.$on("$ionicView.beforeEnter",function(){e.area&&f(),e.$on("ifiske-area",f),o.ready(function(){r.watchPosition({frequency:3e3}).then(null,function(e){console.error(e)},function(e){a(function(){l({lat:e.coords.latitude,lng:e.coords.longitude})})}),i.watchHeading({frequency:3e3}).then(null,function(e){console.error(e)},function(e){a(function(){l({iconAngle:e.trueHeading})})})}),e.navigate=function(){o.ready(function(){launchnavigator.navigate([e.navto.lat,e.navto.lng],null,function(){console.log("Opening navigator")},function(e){alert("Navigation failed!",e)})})};var t=["popupopen","popupclose"];e.events={enabled:t},e.$on("leafletDirectiveMarker.popupopen",function(t,n){e.navto=n.model}),e.$on("leafletDirectiveMarker.popupclose",function(){e.navto=null})})}]),angular.module("ifiske.controllers").controller("AreasCtrl",["$scope","$stateParams","$ionicScrollDelegate","DB",function(e,t,n,o){var r=t.search;e.search=r,e.county=t.county,o.search("",t.id).then(function(t){e.areas=t},function(e){console.log(e)}),e.clearSearch=function(){e.search=""},e.scrollTop=function(){n.scrollTop()}}]),angular.module("ifiske.controllers").controller("ContactCtrl",["$scope","$state","localStorage",function(e,t,n){e.contactInfo=n.get("contactInfo")}]),angular.module("ifiske.controllers").controller("CountiesCtrl",["$scope","DB",function(e,t){t.getCounties().then(function(t){e.counties=t},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("FishDetailCtrl",["$scope","$stateParams","DB",function(e,t,n){e.fish=t.fish,e.image_endpoint="http://www.ifiske.se",e.fish||n.getFish(t.id).then(function(t){e.fish=t,console.log(e.fish)},function(e){console.log(e)}),console.log(e.fish)}]),angular.module("ifiske.controllers").controller("FishesCtrl",["$scope","DB",function(e,t){e.sortorder="so",e.image_endpoint="http://www.ifiske.se",t.getFishes().then(function(t){e.fishes=t,e.default_img=t[0].img},function(e){console.log(e)})}]),angular.module("ifiske.controllers").controller("HomeCtrl",["$scope","$state","$ionicHistory","localStorage","sessionData",function(e,t,n,o,r){e.loggedIn=r,o.set("homeHistoryId",n.currentHistoryId()),e.myFunc=function(e){13!=e.keyCode||e.shiftKey||t.go("app.areas",{search:e.srcElement.value})}}]),angular.module("ifiske.controllers").controller("LegalCtrl",["$scope","$state","localStorage",function(e,t,n){e.tos=n.get("tos")}]),angular.module("ifiske.controllers").controller("LoginCtrl",["$scope","$state","Update","$ionicLoading","$ionicHistory","$ionicViewSwitcher",function(e,t,n,o,r,i){e.signIn=function(r){o.show(),n.user_login(r.username.$viewValue,r.password.$viewValue).then(function(){o.hide(),r.$setValidity("loginError",!0),i.nextDirection("forward"),t.go("app.home")},function(t){o.hide(),r.$setValidity("loginError",!1),e.error=t.response})},e.skip=function(){i.nextDirection("forward"),r.nextViewOptions({disableBack:!0,historyRoot:!0}),t.go("app.home")}}]),angular.module("ifiske.controllers").controller("MapCtrl",["$scope","leafletData","$ionicPlatform","DB","$cordovaGeolocation","$cordovaDeviceOrientation","$timeout",function(e,t,n,o,r,i,a){function s(t){t.iconAngle=(0|t.iconAngle)-45,e.markers.mypos2?(angular.extend(e.markers.mypos2,t),e.markers.mypos=e.markers.mypos2,delete e.markers.mypos2):(angular.extend(e.markers.mypos,t),e.markers.mypos2=e.markers.mypos,delete e.markers.mypos)}var l="http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}",u=localStorage.get("mapbox_api");angular.extend(e,{center:{lat:62,lng:15,zoom:5},layers:{baselayers:{outdoors:{name:"Utomhus",type:"xyz",url:l,layerOptions:{maptype:"mapbox.outdoors",apikey:u}},satellite:{name:"Satellit",type:"xyz",url:l,layerOptions:{maptype:"mapbox.satellite",apikey:u}}},overlays:{fishareas:{name:"Fiskeområden",type:"markercluster",visible:!0,layerOptions:{showOnSelector:!1,disableClusteringAtZoom:9,chunkedLoading:!0,showCoverageOnHover:!1,removeOutsideVisibleBounds:!0}}}},markers:{mypos:{lat:0,lng:0,iconAngle:-45,message:"hi!",icon:{type:"div",iconSize:[40,40],iconAnchor:[20,20],className:"icon ion-navigate myposition"}}}}),n.ready(function(){r.watchPosition({frequency:3e3}).then(null,function(e){console.error(e)},function(e){a(function(){s({lat:e.coords.latitude,lng:e.coords.longitude})})}),i.watchHeading({frequency:3e3}).then(null,function(e){console.error(e)},function(e){a(function(){s({iconAngle:e.trueHeading})})})}),e.$on("$ionicView.beforeEnter",function(){console.log("hi!"),o.search("").then(function(t){for(var n=0;n<t.length;++n){var o=t[n];e.markers["area"+n]={layer:"fishareas",lat:o.lat,lng:o.lng,getMessageScope:function(){var t=e.$new();return t.area=o,t},message:'<a ui-sref="app.area({id: area.ID })">{{area.t}}</a>'}}})})}]),angular.module("ifiske.controllers").controller("MenuCtrl",["$scope","$state","$ionicViewSwitcher","$ionicPopover","sessionData","Update",function(e,t,n,o,r,i){e.sessionData=r,o.fromTemplateUrl("components/menu/popover.html",{scope:e}).then(function(t){e.popover=t}),e.userinfo=function(){e.popover.hide(),t.go("app.userinfo")},e.logout=function(){e.popover.hide(),i.user_logout(),t.go("app.login")},e.login=function(){e.popover.hide(),n.nextDirection("back"),t.go("app.login")},e.register=function(){e.popover.hide(),t.go("app.register.details")},e.forcedUpdate=function(){i.forcedUpdate()}}]),angular.module("ifiske.controllers").controller("RecoverCtrl",["$scope","$state","$ionicHistory","$ionicPlatform","$ionicLoading","$cordovaToast","API",function(e,t,n,o,r,i,a){"use strict";var s="";e.lostPassword=function(n){r.show(),s=n.user.$viewValue,a.user_lost_password(s).then(function(n){e.info="En återställningskod kommer skickas till dig inom kort, via ",n.mailed&&(e.info+="e-mail",n.texted&&(e.info+=" och ")),n.texted&&(e.info+="SMS"),t.go("^.resetpassword")},function(){n.user.$setValidity("invalidUser",!1)})["finally"](r.hide)},e.resetPassword=function(e){r.show(),a.user_reset_password(s,e.password.$viewValue,e.code.$viewValue).then(function(){o.ready(function(){i.showLongBottom("Ditt lösenord har ändrats")}),t.go("app.login")},function(t){switch(t.error_code){case 16:e.code.$setValidity("invalidCode",!1)}})["finally"](r.hide)}}]),angular.module("ifiske.controllers").controller("RegisterCtrl",["$scope","$state","$ionicLoading","$ionicModal","$ionicScrollDelegate","$ionicPlatform","$cordovaToast","API","localStorage",function(e,t,n,o,r,i,a,s,l){var u;e.checkUsername=function(e){s.user_exists(e.$viewValue).then(function(t){e.$setValidity("nameTaken",!t)})},e.checkEmail=function(e){s.user_exists(null,e.$viewValue).then(function(t){e.$setValidity("emailTaken",!t)})},e.formErrors={},e.register=function(o){n.show(),e.phone=o.phone.$viewValue,u=o.username.$viewValue;var i=o.password.$viewValue,a=o.fullname.$viewValue,l=o.email.$viewValue;s.user_register(u,a,i,l,e.phone).then(function(){n.hide(),e.formErrors={},t.go("^.verify")},function(t){e.formErrors.registrationError=!0,r.scrollTop(!0),8==t.error_code&&o.email.$setValidity("invalidEmail",!1),9==t.error_code&&(e.checkUsername(o.username),e.checkEmail(o.email)),10==t.error_code&&o.phone.$setValidity("invalidPhone",!1),n.hide()})},e.verify=function(o){n.show();var r=o.vercode;s.user_confirm(u,r.$viewValue).then(function(){i.ready(function(){a.showLongBottom("Ditt konto har skapats")}),e.formErrors.validationError=!1,t.go("app.login")},function(t){t.error_code?r.$setValidity("verified",!1):e.formErrors.validationError=!0})["finally"](n.hide())},e.tos=l.get("tos"),o.fromTemplateUrl("components/register/eula.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.eula=t}),e.showEula=function(){e.eula.show()},e.closeEula=function(){e.eula.hide()},e.$on("$destroy",function(){e.eula.remove()})}]),angular.module("ifiske.controllers").controller("TechniqueDetailCtrl",["$scope","$stateParams","DB","$ionicSlideBoxDelegate",function(e,t,n,o){if(e.image_endpoint="http://www.ifiske.se",e.tech=t.tech,e.images=[],e.tech){var r=e.tech;e.images=[r.img1,r.img2,r.img3].filter(function(e){return!/\/$/.test(e)}),o.update()}else n.getTechnique(t.id).then(function(t){e.images=[t.img1,t.img2,t.img3].filter(function(e){return!/\/$/.test(e)}),o.update(),e.tech=t})}]),angular.module("ifiske.controllers").controller("TechniquesCtrl",["$scope","DB",function(e,t){t.getTechniques().then(function(t){console.log(t),e.techniques=t}),e.image_endpoint="http://www.ifiske.se",e.sortorder="so"}]),angular.module("ifiske.controllers").controller("UserCtrl",["$scope","DB",function(e,t){t.getUserInfo().then(function(t){e.user=t}),t.getUserNumbers().then(function(t){e.numbers=t})}]),angular.module("ifiske.controllers").controller("UserCardsCtrl",["$scope","$stateParams","DB","Update","$ionicModal",function(e,t,n,o,r){e.pred="-to",e.endpoint="https://www.ifiske.se";var i=function(){e.now=Date.now(),n.getUserProducts().then(function(t){e.products=t},function(e){console.log(e)})};e.$on("$ionicView.beforeEnter",i),r.fromTemplateUrl("components/area_cards/rules_modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.rules_modal=t}),e.openRulesModal=function(t){e.rules_modal.show(),console.log(t),e.product=t},e.closeRulesModal=function(){e.rules_modal.hide()},e.$on("$destroy",function(){e.rules_modal.remove()}),e.update=function(){o.update()["finally"](function(){e.$broadcast("scroll.refreshComplete"),i()})}}]),function(e){"use strict";e.module("ifiske.api",["ifiske.utils"]).provider("API",function(){this.base_url="https://www.ifiske.se/api/v2/api.php",this.$get=["$http","sessionData","localStorage","$q",function(t,n,o,r){var i=this.base_url,a=function(n,o){return r(function(r,a){t({method:"get",url:i,params:e.extend(n,{key:"0123456789abcdef"}),timeout:5e3,cache:o!==!1}).success(function(e){"error"===e.status?a(e.message):e.data?r(e.data.response):a(e)}).error(function(e,t){a(0===t?new Error("Request timeout"):e)})})},s=function(t,o){var r=n.token;return a(e.extend(t,{s:r}),o)};return{get_municipalities:function(){return a({m:"get_municipalities"})},get_counties:function(){return a({m:"get_counties"})},user_exists:function(e,t){var n={m:"user_exists"};return e&&"string"==typeof e&&(n.username=e),t&&"string"==typeof t&&(n.email=t),a(n,!1)},user_register:function(e,t,n,o,r){return a({m:"user_register",username:e,fullname:t,password:n,email:o,phone:r},!1)},user_confirm:function(e,t){return a({m:"user_confirm",username:e,pin:t},!1)},user_info:function(){return s({m:"user_info"})},user_lost_password:function(e){return a({m:"user_lost_password",user_identification:e},!1)},user_reset_password:function(e,t,n){return a({m:"user_reset_password",user_identification:e,password:t,code:n},!1)},user_change_password:function(e,t){return s({m:"user_change_password",old_password:e,new_password:t},!1)},user_login:function(e,t){return a({m:"user_login",username:e,password:t},!1).then(function(e){return n.setToken(e),e})},user_logout:function(){s({m:"user_logout"},!1).then(function(){n.deleteToken()})},user_products:function(){return s({m:"user_products"},!1)},get_fishes:function(){return a({m:"get_fishes"})},get_techniques:function(){return a({m:"get_techniques"})},get_baits:function(){return a({m:"get_baits"})},get_organizations:function(e){return a({m:"get_organizations",orgid:e})},get_org_modified:function(e){return a({m:"get_org_modified",orgid:e})},get_areas:function(e){return a({m:"get_areas",areaid:e})},get_areas_modified:function(e){return a({m:"get_areas_modified",areaid:e})},get_products:function(e){return a({m:"get_products",areaid:e})},get_rules:function(e){return a({m:"get_rules",ruleid:e})},get_photos:function(e,t){return a({m:"get_photos",orgid:e,areaid:t})},get_map_pois:function(e){return a({m:"get_map_pois",orgid:e})},get_map_poi_types:function(){return a({m:"get_map_poi_types"})},get_map_polygons:function(e){return a({m:"get_map_polygons",orgid:e})},user_get_favorites:function(){return s({m:"user_get_favorites"},!1)},get_terms_of_service:function(){return a({m:"get_terms_of_service"})},get_contact_info:function(){return a({m:"get_contact_info"})},get_engine_policies:function(){return a({m:"get_engine_policies"})},get_sms_terms:function(){return a({m:"get_sms_terms"})},get_mapbox_api:function(){return a({m:"get_mapbox_apiaccesstoken"})}}}]})}(window.angular),function(e,t){"use strict";e.module("ifiske.db",[]).provider("DB",function(){this.$get=["$cordovaSQLite","API","$q",function(e,n,o){var r;if(window.sqlitePlugin)r=e.openDB("fiskebasen.db");else{if(!window.openDatabase)return console.log("Not supported on this device, sorry"),t;r=window.openDatabase("fiskebasen.db","1.0","fiskebasen",10485760)}var i={Area:[["ID","int"],["orgid","int"],["t","text"],["kw","text"],["note","text"],["c1","int"],["c2","int"],["c3","int"],["m1","int"],["m2","int"],["m3","int"],["lat","real"],["lng","real"],["zoom","text"],["pnt","int"],["car","int"],["eng","int"],["hcp","int"],["map","text"],["wsc","int"],["mod","int"],["d","text"]],Area_Fish:[["ID","text"],["aid","int"],["fid","int"],["amount","int"],["comment","text"]],Product:[["ID","int"],["t","text"],["t2","text"],["no","text"],["im","text"],["pf","text"],["ai","int"],["ri","int"],["ch","int"],["price","int"],["mod","int"],["so","int"],["hl","text"]],County:[["ID","int"],["s","text"],["t","text"],["d","text"]],Municipality:[["ID","int"],["cID","int"],["name","text"]],Fish:[["ID","int"],["t","text"],["d","text"],["mod","int"],["so","int"],["max","int"],["icon","text"],["img","text"],["in","text"],["geo","text"],["size","text"],["lat","text"],["rec","text"]],Rule:[["ID","int"],["ver","int"],["d","text"],["t","text"]],User_Product:[["ID","int"],["at","int"],["code","int"],["fr","int"],["fullname","text"],["ot","text"],["ref1","int"],["ref2","int"],["t","text"],["to","int"],["pid","int"],["pdf","text"]],User_Info:[["ID","int"],["username","text"],["loggedin","text"],["IP1","text"],["IP2","text"],["name","text"],["email","text"],["created","text"]],User_Number:[["number","text"]],Technique:[["ID","int"],["t","text"],["d","text"],["so","int"],["de","text"],["da","text"],["icon","text"],["img1","text"],["img2","text"],["img3","text"],["youtube","text"]],Organization:[["ID","int"],["t","text"],["d","text"],["cp","text"],["url","text"],["co","int"],["mod","int"],["vat","int"],["dp","int"],["fva","int"],["org","int"],["ml","int"]],Poi:[["ID","int"],["orgid","int"],["type","int"],["price","int"],["t","text"],["d","text"],["la","real"],["lo","real"]],Poi_Type:[["ID","int"],["t","text"],["icon","text"]],Polygon:[["ID","int"],["orgid","int"],["t","text"],["c","text"],["ver","int"],["mod","int"],["poly","text"]]},a=function(e){for(var t=[],n=0;n<e.rows.length;++n)t.push(e.rows.item(n));return t};return{populateTable:function(e,t){return o(function(n,o){r.transaction(function(n){n.executeSql("DELETE FROM "+e+";");for(var o in t){for(var r=t[o],a=[],s=0;s<i[e].length;++s)a.push(r[i[e][s][0]]);var l=["INSERT INTO",e,"VALUES(?",",?".repeat(a.length-1),")"].join(" ");n.executeSql(l,a)}},o,n)})},cleanTable:function(e){return o(function(t,n){r.transaction(function(t){t.executeSql("DELETE FROM "+e+";")},n,t)})},clean:function(){return o(function(e,t){r.transaction(function(e){for(var t in i)e.executeSql("DROP TABLE IF EXISTS "+t+";")},t,e)}).then(function(){console.log("Removed all tables")})},init:function(){return o(function(e,t){r.transaction(function(e){for(var t in i){for(var n=i[t],o=[],r=0;r<n.length;++r)o.push('"'+n[r][0]+'" '+n[r][1]);o=o.join(", ");var a=["CREATE TABLE IF NOT EXISTS",t,"(",o,", PRIMARY KEY(",'"'+n[0][0]+'"',"));"].join(" ");e.executeSql(a)}},t,e)})},getArea:function(t){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE id = ?"].join(" "),[t]).then(function(e){var t=a(e)[0];n.get_photos(t.orgid).then(function(e){t.images=e,o(t)},function(e){console.warn(e),o(t)})},i)})},getAreaFishes:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Area_Fish","JOIN Fish ON Area_Fish.fid = Fish.ID","WHERE Area_Fish.aid = ?"].join(" "),[t]).then(function(e){n(a(e))},o)})},search:function(t,n){return o(function(o,i){e.execute(r,["SELECT *","FROM Area","WHERE t LIKE ?",n?"AND c1 = ?":"","ORDER BY t"].join(" "),n?["%"+t+"%",n]:["%"+t+"%"]).then(function(e){o(a(e))},i)})},getProduct:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ID = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(a(e))},o)})},getProductsByArea:function(t){return o(function(n,o){e.execute(r,["SELECT DISTINCT Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM Product","JOIN Rule ON Rule.ID = Product.ri","WHERE ai = ?","ORDER BY so"].join(" "),[t]).then(function(e){n(a(e))},o)})},getCounties:function(){return o(function(t,n){e.execute(r,["SELECT DISTINCT County.*","FROM County","JOIN Area ON Area.c1 = County.ID","ORDER BY County.t"].join(" ")).then(function(e){t(a(e))},n)})},getUserProducts:function(){return o(function(t,n){e.execute(r,["SELECT User_Product.*,","Rule.t as rule_t,","Rule.ver as rule_ver,","Rule.d as rule_d","FROM User_Product","LEFT JOIN Product ON Product.ID = User_Product.pid","LEFT JOIN Rule ON Rule.ID = Product.ri"].join(" ")).then(function(e){t(a(e))},n)})},getFishes:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Fish"].join(" ")).then(function(e){t(a(e))},n)})},getFish:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Fish","WHERE id = ?"].join(" "),[t]).then(function(e){n(a(e)[0])},o)})},getTechniques:function(){return o(function(t,n){e.execute(r,["SELECT * FROM Technique"].join(" ")).then(function(e){t(a(e))},n)})},getTechnique:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Technique","WHERE ID = ?"].join(" "),[t]).then(function(e){n(a(e)[0])},o)})},getOrganization:function(t){return o(function(n,o){e.execute(r,["SELECT * FROM Organization","WHERE ID = ?"].join(" "),[t]).then(function(e){n(a(e)[0])},o)})},getUserInfo:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Info"].join(" ")).then(function(e){t(a(e)[0])},n)})},getUserNumbers:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM User_Number"].join(" ")).then(function(e){t(a(e))},n)})},getPois:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Poi","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(a(e))},o)})},getPoiTypes:function(){return o(function(t,n){e.execute(r,["SELECT *","FROM Poi_Type"].join(" ")).then(function(e){t(a(e))},n)})},getPolygons:function(t){return o(function(n,o){e.execute(r,["SELECT *","FROM Polygon","WHERE orgid = ?"].join(" "),[t]).then(function(e){n(a(e))},o)})}}}]})}(window.angular),angular.module("ifiske.filters",[]).filter("onebr",function(){return function(e){return e.replace(/(<br>\s*)+/g,"<br>")}}).filter("nobrs",function(){return function(e){return e.replace(/(<br(\s*\/)*>)+/g,"")}}).filter("cleantables",function(){return function(e){return e=e.replace(/(<\/?table>)+/g,""),e=e.replace(/(<\/?tr>)+/g,""),e=e.replace(/(<\/?th>)+/g,""),e=e.replace(/(<(\/?)td.*?>)+?/g,"<$2p>"),e=e.replace(/<p>\s*<\/p>/g,"")}}),function(e){"use strict";e.module("ifiske.update",["ifiske.api","ifiske.db","ifiske.utils"]).provider("Update",function(){this.$get=["API","DB","localStorage","$q","$ionicLoading","sessionData",function(e,t,n,o,r,i){var a="last_update",s=function(){return o.all([e.get_areas().then(function(e){var n=[];for(var r in e){var i=e[r].fish;for(var a in i)n.push({ID:r+"_"+a,fid:a,aid:r,amount:i[a][0],comment:i[a][1]})}return o.all([t.populateTable("Area",e),t.populateTable("Area_Fish",n)]).then(function(){return"Area"},function(e){return console.warn(e),o.reject(e)})}),e.get_products().then(function(e){return t.populateTable("Product",e).then(function(){return"Product"},function(e){return console.warn(e),o.reject(e)})}),e.get_counties().then(function(e){return t.populateTable("County",e).then(function(){return"County"},function(e){return console.warn(e),o.reject(e)})}),e.get_municipalities().then(function(e){return t.populateTable("Municipality",e).then(function(){return"Municipality"},function(e){return console.warn(e),o.reject(e)})}),e.get_fishes().then(function(e){return t.populateTable("Fish",e).then(function(){return"Fish"},function(e){return console.warn(e),o.reject(e)})}),e.get_rules().then(function(e){return t.populateTable("Rule",e).then(function(){return"Rule"},function(e){return console.warn(e),o.reject(e)})}),e.get_techniques().then(function(e){return t.populateTable("Technique",e).then(function(){return"Technique"},function(e){return console.warn(e),o.reject(e)})}),e.get_organizations().then(function(e){return t.populateTable("Organization",e).then(function(){return"Organization"},function(e){return console.warn(e),o.reject(e)})}),e.get_map_pois().then(function(e){return t.populateTable("Poi",e).then(function(){return"Poi"},function(e){return console.warn(e),o.reject(e)})}),e.get_map_poi_types().then(function(e){return t.populateTable("Poi_Type",e).then(function(){return"Poi_Type"},function(e){return console.warn(e),o.reject(e)})}),e.get_map_polygons().then(function(e){return t.populateTable("Polygon",e).then(function(){return"Polygon"},function(e){return console.warn(e),o.reject(e)})})])},l=function(){return o.all([e.user_products().then(function(e){return console.log(e),t.populateTable("User_Product",e).then(function(){return"User_Product"},function(e){return console.log(e),o.reject(e)})}),e.user_info().then(function(e){for(var n=e.numbers,r=[],i=0;i<n.length;++i)r.push({number:n[i]});return o.all([t.populateTable("User_Info",[e]).then(function(){return"User_Info"},function(t){return console.log(e),console.log(t),o.reject(t)}),t.populateTable("User_Number",r).then(function(){return"User_Numbers"},function(e){return console.log(e),o.reject(e)})])})])},u=function(){return o.all([t.cleanTable("User_Product"),t.cleanTable("User_Number"),t.cleanTable("User_Info")]).then(function(){console.log("Removed user info from database")},function(e){console.log("Could not remove user data from database!",e)})},c=function(c){r.show();var p=Date.now(),f=0;c||(f=n.get(a));var m=6048e5;return p-f>m?o.all([t.init().then(function(){return console.log("Initialized DB system"),i.token?o.all([l(),s()]):s()}).then(function(e){console.log("Populated:",e),n.set(a,p),r.hide()},function(o){return 7!==o.error_code?(console.warn("Got an error, will try to recreate all tables:",o),t.clean().then(function(){return t.init()}).then(function(){return s()}).then(function(e){console.log("Populated:",e),n.set(a,p),r.hide()},function(e){console.log("Still error, handle it!",e),r.hide()})):(u(),e.user_logout(),r.hide(),void 0)}),e.get_terms_of_service().then(function(e){n.set("tos",e)}),e.get_sms_terms().then(function(e){n.set("sms_terms",e)}),e.get_contact_info().then(function(e){n.set("contactInfo",e)}),e.get_mapbox_api().then(function(e){n.set("mapbox_api",e)})]):i.token?t.init().then(function(){console.log("Initialized DB system"),i.token&&l().then(function(){r.hide()},function(e){console.error(e),r.hide()}),r.hide()}):(console.log("no_update"),r.hide(),o.when("No update"))};return{update:function(){return c()},forcedUpdate:function(){return c(!0)},user_logout:function(){return u(),e.user_logout()},user_login:function(t,n){return e.user_login(t,n).then(function(){c()})},last_update:function(){return n.get(a)}}}]})}(window.angular),angular.module("ifiske.utils",[]).factory("localStorage",["$window",function(e){return{set:function(t,n){e.localStorage.setItem(t,n)},get:function(t){return e.localStorage.getItem(t)},remove:function(t){e.localStorage.removeItem(t)}}}]).service("sessionData",["localStorage",function(e){this.token=e.get("session"),this.setToken=function(t){e.set("session",t),this.token=t,console.log("token set")},this.deleteToken=function(){e.remove("session"),this.token=null,console.log("token unset")
}}]),angular.module("ngCordovaSms",[]).directive("ngCordovaSms",["$cordovaSms","$ionicPopup",function(e,t){"use strict";return{restrict:"A",link:function(n,o,r){o.on("click",function(n){n.preventDefault(),t.prompt({title:"Skriv in ditt namn",inputType:"text"}).then(function(t){var n="FISKA "+r.ngCordovaSms+" "+t;e.send("72456",n,"INTENT",function(){console.log("succuess")},function(e){console.log(e)})})})}}}]),angular.module("ifiske.directives").directive("ifiskeInput",function(){return{restrict:"E",transclude:!0,scope:{name:"@",id:"@",label:"@",placeholder:"@",type:"@",ngPattern:"@",ngModel:"=?"},templateUrl:"directives/input_field/ifiske_input.html",controller:function(e){e.id=e.id||e.name,e.type=e.type||"text"}}}),angular.module("systemBrowser",[]).directive("systemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){e.open(n[0].href,"_system"),t.preventDefault()})}}}]).directive("globalSystemBrowser",["$cordovaInAppBrowser",function(e){"use strict";return{restrict:"A",link:function(t,n){n.on("click",function(t){t.target.href&&t.target.host!==window.location.host&&(e.open(t.target.href,"_system"),t.preventDefault())})}}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImFib3V0L2Fib3V0X2NvbnRyb2xsZXIuanMiLCJhcmVhL2FyZWFfY2FyZHNfY29udHJvbGxlci5qcyIsImFyZWEvYXJlYV9jb250cm9sbGVyLmpzIiwiYXJlYS9hcmVhX2Zpc2hfY29udHJvbGxlci5qcyIsImFyZWEvYXJlYV9pbmZvX2NvbnRyb2xsZXIuanMiLCJhcmVhL2FyZWFfbWFwX2NvbnRyb2xsZXIuanMiLCJhcmVhX2xpc3QvYXJlYV9saXN0X2NvbnRyb2xsZXIuanMiLCJjb250YWN0L2NvbnRhY3RfY29udHJvbGxlci5qcyIsImNvdW50aWVzL2NvdW50aWVzX2NvbnRyb2xsZXIuanMiLCJmaXNoX2RldGFpbC9maXNoX2RldGFpbF9jb250cm9sbGVyLmpzIiwiZmlzaGVzL2Zpc2hlc19jb250cm9sbGVyLmpzIiwiaG9tZS9ob21lX2NvbnRyb2xsZXIuanMiLCJsZWdhbC9sZWdhbF9jb250cm9sbGVyLmpzIiwibG9naW4vbG9naW5fY29udHJvbGxlci5qcyIsIm1hcC9tYXBfY29udHJvbGxlci5qcyIsIm1lbnUvbWVudV9jb250cm9sbGVyLmpzIiwicmVjb3Zlci9yZWNvdmVyX2NvbnRyb2xsZXIuanMiLCJyZWdpc3Rlci9yZWdpc3Rlcl9jb250cm9sbGVyLmpzIiwidGVjaG5pcXVlX2RldGFpbC90ZWNobmlxdWVfZGV0YWlsX2NvbnRyb2xsZXIuanMiLCJ0ZWNobmlxdWVzL3RlY2huaXF1ZXNfY29udHJvbGxlci5qcyIsInVzZXIvdXNlcl9jb250cm9sbGVyLmpzIiwidXNlcl9jYXJkcy91c2VyX2NhcmRzX2NvbnRyb2xsZXIuanMiLCJhcGkuanMiLCJkYi5qcyIsImZpbHRlci5qcyIsInVwZGF0ZS5qcyIsInV0aWxzLmpzIiwiaWZpc2tlX3Ntcy9pZmlza2Vfc21zLmpzIiwiaW5wdXRfZmllbGQvaWZpc2tlX2lucHV0LmpzIiwic3lzdGVtX2Jyb3dzZXIvc3lzdGVtX2Jyb3dzZXIuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwidGVtcGxhdGUiLCJydW4iLCIkaW9uaWNQbGF0Zm9ybSIsIlVwZGF0ZSIsIkltZ0NhY2hlIiwicmVhZHkiLCJ3aW5kb3ciLCJpb25pYyIsIktleWJvYXJkIiwiaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyIiwiU3RhdHVzQmFyIiwic3R5bGVEZWZhdWx0IiwiJGluaXQiLCJ1cGRhdGUiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRpb25pY0NvbmZpZ1Byb3ZpZGVyIiwiSW1nQ2FjaGVQcm92aWRlciIsInNldE9wdGlvbnMiLCJkZWJ1ZyIsInVzZVBlcnNpc3RlbnRDYWNoZSIsIm1hbnVhbEluaXQiLCJ2aWV3cyIsImZvcndhcmRDYWNoZSIsImJhY2tCdXR0b24iLCJwcmV2aW91c1RpdGxlVGV4dCIsInRleHQiLCJ0YWJzIiwicG9zaXRpb24iLCJkZWZhdWx0VXJsIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIm90aGVyd2lzZSIsInN0YXRlIiwidXJsIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwicGFyYW1zIiwiaWQiLCJjb3VudHkiLCJzZWFyY2giLCJmaXNoIiwidGVjaCIsIkBhcHAiLCJpbmZvQGFwcC5hcmVhIiwibWFwQGFwcC5hcmVhIiwiZmlzaGluZm9AYXBwLmFyZWEiLCJjYXJkc0BhcHAuYXJlYSIsIiRzY29wZSIsIiRjb3Jkb3ZhQXBwVmVyc2lvbiIsInZlcnNpb24iLCJkYkRhdGUiLCJjb3Jkb3ZhIiwiZ2V0QXBwVmVyc2lvbiIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiJGlvbmljTW9kYWwiLCIkb24iLCJzbXN0ZXJtcyIsImdldCIsInByZWRpY2F0ZSIsImZyb21UZW1wbGF0ZVVybCIsInNjb3BlIiwiYW5pbWF0aW9uIiwibW9kYWwiLCJzbXNfbW9kYWwiLCJvcGVuTW9kYWwiLCJwcm9kdWN0Iiwic2hvdyIsImNsb3NlTW9kYWwiLCJoaWRlIiwic2hvd1Rlcm1zIiwic2hvd2luZ3Rlcm1zIiwicnVsZXNfbW9kYWwiLCJvcGVuUnVsZXNNb2RhbCIsImNsb3NlUnVsZXNNb2RhbCIsInJlbW92ZSIsIiRzdGF0ZVBhcmFtcyIsIkRCIiwiJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSIsImltYWdlX2VuZHBvaW50IiwiZ2V0QXJlYSIsImFyZWEiLCIkYnJvYWRjYXN0IiwiaW1hZ2VzIiwiJGdldEJ5SGFuZGxlIiwiZ2V0T3JnYW5pemF0aW9uIiwib3JnaWQiLCJvcmciLCJlcnIiLCJnZXRBcmVhRmlzaGVzIiwiZmlzaGVzIiwiZ2V0UHJvZHVjdHNCeUFyZWEiLCJwcm9kdWN0cyIsInNvcnRvcmRlciIsImdvdG9Qcm9kdWN0cyIsInNsaWRlIiwibGVhZmxldEV2ZW50cyIsIiRjb3Jkb3ZhR2VvbG9jYXRpb24iLCIkY29yZG92YURldmljZU9yaWVudGF0aW9uIiwiJHRpbWVvdXQiLCJ1cGRhdGVNeXBvcyIsIm9iaiIsImljb25BbmdsZSIsIm1hcCIsIm1hcmtlcnMiLCJteXBvczIiLCJleHRlbmQiLCJteXBvcyIsImljb25zIiwibWFwYm94VXJsIiwiYXBpa2V5IiwidXBkYXRlTWFwIiwiY2VudGVyIiwibGF0IiwibG5nIiwiem9vbSIsIk51bWJlciIsImdldFBvaVR5cGVzIiwicG9pX3R5cGVzIiwiaSIsImxlbmd0aCIsInR5cGUiLCJJRCIsImljb25VcmwiLCJpY29uIiwiaWNvbkFuY2hvciIsInBvcHVwQW5jaG9yIiwiZ2V0UG9pcyIsInBvaXMiLCJwb2kiLCJsYXllciIsImxhIiwibG8iLCJtZXNzYWdlIiwidCIsImQiLCJwb3B1cE9wdGlvbnMiLCJtYXhXaWR0aCIsImlubmVyV2lkdGgiLCJlcnJvciIsImdldFBvbHlnb25zIiwicG9seWdvbnMiLCJwYXRocyIsInBvbHkiLCJsYXRsbmdzIiwiSlNPTiIsInBhcnNlIiwiY29sb3IiLCJjIiwid2VpZ2h0Iiwib3BhY2l0eSIsImZpbGxDb2xvciIsImljb25TaXplIiwiY2xhc3NOYW1lIiwibGF5ZXJzIiwiYmFzZWxheWVycyIsIm91dGRvb3JzIiwibmFtZSIsImxheWVyT3B0aW9ucyIsIm1hcHR5cGUiLCJzYXRlbGxpdGUiLCJvdmVybGF5cyIsInZpc2libGUiLCJzaG93T25TZWxlY3RvciIsImRpc2FibGVDbHVzdGVyaW5nQXRab29tIiwiY2h1bmtlZExvYWRpbmciLCJzaG93Q292ZXJhZ2VPbkhvdmVyIiwicmVtb3ZlT3V0c2lkZVZpc2libGVCb3VuZHMiLCJ3YXRjaFBvc2l0aW9uIiwiZnJlcXVlbmN5IiwicG9zIiwiY29vcmRzIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJ3YXRjaEhlYWRpbmciLCJoZWFkaW5nIiwidHJ1ZUhlYWRpbmciLCJuYXZpZ2F0ZSIsImxhdW5jaG5hdmlnYXRvciIsIm5hdnRvIiwiYWxlcnQiLCJlbmFibGVkRXZlbnRzIiwiZXZlbnRzIiwiZW5hYmxlZCIsImV2ZW50IiwiYXJncyIsIm1vZGVsIiwiJGlvbmljU2Nyb2xsRGVsZWdhdGUiLCJjb3B5IiwiZGF0YSIsImFyZWFzIiwiY2xlYXJTZWFyY2giLCJzY3JvbGxUb3AiLCIkc3RhdGUiLCJjb250YWN0SW5mbyIsImdldENvdW50aWVzIiwiY291bnRpZXMiLCJnZXRGaXNoIiwiZ2V0RmlzaGVzIiwiZGVmYXVsdF9pbWciLCJpbWciLCIkaW9uaWNIaXN0b3J5Iiwic2Vzc2lvbkRhdGEiLCJsb2dnZWRJbiIsInNldCIsImN1cnJlbnRIaXN0b3J5SWQiLCJteUZ1bmMiLCIkZXZlbnQiLCJrZXlDb2RlIiwic2hpZnRLZXkiLCJnbyIsInNyY0VsZW1lbnQiLCJ2YWx1ZSIsInRvcyIsIiRpb25pY0xvYWRpbmciLCIkaW9uaWNWaWV3U3dpdGNoZXIiLCJzaWduSW4iLCJsb2dpbkZvcm0iLCJ1c2VyX2xvZ2luIiwidXNlcm5hbWUiLCIkdmlld1ZhbHVlIiwicGFzc3dvcmQiLCIkc2V0VmFsaWRpdHkiLCJuZXh0RGlyZWN0aW9uIiwicmVzcG9uc2UiLCJza2lwIiwibmV4dFZpZXdPcHRpb25zIiwiZGlzYWJsZUJhY2siLCJoaXN0b3J5Um9vdCIsImxlYWZsZXREYXRhIiwiZmlzaGFyZWFzIiwiYSIsImdldE1lc3NhZ2VTY29wZSIsIm5ld19zY29wZSIsIiRuZXciLCIkaW9uaWNQb3BvdmVyIiwicG9wb3ZlciIsInVzZXJpbmZvIiwibG9nb3V0IiwidXNlcl9sb2dvdXQiLCJsb2dpbiIsInJlZ2lzdGVyIiwiZm9yY2VkVXBkYXRlIiwiJGNvcmRvdmFUb2FzdCIsIkFQSSIsInVzZXIiLCJsb3N0UGFzc3dvcmQiLCJmb3JtIiwidXNlcl9sb3N0X3Bhc3N3b3JkIiwiaW5mbyIsIm1haWxlZCIsInRleHRlZCIsInJlc2V0UGFzc3dvcmQiLCJ1c2VyX3Jlc2V0X3Bhc3N3b3JkIiwiY29kZSIsInNob3dMb25nQm90dG9tIiwiZXJyb3JfY29kZSIsImNoZWNrVXNlcm5hbWUiLCJpbnB1dCIsInVzZXJfZXhpc3RzIiwiY2hlY2tFbWFpbCIsImZvcm1FcnJvcnMiLCJwaG9uZSIsImZ1bGxuYW1lIiwiZW1haWwiLCJ1c2VyX3JlZ2lzdGVyIiwicmVnaXN0cmF0aW9uRXJyb3IiLCJ2ZXJpZnkiLCJ2ZXJjb2RlIiwidXNlcl9jb25maXJtIiwidmFsaWRhdGlvbkVycm9yIiwiZXVsYSIsInNob3dFdWxhIiwiY2xvc2VFdWxhIiwiaW1nMSIsImltZzIiLCJpbWczIiwiZmlsdGVyIiwiZWwiLCJ0ZXN0IiwiZ2V0VGVjaG5pcXVlIiwiZ2V0VGVjaG5pcXVlcyIsInRlY2huaXF1ZXMiLCJnZXRVc2VySW5mbyIsImdldFVzZXJOdW1iZXJzIiwibnVtYmVycyIsInByZWQiLCJlbmRwb2ludCIsImluaXRpbGl6ZSIsIm5vdyIsIkRhdGUiLCJnZXRVc2VyUHJvZHVjdHMiLCJwcm92aWRlciIsInRoaXMiLCJiYXNlX3VybCIsIiRnZXQiLCIkaHR0cCIsIiRxIiwiYXBpX2NhbGwiLCJjYWNoZSIsImZ1bGZpbGwiLCJyZWplY3QiLCJtZXRob2QiLCJrZXkiLCJ0aW1lb3V0Iiwic3VjY2VzcyIsInN0YXR1cyIsIkVycm9yIiwic2Vzc2lvbl9hcGlfY2FsbCIsInNlc3Npb24iLCJ0b2tlbiIsInMiLCJnZXRfbXVuaWNpcGFsaXRpZXMiLCJtIiwiZ2V0X2NvdW50aWVzIiwicGluIiwidXNlcl9pbmZvIiwidXNlcl9pZGVudGlmaWNhdGlvbiIsInVzZXJfY2hhbmdlX3Bhc3N3b3JkIiwib2xkX3Bhc3N3b3JkIiwibmV3X3Bhc3N3b3JkIiwic2V0VG9rZW4iLCJkZWxldGVUb2tlbiIsInVzZXJfcHJvZHVjdHMiLCJnZXRfZmlzaGVzIiwiZ2V0X3RlY2huaXF1ZXMiLCJnZXRfYmFpdHMiLCJnZXRfb3JnYW5pemF0aW9ucyIsImdldF9vcmdfbW9kaWZpZWQiLCJnZXRfYXJlYXMiLCJhcmVhaWQiLCJnZXRfYXJlYXNfbW9kaWZpZWQiLCJnZXRfcHJvZHVjdHMiLCJnZXRfcnVsZXMiLCJydWxlaWQiLCJnZXRfcGhvdG9zIiwiZ2V0X21hcF9wb2lzIiwiZ2V0X21hcF9wb2lfdHlwZXMiLCJnZXRfbWFwX3BvbHlnb25zIiwidXNlcl9nZXRfZmF2b3JpdGVzIiwiZ2V0X3Rlcm1zX29mX3NlcnZpY2UiLCJnZXRfY29udGFjdF9pbmZvIiwiZ2V0X2VuZ2luZV9wb2xpY2llcyIsImdldF9zbXNfdGVybXMiLCJnZXRfbWFwYm94X2FwaSIsInVuZGVmaW5lZCIsIiRjb3Jkb3ZhU1FMaXRlIiwiZGIiLCJzcWxpdGVQbHVnaW4iLCJvcGVuREIiLCJvcGVuRGF0YWJhc2UiLCJ0YWJsZURlZiIsIkFyZWEiLCJBcmVhX0Zpc2giLCJQcm9kdWN0IiwiQ291bnR5IiwiTXVuaWNpcGFsaXR5IiwiRmlzaCIsIlJ1bGUiLCJVc2VyX1Byb2R1Y3QiLCJVc2VyX0luZm8iLCJVc2VyX051bWJlciIsIlRlY2huaXF1ZSIsIk9yZ2FuaXphdGlvbiIsIlBvaSIsIlBvaV9UeXBlIiwiUG9seWdvbiIsImNyZWF0ZU9iamVjdCIsInJldHZhbCIsInJvd3MiLCJwdXNoIiwiaXRlbSIsInBvcHVsYXRlVGFibGUiLCJ0YWJsZSIsInRyYW5zYWN0aW9uIiwidHgiLCJleGVjdXRlU3FsIiwic2luZ2xlRGF0YSIsImluc2VydERhdGEiLCJxdWVyeSIsInJlcGVhdCIsImpvaW4iLCJjbGVhblRhYmxlIiwiY2xlYW4iLCJpbml0IiwidGFibGVWYWx1ZXMiLCJleGVjdXRlIiwib2JqZWN0Iiwid2FybiIsImFpZCIsInNlYXJjaHN0cmluZyIsImNvdW50eV9pZCIsImdldFByb2R1Y3QiLCJwcm9kdWN0X2lkIiwiYXJlYV9pZCIsInJlcGxhY2UiLCJMQVNUX1VQREFURSIsInBvcHVsYXRlIiwiYWxsIiwiZmlzaEFyciIsImZpc2hLZXkiLCJmaWQiLCJhbW91bnQiLCJjb21tZW50IiwicG9wdWxhdGVVc2VyIiwibnVtQXJyIiwibnVtYmVyIiwiY2xlYW5Vc2VyIiwidXBkYXRlRnVuYyIsImZvcmNlZCIsImN1cnJlbnRUaW1lIiwibGFzdFVwZGF0ZSIsImFXZWVrIiwic3R1ZmYiLCJ0ZXJtcyIsIndoZW4iLCJsYXN0X3VwZGF0ZSIsImZhY3RvcnkiLCIkd2luZG93Iiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzZXJ2aWNlIiwiZGlyZWN0aXZlIiwiJGNvcmRvdmFTbXMiLCIkaW9uaWNQb3B1cCIsInJlc3RyaWN0IiwibGluayIsImF0dHJzIiwib24iLCJlIiwicHJldmVudERlZmF1bHQiLCJwcm9tcHQiLCJ0aXRsZSIsImlucHV0VHlwZSIsIm5nQ29yZG92YVNtcyIsInNlbmQiLCJ0cmFuc2NsdWRlIiwibGFiZWwiLCJwbGFjZWhvbGRlciIsIm5nUGF0dGVybiIsIm5nTW9kZWwiLCIkY29yZG92YUluQXBwQnJvd3NlciIsIm9wZW4iLCJocmVmIiwidGFyZ2V0IiwiaG9zdCIsImxvY2F0aW9uIl0sIm1hcHBpbmdzIjoiQUFLQUEsUUFBQUMsT0FBQSxVQUNBLFFBQ0EscUJBQ0Esb0JBQ0EsYUFDQSxZQUNBLGVBQ0EsZ0JBQ0EsaUJBQ0EseUJBQ0EsWUFDQSxnQkFDQSxlQUNBLGFBQ0EsV0FDQSxvQkFDQSxnQkFHQUMsU0FBQSx1QkFDQUMsU0FBQSxnQ0FHQUMsS0FBQSxpQkFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQUYsRUFBQUcsTUFBQSxXQUVBQyxPQUFBQyxPQUFB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Q0FDLE9BQ0EsS0FBQSxRQUNBLFFBQUEsUUFDQSxJQUFBLFNBQ0EsS0FBQSxTQUNBLE9BQUEsU0FDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxNQUFBLFNBQ0EsTUFBQSxTQUNBLE9BQUEsU0FDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLE1BQUEsUUFDQSxNQUFBLFFBQ0EsTUFBQSxTQUNBLE1BQUEsUUFDQSxNQUFBLFFBQ0EsSUFBQSxTQUVBQyxZQUNBLEtBQUEsU0FDQSxNQUFBLFFBQ0EsTUFBQSxRQUNBLFNBQUEsUUFDQSxVQUFBLFNBRUFDLFVBQ0EsS0FBQSxRQUNBLElBQUEsU0FDQSxLQUFBLFNBQ0EsS0FBQSxTQUNBLEtBQUEsU0FDQSxLQUFBLFNBQ0EsS0FBQSxRQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsUUFBQSxRQUNBLE1BQUEsUUFDQSxLQUFBLFFBQ0EsS0FBQSxTQUVBQyxTQUNBLEtBQUEsUUFDQSxJQUFBLFNBQ0EsSUFBQSxTQUNBLElBQUEsU0FFQUMsZUFDQSxLQUFBLFFBQ0EsTUFBQSxRQUNBLE9BQUEsU0FFQUMsT0FDQSxLQUFBLFFBQ0EsSUFBQSxTQUNBLElBQUEsU0FDQSxNQUFBLFFBQ0EsS0FBQSxRQUNBLE1BQUEsUUFDQSxPQUFBLFNBQ0EsTUFBQSxTQUNBLEtBQUEsU0FDQSxNQUFBLFNBQ0EsT0FBQSxTQUNBLE1BQUEsU0FDQSxNQUFBLFNBRUFDLE9BQ0EsS0FBQSxRQUNBLE1BQUEsUUFDQSxJQUFBLFNBQ0EsSUFBQSxTQUVBQyxlQUNBLEtBQUEsUUFDQSxLQUFBLFFBQ0EsT0FBQSxRQUNBLEtBQUEsUUFDQSxXQUFBLFNBQ0EsS0FBQSxTQUNBLE9BQUEsUUFDQSxPQUFBLFFBQ0EsSUFBQSxTQUNBLEtBQUEsUUFDQSxNQUFBLFFBQ0EsTUFBQSxTQUVBQyxZQUNBLEtBQUEsUUFDQSxXQUFBLFNBQ0EsV0FBQSxTQUNBLE1BQUEsU0FDQSxNQUFBLFNBQ0EsT0FBQSxTQUNBLFFBQUEsU0FDQSxVQUFBLFNBRUFDLGNB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U0FBQSxJQUNBQyxLQUFBLFNBQUE3VyxFQUFBeU4sR0FDQUEsRUFBQXNKLEdBQUEsUUFBQSxTQUFBQyxHQUNBWSxFQUFBQyxLQUFBcEssRUFBQSxHQUFBcUssS0FBQSxXQUNBZCxFQUFBQyx3QkFLQVIsVUFBQSx1QkFBQSx1QkFBQSxTQUFBbUIsR0FDQSxZQUNBLFFBQ0FoQixTQUFBLElBQ0FDLEtBQUEsU0FBQTdXLEVBQUF5TixHQUNBQSxFQUFBc0osR0FBQSxRQUFBLFNBQUFDLEdBQ0FBLEVBQUFlLE9BQUFELE1BQUFkLEVBQUFlLE9BQUFDLE9BQUExYixPQUFBMmIsU0FBQUQsT0FDQUosRUFBQUMsS0FBQWIsRUFBQWUsT0FBQUQsS0FBQSxXQUNBZCxFQUFBQyIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gYW5ndWxhci5tb2R1bGUgaXMgYSBnbG9iYWwgcGxhY2UgZm9yIGNyZWF0aW5nLCByZWdpc3RlcmluZyBhbmQgcmV0cmlldmluZyBBbmd1bGFyIG1vZHVsZXNcbi8vICdpZmlza2UnIGlzIHRoZSBuYW1lIG9mIHRoaXMgYW5ndWxhciBtb2R1bGUgKGFsc28gc2V0IGluIGEgPGJvZHk+IGF0dHJpYnV0ZSBpbiBpbmRleC5odG1sKVxuLy8gdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb2YgJ3JlcXVpcmVzJ1xuLy8gJ2lmaXNrZS5jb250cm9sbGVycycgaXMgZm91bmQgaW4gY29udHJvbGxlcnMuanNcblxuYW5ndWxhci5tb2R1bGUoJ2lmaXNrZScsIFtcbiAgICAnaW9uaWMnLFxuICAgICdpZmlza2UuY29udHJvbGxlcnMnLFxuICAgICdpZmlza2UuZGlyZWN0aXZlcycsXG4gICAgJ2lmaXNrZS5hcGknLFxuICAgICdpZmlza2UuZGInLFxuICAgICdpZmlza2UudXRpbHMnLFxuICAgICdpZmlza2UudXBkYXRlJyxcbiAgICAnaWZpc2tlLmZpbHRlcnMnLFxuICAgICdpb25pYy5pb24uaGVhZGVyU2hyaW5rJyxcbiAgICAnbmdDb3Jkb3ZhJyxcbiAgICAnc3lzdGVtQnJvd3NlcicsXG4gICAgJ25nQ29yZG92YVNtcycsXG4gICAgJ25nTWVzc2FnZXMnLFxuICAgICdJbWdDYWNoZScsXG4gICAgJ2xlYWZsZXQtZGlyZWN0aXZlJyxcbiAgICAndGFiU2xpZGVCb3gnXG5dKVxuXG4uY29uc3RhbnQoJyRpb25pY0xvYWRpbmdDb25maWcnLCB7XG4gICAgdGVtcGxhdGU6ICc8aW9uLXNwaW5uZXI+PC9pb24tc3Bpbm5lcj4nXG4gICAgLy8gaGlkZU9uU3RhdGVDaGFuZ2U6IHRydWVcbn0pXG4ucnVuKFsnJGlvbmljUGxhdGZvcm0nLCAnVXBkYXRlJywgJ0ltZ0NhY2hlJywgZnVuY3Rpb24oJGlvbmljUGxhdGZvcm0sIFVwZGF0ZSwgSW1nQ2FjaGUpIHtcbiAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gSGlkZSB0aGUgYWNjZXNzb3J5IGJhciBhYm92ZSB0aGUga2V5Ym9hcmQgZm9yIGZvcm0gaW5wdXRzXG4gICAgICAgIGlmICh3aW5kb3cuaW9uaWMgJiYgd2luZG93LmlvbmljLktleWJvYXJkKSB7XG4gICAgICAgICAgICB3aW5kb3cuaW9uaWMuS2V5Ym9hcmQuaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aW5kb3cuU3RhdHVzQmFyKSB7XG4gICAgICAgICAgICAvLyBvcmcuYXBhY2hlLmNvcmRvdmEuc3RhdHVzYmFyIHJlcXVpcmVkXG4gICAgICAgICAgICB3aW5kb3cuU3RhdHVzQmFyLnN0eWxlRGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgSW1nQ2FjaGUuJGluaXQoKTtcbiAgICAgICAgVXBkYXRlLnVwZGF0ZSgpO1xuICAgIH0pO1xufV0pXG5cbi5jb25maWcoW1xuICAgICckc3RhdGVQcm92aWRlcicsXG4gICAgJyR1cmxSb3V0ZXJQcm92aWRlcicsXG4gICAgJyRpb25pY0NvbmZpZ1Byb3ZpZGVyJyxcbiAgICAnSW1nQ2FjaGVQcm92aWRlcicsXG4gICAgZnVuY3Rpb24oJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGlvbmljQ29uZmlnUHJvdmlkZXIsIEltZ0NhY2hlUHJvdmlkZXIpIHtcblxuICAgICAgICBJbWdDYWNoZVByb3ZpZGVyLnNldE9wdGlvbnMoe1xuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgICAgICAgdXNlUGVyc2lzdGVudENhY2hlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBJbWdDYWNoZVByb3ZpZGVyLm1hbnVhbEluaXQgPSB0cnVlO1xuXG4gICAgICAgIC8vIENhY2hlIHZpZXdzIGluIHRoZSBmb3J3YXJkIHN0YWNrXG4gICAgICAgICRpb25pY0NvbmZpZ1Byb3ZpZGVyLnZpZXdzLmZvcndhcmRDYWNoZSh0cnVlKTtcblxuICAgICAgICAvLyBDbGVhciBiYWNrIGJ1dHRvbiBkZWZhdWx0IHRleHRcbiAgICAgICAgJGlvbmljQ29uZmlnUHJvdmlkZXIuYmFja0J1dHRvbi5wcmV2aW91c1RpdGxlVGV4dChmYWxzZSkudGV4dCgnJyk7XG5cbiAgICAgICAgLy8gVGFicyBwb3NpdGlvblxuICAgICAgICAkaW9uaWNDb25maWdQcm92aWRlci50YWJzLnBvc2l0aW9uKCdib3R0b20nKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW9uaWMgdXNlcyBBbmd1bGFyVUkgUm91dGVyLiBMZWFybiBtb3JlIGhlcmU6XG4gICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXJvdXRlclxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgZGVmYXVsdFVybCA9ICcvYXBwL2xvZ2luJztcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2Vzc2lvbicpKSB7XG4gICAgICAgICAgICBkZWZhdWx0VXJsID0gJy9hcHAvaG9tZSc7XG4gICAgICAgIH1cbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShkZWZhdWx0VXJsKTtcblxuICAgICAgICAkc3RhdGVQcm92aWRlclxuXG4gICAgICAgIC5zdGF0ZSgnYXBwJywge1xuICAgICAgICAgICAgdXJsOiAnL2FwcCcsXG4gICAgICAgICAgICAvL2Fic3RyYWN0OiB0cnVlLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL21lbnUvbWVudS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNZW51Q3RybCdcbiAgICAgICAgfSlcblxuICAgICAgICAuc3RhdGUoJ2FwcC5sb2dpbicsIHtcbiAgICAgICAgICAgIHVybDogJy9sb2dpbicsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbG9naW4vbG9naW4uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJ1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEFjY291bnQgcmVjb3ZlcnlcbiAgICAgICAgLnN0YXRlKCdhcHAucmVjb3ZlcicsIHtcbiAgICAgICAgICAgIHVybDogJy9yZWNvdmVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWNvdmVyL3JlY292ZXIuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUmVjb3ZlckN0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnYXBwLnJlY292ZXIubG9zdHBhc3N3b3JkJywge1xuICAgICAgICAgICAgdXJsOiAnL2xvc3RwYXNzd29yZCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcmVjb3Zlci9sb3N0cGFzc3dvcmQuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhcHAucmVjb3Zlci5yZXNldHBhc3N3b3JkJywge1xuICAgICAgICAgICAgdXJsOiAnL3Jlc2V0cGFzc3dvcmQnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3JlY292ZXIvcmVzZXRwYXNzd29yZC5odG1sJ1xuICAgICAgICB9KVxuXG4gICAgICAgIC8vIEFjY291bnQgcmVnaXN0cmF0aW9uXG4gICAgICAgIC5zdGF0ZSgnYXBwLnJlZ2lzdGVyJywge1xuICAgICAgICAgICAgdXJsOiAnL3JlZ2lzdGVyJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnYXBwLnJlZ2lzdGVyLmRldGFpbHMnLCB7XG4gICAgICAgICAgICB1cmw6ICcvZGV0YWlscycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXJfZGV0YWlscy5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5yZWdpc3Rlci52ZXJpZnknLCB7XG4gICAgICAgICAgICB1cmw6ICcvdmVyaWZ5JyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlcl92ZXJpZnkuaHRtbCdcbiAgICAgICAgfSlcblxuICAgICAgICAvL1xuICAgICAgICAuc3RhdGUoJ2FwcC5ob21lJywge1xuICAgICAgICAgICAgdXJsOiAnL2hvbWUnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2hvbWUvaG9tZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdIb21lQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhcHAuaW5mbycsIHtcbiAgICAgICAgICAgIHVybDogJy9pbmZvJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9pbmZvL2luZm8uaHRtbCdcbiAgICAgICAgfSlcblxuICAgICAgICAuc3RhdGUoJ2FwcC5idWdzJywge1xuICAgICAgICAgICAgdXJsOiAnL2luZm8nLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL21lbnUvcmVwb3J0Lmh0bWwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnYXBwLmNvbnRhY3QnLCB7XG4gICAgICAgICAgICB1cmw6ICcvY29udGFjdCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvY29udGFjdC9jb250YWN0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbnRhY3RDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5sZWdhbCcsIHtcbiAgICAgICAgICAgIHVybDogJy9sZWdhbCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbGVnYWwvbGVnYWwuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTGVnYWxDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5hYm91dCcsIHtcbiAgICAgICAgICAgIHVybDogJy9hYm91dCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYWJvdXQvYWJvdXQuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQWJvdXRDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC51c2VyaW5mbycsIHtcbiAgICAgICAgICAgIHVybDogJy91c2VyaW5mbycsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnVXNlckN0cmwnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3VzZXIvdXNlci5odG1sJyxcbiAgICAgICAgfSlcblxuICAgICAgICAuc3RhdGUoJ2FwcC5jb3VudGllcycsIHtcbiAgICAgICAgICAgIHVybDogJy9jb3VudGllcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvY291bnRpZXMvY291bnRpZXMuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ291bnRpZXNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5hcmVhcycsIHtcbiAgICAgICAgICAgIHVybDogJy9hcmVhcycsXG4gICAgICAgICAgICBwYXJhbXM6IHsnaWQnOiBmYWxzZSwgJ2NvdW50eSc6IGZhbHNlLCAnc2VhcmNoJzogJyd9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWFfbGlzdC9hcmVhX2xpc3QuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQXJlYXNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5jYXJkcycsIHtcbiAgICAgICAgICAgIHVybDogJy9jYXJkcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvdXNlcl9jYXJkcy91c2VyX2NhcmRzLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1VzZXJDYXJkc0N0cmwnXG4gICAgICAgIH0pXG4gICAgICAgIC5zdGF0ZSgnYXBwLmZhdm9yaXRlcycsIHtcbiAgICAgICAgICAgIHVybDogJy9mYXZvcml0ZXMnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2Zhdm9yaXRlcy9mYXZvcml0ZXMuaHRtbCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhcHAuZmlzaGVzJywge1xuICAgICAgICAgICAgdXJsOiAnL2Zpc2hlcycsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvZmlzaGVzL2Zpc2hlcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdGaXNoZXNDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5maXNoZGV0YWlsJywge1xuICAgICAgICAgICAgdXJsOiAnL2Zpc2hkZXRhaWwvOmlkJyxcbiAgICAgICAgICAgIHBhcmFtczogeydpZCc6IGZhbHNlLCAnZmlzaCc6IGZhbHNlfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9maXNoX2RldGFpbC9maXNoX2RldGFpbC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdGaXNoRGV0YWlsQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhcHAubWFwJywge1xuICAgICAgICAgICAgdXJsOiAnL21hcCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvbWFwL21hcC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYXBDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC50ZWNobmlxdWVzJywge1xuICAgICAgICAgICAgdXJsOiAnL3RlY2huaXF1ZXMnLFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3RlY2huaXF1ZXMvdGVjaG5pcXVlcy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUZWNobmlxdWVzQ3RybCdcbiAgICAgICAgfSlcbiAgICAgICAgLnN0YXRlKCdhcHAudGVjaG5pcXVlZGV0YWlsJywge1xuICAgICAgICAgICAgdXJsOiAnL3RlY2huaXF1ZWRldGFpbC86aWQnLFxuICAgICAgICAgICAgcGFyYW1zOiB7J2lkJzogZmFsc2UsICd0ZWNoJzogZmFsc2V9LFxuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL3RlY2huaXF1ZV9kZXRhaWwvdGVjaG5pcXVlX2RldGFpbC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdUZWNobmlxdWVEZXRhaWxDdHJsJ1xuICAgICAgICB9KVxuICAgICAgICAuc3RhdGUoJ2FwcC5hcmVhJywge1xuICAgICAgICAgICAgdXJsOiAnL2FyZWEvOmlkJyxcbiAgICAgICAgICAgIHZpZXdzOiB7XG4gICAgICAgICAgICAgICAgJ0BhcHAnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hcmVhL2FyZWEuaHRtbCcsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBcmVhQ3RybCcsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnaW5mb0BhcHAuYXJlYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnRzL2FyZWEvaW5mby5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFJbmZvQ3RybCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdtYXBAYXBwLmFyZWEnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50cy9hcmVhL21hcC5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFNYXBDdHJsJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2Zpc2hpbmZvQGFwcC5hcmVhJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXJlYS9maXNoLmh0bWwnLFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQXJlYUZpc2hDdHJsJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ2NhcmRzQGFwcC5hcmVhJzoge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudHMvYXJlYS9jYXJkcy5odG1sJyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0FyZWFDYXJkc0N0cmwnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnLCBbXSk7XG5hbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmRpcmVjdGl2ZXMnLCBbXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbiAgICAuY29udHJvbGxlcignQWJvdXRDdHJsJywgWyckc2NvcGUnLCckY29yZG92YUFwcFZlcnNpb24nLCAnJGlvbmljUGxhdGZvcm0nLCAnVXBkYXRlJywgZnVuY3Rpb24oJHNjb3BlLCAkY29yZG92YUFwcFZlcnNpb24sICRpb25pY1BsYXRmb3JtLCBVcGRhdGUpIHtcblx0JHNjb3BlLnZlcnNpb24gPSAkc2NvcGUuZGJEYXRlID0gJ09rw6RudCc7XG4gICAgJHNjb3BlLnVwZGF0ZSA9IFVwZGF0ZTtcblxuXHQkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcblx0ICAgIGlmICh3aW5kb3cuY29yZG92YSkge1xuXHRcdCRjb3Jkb3ZhQXBwVmVyc2lvbi5nZXRBcHBWZXJzaW9uKCkudGhlbihmdW5jdGlvbih2ZXJzaW9uKSB7XG5cdFx0ICAgIGNvbnNvbGUubG9nKCdpRmlza2UgdmVyc2lvbjonLCB2ZXJzaW9uKTtcblx0XHQgICAgJHNjb3BlLnZlcnNpb24gPSB2ZXJzaW9uO1xuXHRcdH0pO1xuXHQgICAgfVxuXHR9KTtcbn1dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0FyZWFDYXJkc0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRpb25pY01vZGFsJyxcbiAgICAnbG9jYWxTdG9yYWdlJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRpb25pY01vZGFsLCBsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVFbnRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy9BcmVhX0NhcmRzXG4gICAgICAgICAgICAkc2NvcGUuc21zdGVybXMgPSBsb2NhbFN0b3JhZ2UuZ2V0KCdzbXNfdGVybXMnKTtcbiAgICAgICAgICAgICRzY29wZS5wcmVkaWNhdGUgPSAnc28nO1xuXG4gICAgICAgICAgICAvL1NNUy1tb2RhbFxuICAgICAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL2FyZWEvc21zX21vZGFsLmh0bWwnLCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc21zX21vZGFsID0gbW9kYWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICRzY29wZS5vcGVuTW9kYWwgPSBmdW5jdGlvbihwcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNtc19tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2R1Y3QgPSBwcm9kdWN0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRzY29wZS5jbG9zZU1vZGFsID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnNtc19tb2RhbC5oaWRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLnNob3dUZXJtcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5zaG93aW5ndGVybXMgPSAhJHNjb3BlLnNob3dpbmd0ZXJtcztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkc2NvcGUuc2hvd2luZ3Rlcm1zID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vUnVsZXMgbW9kYWxcbiAgICAgICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY29tcG9uZW50cy9hcmVhL3J1bGVzX21vZGFsLmh0bWwnLCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwgPSBtb2RhbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgJHNjb3BlLm9wZW5SdWxlc01vZGFsID0gZnVuY3Rpb24ocHJvZHVjdCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5zaG93KCk7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnByb2R1Y3QgPSBwcm9kdWN0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICRzY29wZS5jbG9zZVJ1bGVzTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwuaGlkZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuc21zX21vZGFsLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0FyZWFDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckc3RhdGVQYXJhbXMnLFxuICAgICdEQicsXG4gICAgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBEQiwgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSkge1xuICAgICAgICAkc2NvcGUuaW1hZ2VfZW5kcG9pbnQgPSAnaHR0cDovL3d3dy5pZmlza2Uuc2UvJztcblxuICAgICAgICBEQi5nZXRBcmVhKCRzdGF0ZVBhcmFtcy5pZClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oYXJlYSkge1xuICAgICAgICAgICAgJHNjb3BlLmFyZWEgPSBhcmVhO1xuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ2lmaXNrZS1hcmVhJyk7XG5cbiAgICAgICAgICAgICRzY29wZS5pbWFnZXMgPSBhcmVhLmltYWdlcztcblxuICAgICAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS4kZ2V0QnlIYW5kbGUoJ3RhYnMnKS51cGRhdGUoKTtcblxuICAgICAgICAgICAgREIuZ2V0T3JnYW5pemF0aW9uKGFyZWEub3JnaWQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihvcmcpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUub3JnID0gb3JnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgREIuZ2V0QXJlYUZpc2hlcygkc3RhdGVQYXJhbXMuaWQpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGZpc2hlcykge1xuICAgICAgICAgICAgJHNjb3BlLmZpc2hlcyA9IGZpc2hlcztcbiAgICAgICAgICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUuJGdldEJ5SGFuZGxlKCd0YWJzJykudXBkYXRlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgREIuZ2V0UHJvZHVjdHNCeUFyZWEoJHN0YXRlUGFyYW1zLmlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihwcm9kdWN0cykge1xuICAgICAgICAgICAgJHNjb3BlLnByb2R1Y3RzID0gcHJvZHVjdHM7XG4gICAgICAgICAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLiRnZXRCeUhhbmRsZSgndGFicycpLnVwZGF0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdBcmVhRmlzaEN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS5zb3J0b3JkZXIgPSAnLWFtb3VudCc7XG4gICAgICAgICRzY29wZS4kb24oJyRpb25pY1ZpZXcuYmVmb3JlRW50ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgfSk7XG4gICAgfVxuXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdBcmVhSW5mb0N0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRpb25pY1NsaWRlQm94RGVsZWdhdGUnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZSkge1xuICAgICAgICAkc2NvcGUuZ290b1Byb2R1Y3RzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkaW9uaWNTbGlkZUJveERlbGVnYXRlLiRnZXRCeUhhbmRsZSgndGFicycpLnNsaWRlKDEpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmJlZm9yZUVudGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIH0pO1xuICAgIH1cbl0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignQXJlYU1hcEN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJ0RCJyxcbiAgICAnbGVhZmxldEV2ZW50cycsXG4gICAgJyRpb25pY1BsYXRmb3JtJyxcbiAgICAnJGNvcmRvdmFHZW9sb2NhdGlvbicsXG4gICAgJyRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24nLFxuICAgICckdGltZW91dCcsXG4gICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCBEQiwgbGVhZmxldEV2ZW50cywgJGlvbmljUGxhdGZvcm0sICRjb3Jkb3ZhR2VvbG9jYXRpb24sICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24sICR0aW1lb3V0LCBsb2NhbFN0b3JhZ2UpIHtcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTXlwb3Mob2JqKSB7XG4gICAgICAgICAgICAvL3JvdGF0ZSBpY29uQW5nbGUgNDUgZGVnIHNpbmNlIHRoZSBpY29uIGlzIHRpbHRlZCBieSBkZWZhdWx0XG4gICAgICAgICAgICBvYmouaWNvbkFuZ2xlID0gKG9iai5pY29uQW5nbGUgfCAwKSAtIDQ1O1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgbmFtZWQgZWxlbWVudCBpbiBvcmRlciBmb3IgdGhlIHVwZGF0ZSB0byByZWdpc3RlclxuICAgICAgICAgICAgaWYgKCRzY29wZS5tYXAubWFya2Vycy5teXBvczIpIHtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUubWFwLm1hcmtlcnMubXlwb3MyLCBvYmopO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2Vycy5teXBvcyA9ICRzY29wZS5tYXAubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5tYXAubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZS5tYXAubWFya2Vycy5teXBvcywgb2JqKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwLm1hcmtlcnMubXlwb3MyID0gJHNjb3BlLm1hcC5tYXJrZXJzLm15cG9zO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUubWFwLm1hcmtlcnMubXlwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyogbWlnaHQgbmVlZCBmb3IgaW9zXG4gICAgICAgICAgIGZ1bmN0aW9uIGdldE15cG9zKCkge1xuICAgICAgICAgICByZXR1cm4gJHNjb3BlLm1hcC5tYXJrZXJzLm15cG9zIHx8ICRzY29wZS5tYXAubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgIH1cbiAgICAgICAgICAgKi9cblxuICAgICAgICB2YXIgaWNvbnMgPSB7fTtcbiAgICAgICAgdmFyIG1hcGJveFVybCA9ICdodHRwOi8vYXBpLnRpbGVzLm1hcGJveC5jb20vdjQve21hcHR5cGV9L3t6fS97eH0ve3l9QDJ4LnBuZz9hY2Nlc3NfdG9rZW49e2FwaWtleX0nO1xuICAgICAgICB2YXIgYXBpa2V5ID0gbG9jYWxTdG9yYWdlLmdldCgnbWFwYm94X2FwaScpO1xuXG4gICAgICAgIHZhciB1cGRhdGVNYXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5tYXAuY2VudGVyID0ge1xuICAgICAgICAgICAgICAgIGxhdDogJHNjb3BlLmFyZWEubGF0LFxuICAgICAgICAgICAgICAgIGxuZzogJHNjb3BlLmFyZWEubG5nLFxuICAgICAgICAgICAgICAgIHpvb206IE51bWJlcigkc2NvcGUuYXJlYS56b29tKSA/IE51bWJlcigkc2NvcGUuYXJlYS56b29tKSA6IDlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIERCLmdldFBvaVR5cGVzKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHBvaV90eXBlcykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pX3R5cGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0eXBlID0gcG9pX3R5cGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpY29uc1t0eXBlLklEXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICRzY29wZS5pbWFnZV9lbmRwb2ludCArIHR5cGUuaWNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25BbmNob3I6IFsxNiwgMzddLCAvLyBwb2ludCBvZiB0aGUgaWNvbiB3aGljaCB3aWxsIGNvcnJlc3BvbmQgdG8gbWFya2VyJ3MgbG9jYXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMCwgLTM1XSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgREIuZ2V0UG9pcygkc2NvcGUuYXJlYS5vcmdpZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihwb2lzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvaSA9IHBvaXNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAubWFya2Vyc1sncG9pJyArIGldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAncG9pcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBwb2kubGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBwb2kubG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnNbcG9pLnR5cGVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8aDQ+JyArIHBvaS50ICsgJzwvaDQ+PHA+JyArIHBvaS5kICsgJzwvcD4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhXaWR0aDogd2luZG93LmlubmVyV2lkdGggLSA1MFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcC5tYXJrZXJzLmFyZWEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3BvaXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUuYXJlYS5sYXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6ICRzY29wZS5hcmVhLmxuZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICRzY29wZS5hcmVhLnRcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIERCLmdldFBvbHlnb25zKCRzY29wZS5hcmVhLm9yZ2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHBvbHlnb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXAucGF0aHMgPSBwb2x5Z29ucy5tYXAoZnVuY3Rpb24ocG9seSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRsbmdzOiBKU09OLnBhcnNlKCdbJyArIHBvbHkucG9seSArICddJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHBvbHkuYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC41LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogcG9seS5jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdwb2x5Z29uJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xuICAgICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICAgICAgY2VudGVyOiB7fSxcbiAgICAgICAgICAgICAgICBwYXRoczoge30sXG5cbiAgICAgICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIG15cG9zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVGhpcyBpcyB5b3UhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzQwLDQwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5jaG9yOiBbMjAsMjBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2ljb24gaW9uLW5hdmlnYXRlIG15cG9zaXRpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgbGF5ZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dGRvb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1V0b21odXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4eXonLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbWFwYm94VXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXB0eXBlOiAnbWFwYm94Lm91dGRvb3JzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBpa2V5OiBhcGlrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc2F0ZWxsaXRlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NhdGVsbGl0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAneHl6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG1hcGJveFVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwdHlwZTogJ21hcGJveC5zYXRlbGxpdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlrZXk6IGFwaWtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnU3TDpGxsZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtYXJrZXJjbHVzdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93T25TZWxlY3RvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVDbHVzdGVyaW5nQXRab29tOiA5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua2VkTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvdmVyYWdlT25Ib3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU91dHNpZGVWaXNpYmxlQm91bmRzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckaW9uaWNWaWV3LmJlZm9yZUVudGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLmFyZWEpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVNYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRzY29wZS4kb24oJ2lmaXNrZS1hcmVhJywgdXBkYXRlTWFwKTtcblxuICAgICAgICAgICAgJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJGNvcmRvdmFHZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiAzMDAwXG4gICAgICAgICAgICAgICAgfSkudGhlbihudWxsLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVNeXBvcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBwb3MuY29vcmRzLmxhdGl0dWRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcG9zLmNvb3Jkcy5sb25naXR1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgZnJlcXVlbmN5OiAzMDAwXG4gICAgICAgICAgICAgICAgfSkudGhlbihudWxsLCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihoZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlTXlwb3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25BbmdsZTogaGVhZGluZy50cnVlSGVhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRzY29wZS5uYXZpZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vdmFyIHBvcyA9IGdldE15cG9zKCk7IC8vbWlnaHQgbmVlZCBmb3IgaW9zXG4gICAgICAgICAgICAgICAgJGlvbmljUGxhdGZvcm0ucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdW5jaG5hdmlnYXRvci5uYXZpZ2F0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIFskc2NvcGUubmF2dG8ubGF0LCAkc2NvcGUubmF2dG8ubG5nXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT3BlbmluZyBuYXZpZ2F0b3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdOYXZpZ2F0aW9uIGZhaWxlZCEnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBlbmFibGVkRXZlbnRzID0gWydwb3B1cG9wZW4nLCAncG9wdXBjbG9zZSddO1xuICAgICAgICAgICAgJHNjb3BlLmV2ZW50cyA9IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBlbmFibGVkRXZlbnRzXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdsZWFmbGV0RGlyZWN0aXZlTWFya2VyLnBvcHVwb3BlbicsIGZ1bmN0aW9uKGV2ZW50LCBhcmdzKSB7XG4gICAgICAgICAgICAgICAgLy9zaG93IG5hdnRvYnV0dG9uXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5hdnRvID0gYXJncy5tb2RlbDtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkc2NvcGUuJG9uKCdsZWFmbGV0RGlyZWN0aXZlTWFya2VyLnBvcHVwY2xvc2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAvL2hpZGUgbmF2dG9idXR0b25cbiAgICAgICAgICAgICAgICAkc2NvcGUubmF2dG8gPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbl0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignQXJlYXNDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlUGFyYW1zJywgJyRpb25pY1Njcm9sbERlbGVnYXRlJyAsJ0RCJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMsICRpb25pY1Njcm9sbERlbGVnYXRlICxEQikge1xuXG4gICAgdmFyIGNvcHkgPSAkc3RhdGVQYXJhbXMuc2VhcmNoO1xuICAgICRzY29wZS5zZWFyY2ggPSBjb3B5O1xuICAgICRzY29wZS5jb3VudHkgPSAkc3RhdGVQYXJhbXMuY291bnR5O1xuICAgIERCLnNlYXJjaCgnJywgJHN0YXRlUGFyYW1zLmlkKVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICRzY29wZS5hcmVhcyA9IGRhdGE7XG4gICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgfSk7XG4gICAgJHNjb3BlLmNsZWFyU2VhcmNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICRzY29wZS5zZWFyY2ggPSAnJztcbiAgICB9O1xuICAgICRzY29wZS5zY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuc2Nyb2xsVG9wKCk7XG4gICAgfTtcblxufV0pO1xuXG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdDb250YWN0Q3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgbG9jYWxTdG9yYWdlKSB7XG4gICAgICAgICRzY29wZS5jb250YWN0SW5mbyA9IGxvY2FsU3RvcmFnZS5nZXQoJ2NvbnRhY3RJbmZvJyk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdDb3VudGllc0N0cmwnLCBbJyRzY29wZScsICdEQicsIGZ1bmN0aW9uKCRzY29wZSwgREIpIHtcbiAgICBEQi5nZXRDb3VudGllcygpXG4gICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAkc2NvcGUuY291bnRpZXMgPSBkYXRhO1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignRmlzaERldGFpbEN0cmwnLCBbJyRzY29wZScsICckc3RhdGVQYXJhbXMnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgREIpIHtcbiAgICAkc2NvcGUuZmlzaCA9ICRzdGF0ZVBhcmFtcy5maXNoO1xuICAgICRzY29wZS5pbWFnZV9lbmRwb2ludCA9ICdodHRwOi8vd3d3LmlmaXNrZS5zZSc7XG4gICAgaWYoISRzY29wZS5maXNoKSB7XG4gICAgICAgIERCLmdldEZpc2goJHN0YXRlUGFyYW1zLmlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuZmlzaCA9IGRhdGE7XG4gICAgY29uc29sZS5sb2coJHNjb3BlLmZpc2gpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZygkc2NvcGUuZmlzaCk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdGaXNoZXNDdHJsJywgWyckc2NvcGUnLCAnREInLCBmdW5jdGlvbigkc2NvcGUsIERCKSB7XG4gICAgJHNjb3BlLnNvcnRvcmRlciA9ICdzbyc7XG4gICAgJHNjb3BlLmltYWdlX2VuZHBvaW50ID0gJ2h0dHA6Ly93d3cuaWZpc2tlLnNlJztcbiAgICBEQi5nZXRGaXNoZXMoKVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgJHNjb3BlLmZpc2hlcyA9IGRhdGE7XG4gICAgICAgICRzY29wZS5kZWZhdWx0X2ltZyA9IGRhdGFbMF0uaW1nO1xuICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignSG9tZUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZScsXG4gICAgJyRpb25pY0hpc3RvcnknLFxuICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICdzZXNzaW9uRGF0YScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRpb25pY0hpc3RvcnksIGxvY2FsU3RvcmFnZSwgc2Vzc2lvbkRhdGEpIHtcblxuICAgICAgICAkc2NvcGUubG9nZ2VkSW4gPSBzZXNzaW9uRGF0YTtcblxuICAgICAgICAvLyBDdXJyZW50IGhpc3Rvcnkgc3RhY2sgSWQuIFNlZSBhcmVhX2NvbnRyb2xsZXIgZm9yIHVzYWdlLlxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdob21lSGlzdG9yeUlkJywgJGlvbmljSGlzdG9yeS5jdXJyZW50SGlzdG9yeUlkKCkpO1xuXG4gICAgICAgICRzY29wZS5teUZ1bmMgPSBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgIGlmKCRldmVudC5rZXlDb2RlID09IDEzICYmICEkZXZlbnQuc2hpZnRLZXkpIHsgLy9pZiBlbnRlci1rZXlcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5hcmVhcycsIHtzZWFyY2g6ICRldmVudC5zcmNFbGVtZW50LnZhbHVlfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfTtcbiAgICB9XG5dKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuLmNvbnRyb2xsZXIoJ0xlZ2FsQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICdsb2NhbFN0b3JhZ2UnLCBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgbG9jYWxTdG9yYWdlKSB7XG4gICAgJHNjb3BlLnRvcyA9IGxvY2FsU3RvcmFnZS5nZXQoJ3RvcycpO1xufV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4gICAgLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIFtcblx0JyRzY29wZScsIFxuXHQnJHN0YXRlJywgXG5cdCdVcGRhdGUnLCBcblx0JyRpb25pY0xvYWRpbmcnLCBcblx0JyRpb25pY0hpc3RvcnknLCBcblx0JyRpb25pY1ZpZXdTd2l0Y2hlcicsIFxuXHRmdW5jdGlvbigkc2NvcGUsICRzdGF0ZSwgVXBkYXRlLCAkaW9uaWNMb2FkaW5nLCAkaW9uaWNIaXN0b3J5LCAkaW9uaWNWaWV3U3dpdGNoZXIpIHtcblxuXHQgICAgLyoqXG5cdCAgICAgKiBzaWduSW5cblx0ICAgICAqIFN1Ym1pdCBoYW5kbGVyIGZvciBsb2dpbiBmb3JtLiBWYWxpZGF0ZXMgbG9naW4gaW5wdXQuIFxuXHQgICAgICogTW92ZXMgdG8gaG9tZSB2aWV3IG9uIHN1Y2Nlc3NmdWwgbG9naW4uXG5cdCAgICAgKi9cblx0ICAgICRzY29wZS5zaWduSW4gPSBmdW5jdGlvbihsb2dpbkZvcm0pIHtcblx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblxuXHRcdFVwZGF0ZS51c2VyX2xvZ2luKGxvZ2luRm9ybS51c2VybmFtZS4kdmlld1ZhbHVlLCBsb2dpbkZvcm0ucGFzc3dvcmQuJHZpZXdWYWx1ZSlcblx0XHQgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0JGlvbmljTG9hZGluZy5oaWRlKCk7XG5cdFx0XHRsb2dpbkZvcm0uJHNldFZhbGlkaXR5KFwibG9naW5FcnJvclwiLCB0cnVlKTtcblx0XHRcdCRpb25pY1ZpZXdTd2l0Y2hlci5uZXh0RGlyZWN0aW9uKCdmb3J3YXJkJyk7XG5cdFx0XHQkc3RhdGUuZ28oJ2FwcC5ob21lJyk7XG5cdFx0ICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG5cdFx0XHQkaW9uaWNMb2FkaW5nLmhpZGUoKTtcblx0XHRcdGxvZ2luRm9ybS4kc2V0VmFsaWRpdHkoXCJsb2dpbkVycm9yXCIsIGZhbHNlKTtcblx0XHRcdCRzY29wZS5lcnJvciA9IGVycm9yLnJlc3BvbnNlO1xuXHRcdCAgICB9KTtcblx0ICAgIH07XG5cblx0ICAgIC8qKiBcblx0ICAgICAqIHNraXBcblx0ICAgICAqIFNraXBzIHRvIHRoZSBob21lIHZpZXcuIEZvcmNlcyBmb3J3YXJkIHRyYW5zaXRpb24gYW5kIHNldHMgaG9tZSBhcyByb290IHZpZXcuXG5cdCAgICAgKi9cblx0ICAgICRzY29wZS5za2lwID0gZnVuY3Rpb24oKSB7XG5cdFx0JGlvbmljVmlld1N3aXRjaGVyLm5leHREaXJlY3Rpb24oJ2ZvcndhcmQnKTtcblx0XHQkaW9uaWNIaXN0b3J5Lm5leHRWaWV3T3B0aW9ucyhcblx0XHQgICAge1xuXHRcdFx0ZGlzYWJsZUJhY2s6IHRydWUsXG5cdFx0XHRoaXN0b3J5Um9vdDogdHJ1ZVxuXHRcdCAgICB9KTtcblx0XHQkc3RhdGUuZ28oJ2FwcC5ob21lJyk7XG5cdCAgICB9O1xuXHR9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdNYXBDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICdsZWFmbGV0RGF0YScsXG4gICAgJyRpb25pY1BsYXRmb3JtJyxcbiAgICAnREInLFxuICAgICckY29yZG92YUdlb2xvY2F0aW9uJyxcbiAgICAnJGNvcmRvdmFEZXZpY2VPcmllbnRhdGlvbicsXG4gICAgJyR0aW1lb3V0JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsIGxlYWZsZXREYXRhLCAkaW9uaWNQbGF0Zm9ybSwgREIsICRjb3Jkb3ZhR2VvbG9jYXRpb24sICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24sICR0aW1lb3V0KSB7XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlTXlwb3Mob2JqKSB7XG4gICAgICAgICAgICAvL3JvdGF0ZSBpY29uQW5nbGUgNDUgZGVnIHNpbmNlIHRoZSBpY29uIGlzIHRpbHRlZCBieSBkZWZhdWx0XG4gICAgICAgICAgICBvYmouaWNvbkFuZ2xlID0gKG9iai5pY29uQW5nbGUgfCAwKSAtIDQ1O1xuICAgICAgICAgICAgLyogSGFja2ZpeCB0byBtYWtlIGl0IHVwZGF0ZSA9KCAqL1xuICAgICAgICAgICAgaWYoJHNjb3BlLm1hcmtlcnMubXlwb3MyKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLm1hcmtlcnMubXlwb3MyLCBvYmopO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLm15cG9zID0gJHNjb3BlLm1hcmtlcnMubXlwb3MyO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUubWFya2Vycy5teXBvczI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZS5tYXJrZXJzLm15cG9zLCBvYmopO1xuICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLm15cG9zMiA9ICRzY29wZS5tYXJrZXJzLm15cG9zO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUubWFya2Vycy5teXBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXBib3hVcmwgPSAnaHR0cDovL2FwaS50aWxlcy5tYXBib3guY29tL3Y0L3ttYXB0eXBlfS97en0ve3h9L3t5fUAyeC5wbmc/YWNjZXNzX3Rva2VuPXthcGlrZXl9JztcbiAgICAgICAgdmFyIGFwaWtleSA9IGxvY2FsU3RvcmFnZS5nZXQoJ21hcGJveF9hcGknKTtcblxuICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICAgIGxhdDogNjIuMCxcbiAgICAgICAgICAgICAgICBsbmc6IDE1LjAsXG4gICAgICAgICAgICAgICAgem9vbTogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxheWVyczoge1xuICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ZG9vcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdVdG9taHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd4eXonLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtYXBib3hVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXB0eXBlOiAnbWFwYm94Lm91dGRvb3JzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlrZXk6IGFwaWtleVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzYXRlbGxpdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTYXRlbGxpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAneHl6JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbWFwYm94VXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwdHlwZTogJ21hcGJveC5zYXRlbGxpdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaWtleTogYXBpa2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpc2hhcmVhczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0Zpc2tlb21yw6VkZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21hcmtlcmNsdXN0ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPblNlbGVjdG9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQ2x1c3RlcmluZ0F0Wm9vbTogOSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaHVua2VkTG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q292ZXJhZ2VPbkhvdmVyOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPdXRzaWRlVmlzaWJsZUJvdW5kczogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgbXlwb3M6IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiAwLFxuICAgICAgICAgICAgICAgICAgICBsbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgIGljb25BbmdsZTogLTQ1LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnaGkhJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzQwLDQwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25BbmNob3I6IFsyMCwyMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdpY29uIGlvbi1uYXZpZ2F0ZSBteXBvc2l0aW9uJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRjb3Jkb3ZhR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbih7XG4gICAgICAgICAgICAgICAgZnJlcXVlbmN5OiAzMDAwXG4gICAgICAgICAgICB9KS50aGVuKG51bGwsIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihwb3MpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNeXBvcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHBvcy5jb29yZHMubGF0aXR1ZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHBvcy5jb29yZHMubG9uZ2l0dWRlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRjb3Jkb3ZhRGV2aWNlT3JpZW50YXRpb24ud2F0Y2hIZWFkaW5nKHtcbiAgICAgICAgICAgICAgICBmcmVxdWVuY3k6IDMwMDBcbiAgICAgICAgICAgIH0pLnRoZW4obnVsbCwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGhlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNeXBvcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5nbGU6IGhlYWRpbmcudHJ1ZUhlYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVFbnRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hpIScpO1xuICAgICAgICAgICAgREIuc2VhcmNoKCcnKS50aGVuKGZ1bmN0aW9uKGFyZWFzKSB7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGFyZWFzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gYXJlYXNbaV07XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzWydhcmVhJyArIGldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdmaXNoYXJlYXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBhLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogYS5sbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNZXNzYWdlU2NvcGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdfc2NvcGUgPSAkc2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19zY29wZS5hcmVhID0gYTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3X3Njb3BlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8YSB1aS1zcmVmPVwiYXBwLmFyZWEoe2lkOiBhcmVhLklEIH0pXCI+e3thcmVhLnR9fTwvYT4nXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbl0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignTWVudUN0cmwnLCBbXG4gICAgJyRzY29wZScsXG4gICAgJyRzdGF0ZScsXG4gICAgJyRpb25pY1ZpZXdTd2l0Y2hlcicsXG4gICAgJyRpb25pY1BvcG92ZXInLFxuICAgICdzZXNzaW9uRGF0YScsXG4gICAgJ1VwZGF0ZScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRpb25pY1ZpZXdTd2l0Y2hlciwgJGlvbmljUG9wb3Zlciwgc2Vzc2lvbkRhdGEsIFVwZGF0ZSkge1xuXG4gICAgICAgICRzY29wZS5zZXNzaW9uRGF0YSA9IHNlc3Npb25EYXRhO1xuXG4gICAgICAgICRpb25pY1BvcG92ZXIuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL21lbnUvcG9wb3Zlci5odG1sJywge1xuICAgICAgICAgICAgc2NvcGU6ICRzY29wZVxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKHBvcG92ZXIpIHtcbiAgICAgICAgICAgICRzY29wZS5wb3BvdmVyID0gcG9wb3ZlcjtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJHNjb3BlLnVzZXJpbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC51c2VyaW5mbycpO1xuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG4gICAgICAgICAgICBVcGRhdGUudXNlcl9sb2dvdXQoKTtcblxuICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAubG9naW4nKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG4gICAgICAgICAgICAkaW9uaWNWaWV3U3dpdGNoZXIubmV4dERpcmVjdGlvbignYmFjaycpO1xuICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAubG9naW4nKTtcbiAgICAgICAgfTtcbiAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucG9wb3Zlci5oaWRlKCk7XG4gICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5yZWdpc3Rlci5kZXRhaWxzJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLmZvcmNlZFVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgVXBkYXRlLmZvcmNlZFVwZGF0ZSgpO1xuICAgICAgICB9O1xuXG4gICAgfVxuXSk7XG4iLCJcbmFuZ3VsYXIubW9kdWxlKCdpZmlza2UuY29udHJvbGxlcnMnKVxuICAgIC5jb250cm9sbGVyKCdSZWNvdmVyQ3RybCcsIFtcblx0JyRzY29wZScsXG5cdCckc3RhdGUnLFxuXHQnJGlvbmljSGlzdG9yeScsXG5cdCckaW9uaWNQbGF0Zm9ybScsXG5cdCckaW9uaWNMb2FkaW5nJyxcblx0JyRjb3Jkb3ZhVG9hc3QnLFxuXHQnQVBJJyxcblx0ZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGUsICRpb25pY0hpc3RvcnksICRpb25pY1BsYXRmb3JtLCAkaW9uaWNMb2FkaW5nLCAkY29yZG92YVRvYXN0LCBBUEkpIHtcblx0ICAgICd1c2Ugc3RyaWN0Jztcblx0ICAgIFxuXHQgICAgdmFyIHVzZXIgPSBcIlwiO1xuXHQgICAgXG5cdCAgICAvKipcbiAgICAgICAgICAgICAqIFRvRG86IHVzZSB0byBza2lwIGZyb20gbG9zdHBhc3N3b3JkIHRvIHJlc2V0cGFzc3dvcmRcblx0ICAgICAqIHNraXBcblx0ICAgICAqIFN1Ym1pdCBoYW5kbGVyIGZvciBza2lwIGJ1dHRvblxuXHQgICAgICovXG4gICAgICAgICAgICAvKlxuXHQgICAgICAkc2NvcGUuc2tpcCA9IGZ1bmN0aW9uKCkge1xuXHQgICAgICAkc2NvcGUuaW5mbyA9IFwiXCI7XG5cdCAgICAgICRzdGF0ZS5nbygnXi5yZXNldHBhc3N3b3JkJyk7XG5cdCAgICAgIH07XG4gICAgICAgICAgICAqL1x0ICAgIFxuXG5cdCAgICAvKipcblx0ICAgICAqIGxvc3RQYXNzd29yZFxuXHQgICAgICogU3VibWl0IGhhbmRsZXIgZm9yIGZpcnN0IGZvcm1cblx0ICAgICAqL1xuXHQgICAgJHNjb3BlLmxvc3RQYXNzd29yZCA9IGZ1bmN0aW9uKGZvcm0pIHtcblxuXHQgICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG5cdCAgICAgICAgdXNlciA9IGZvcm0udXNlci4kdmlld1ZhbHVlO1xuXG5cdCAgICAgICAgQVBJLnVzZXJfbG9zdF9wYXNzd29yZCh1c2VyKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcblx0XHRcdC8vIFNldCBpbmZvIG1lc3NhZ2UgZm9yIG5leHQgdmlld1xuXHRcdFx0JHNjb3BlLmluZm8gPSAnRW4gw6V0ZXJzdMOkbGxuaW5nc2tvZCBrb21tZXIgc2tpY2thcyB0aWxsIGRpZyBpbm9tIGtvcnQsIHZpYSAnO1x0XHRcdFxuXHRcdFx0aWYgKGRhdGEubWFpbGVkKSB7XG5cdFx0XHQgICAgJHNjb3BlLmluZm8gKz0gJ2UtbWFpbCc7XG5cdFx0XHQgICAgaWYgKGRhdGEudGV4dGVkKSB7XG5cdFx0XHRcdCRzY29wZS5pbmZvICs9ICcgb2NoICc7XG5cdFx0XHQgICAgfVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGEudGV4dGVkKSB7XG5cdFx0XHQgICAgJHNjb3BlLmluZm8gKz0gJ1NNUyc7XG5cdFx0XHR9XG4gICAgICAgICAgICAgICAgICAgICAgICBcblx0XHRcdCRzdGF0ZS5nbygnXi5yZXNldHBhc3N3b3JkJyk7XG5cblx0XHQgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdC8vVG9EbzogaGFuZGxlIHRpbWVvdXQ/XG5cdFx0XHQvL1RvRG86IGNoZWNrIGVycm9yIGNvZGVzP1xuXHRcdFx0Zm9ybS51c2VyLiRzZXRWYWxpZGl0eSgnaW52YWxpZFVzZXInLCBmYWxzZSk7XG5cdFx0ICAgIH0pXG5cdFx0ICAgIC5maW5hbGx5KCRpb25pY0xvYWRpbmcuaGlkZSk7XG5cdCAgICB9O1xuXG5cblx0ICAgIC8qKlxuXHQgICAgICogcmVzZXRQYXNzd29yZFxuXHQgICAgICogU3VibWl0IGhhbmRsZXIgZm9yIHNlY29uZCBmb3JtXG5cdCAgICAgKlxuXHQgICAgICogVG9EbzogbG9nIGluIGltbWVkaWF0ZWx5P1xuXHQgICAgICovXG5cdCAgICAkc2NvcGUucmVzZXRQYXNzd29yZCA9IGZ1bmN0aW9uKGZvcm0pIHtcblx0XHQkaW9uaWNMb2FkaW5nLnNob3coKTtcblx0XHRcblx0XHRcblx0XHRBUEkudXNlcl9yZXNldF9wYXNzd29yZCh1c2VyLCBmb3JtLnBhc3N3b3JkLiR2aWV3VmFsdWUsIGZvcm0uY29kZS4kdmlld1ZhbHVlKVxuXHRcdCAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG5cdFx0XG4gICAgICAgICAgICAgICAgICAgICAgICAvL1RvRG86IGhhbmRsZSB0aW1lb3V0cz9cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9Ub0RvOiAucmVhZHkoKSBuZWVkZWQ/XG5cdCAgICAgICAgICAgICAgICAvLyBTdWNjZXNzIHRvYXN0XG5cdFx0ICAgICAgICAkaW9uaWNQbGF0Zm9ybS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHQgICAgICAgICAgICAkY29yZG92YVRvYXN0LnNob3dMb25nQm90dG9tKCdEaXR0IGzDtnNlbm9yZCBoYXIgw6RuZHJhdHMnKTtcblx0XHQgICAgICAgIH0pO1xuXHQgICAgICAgIFx0XHRcdFxuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdhcHAubG9naW4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmF2aWdhdGUgdG8gY3VycmVudCBoaXN0b3J5IHJvb3Q/XG5cdFx0XHQvLyRpb25pY0hpc3RvcnkuZ29Ub0hpc3RvcnlSb290KCRpb25pY0hpc3RvcnkuY3VycmVudFZpZXcoKS5oaXN0b3J5SWQpO1x0XG5cdFx0ICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2goZXJyb3IuZXJyb3JfY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLypjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pbnZhbGlkZSB1c2VybmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyovXG4gICAgICAgICAgICAgICAgICAgICAgICAvKmNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5wYXNzd29yZC4kc2V0VmFsaWRpdHkoJ3Bhc3N3b3JkTGVuZ3RoJywgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyovXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE2OlxuXHRcdCAgICAgICAgICAgIGZvcm0uY29kZS4kc2V0VmFsaWRpdHkoJ2ludmFsaWRDb2RlJyxmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cdFx0ICAgIH0pXG5cdFx0ICAgIC5maW5hbGx5KCRpb25pY0xvYWRpbmcuaGlkZSk7XG5cdCAgICB9O1xuXHR9XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbiAgICAuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgW1xuICAgICAgICAnJHNjb3BlJyxcbiAgICAgICAgJyRzdGF0ZScsXG4gICAgICAgICckaW9uaWNMb2FkaW5nJyxcbiAgICAgICAgJyRpb25pY01vZGFsJyxcbiAgICAgICAgJyRpb25pY1Njcm9sbERlbGVnYXRlJyxcbiAgICAgICAgJyRpb25pY1BsYXRmb3JtJyxcbiAgICAgICAgJyRjb3Jkb3ZhVG9hc3QnLFxuICAgICAgICAnQVBJJyxcbiAgICAgICAgJ2xvY2FsU3RvcmFnZScsXG4gICAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlLCAkaW9uaWNMb2FkaW5nLCAkaW9uaWNNb2RhbCwgJGlvbmljU2Nyb2xsRGVsZWdhdGUsICRpb25pY1BsYXRmb3JtLCAkY29yZG92YVRvYXN0LCBBUEksIGxvY2FsU3RvcmFnZSkge1xuXG4gICAgICAgICAgICB2YXIgdXNlcm5hbWU7XG5cbiAgICAgICAgICAgIC8vIExpdmUgY2hlY2sgZm9yIHVzZXJuYW1lIGF2YWlsYWJpbGl0eVxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrVXNlcm5hbWUgPSBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICAgICAgICAgIEFQSS51c2VyX2V4aXN0cyhpbnB1dC4kdmlld1ZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC4kc2V0VmFsaWRpdHkoJ25hbWVUYWtlbicsICFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBMaXZlIGNoZWNrIGZvciBlbWFpbCBhdmFpbGFiaWxpdHlcbiAgICAgICAgICAgICRzY29wZS5jaGVja0VtYWlsID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBBUEkudXNlcl9leGlzdHMobnVsbCwgaW5wdXQuJHZpZXdWYWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuJHNldFZhbGlkaXR5KCdlbWFpbFRha2VuJywgIWRhdGEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgLy8gVmFsaWRhdGlvbiBlcnJvcnMgbm90IHRpZWQgdG8gaW5wdXQgZmllbGRcbiAgICAgICAgICAgICRzY29wZS5mb3JtRXJyb3JzID0ge307XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogcmVnaXN0ZXJcbiAgICAgICAgICAgICAqIFN1Ym1pdCBoYW5kbGVyIGZvciB0aGUgcmVnaXN0cmF0aW9uIGZvcm1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgLy8gU2F2ZSBwaG9uZSBudW1iZXIgZm9yIG5leHQgdmlld1xuICAgICAgICAgICAgICAgICRzY29wZS5waG9uZSA9IGZvcm0ucGhvbmUuJHZpZXdWYWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFNhdmUgdXNlcm5hbWUgZm9yIHZlcmlmeSBzdWJtaXQgaGFuZGxlclxuICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gZm9ybS51c2VybmFtZS4kdmlld1ZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhc3N3b3JkID0gZm9ybS5wYXNzd29yZC4kdmlld1ZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBmdWxsbmFtZSA9IGZvcm0uZnVsbG5hbWUuJHZpZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZW1haWwgPSBmb3JtLmVtYWlsLiR2aWV3VmFsdWU7XG5cbiAgICAgICAgICAgICAgICBBUEkudXNlcl9yZWdpc3Rlcih1c2VybmFtZSwgZnVsbG5hbWUsIHBhc3N3b3JkLCBlbWFpbCwgJHNjb3BlLnBob25lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdWNjZXNzOiBHbyB0byB2ZXJpZnkgYWNjb3VudCB2aWV3XG4gICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtRXJyb3JzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ14udmVyaWZ5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogRXJyb3I6IEluZm9ybSB0aGUgdXNlciBhYm91dCBmYWlsZWQgcmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgKiBTZWUgQVBJIGRvY3VtZW50YXRpb24gZm9yIGVycm9yIGNvZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICogVG9EbzogSGFuZGxlIHRpbWVvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1FcnJvcnMucmVnaXN0cmF0aW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljU2Nyb2xsRGVsZWdhdGUuc2Nyb2xsVG9wKHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIEVtYWlsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IuZXJyb3JfY29kZSA9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5lbWFpbC4kc2V0VmFsaWRpdHkoJ2ludmFsaWRFbWFpbCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXJuYW1lIG9yIEVtYWlsIGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmVycm9yX2NvZGUgPT0gOSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja1VzZXJuYW1lKGZvcm0udXNlcm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja0VtYWlsKGZvcm0uZW1haWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBwaG9uZSBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5lcnJvcl9jb2RlID09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5waG9uZS4kc2V0VmFsaWRpdHkoJ2ludmFsaWRQaG9uZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHZlcmlmeVxuICAgICAgICAgICAgICogU3VibWl0IGhhbmRsZXIgZm9yIHRoZSB2ZXJpZmljYXRpb24gZm9ybVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICAkc2NvcGUudmVyaWZ5ID0gZnVuY3Rpb24oZm9ybSkge1xuICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHZlcmNvZGUgPSBmb3JtLnZlcmNvZGU7XG5cbiAgICAgICAgICAgICAgICBBUEkudXNlcl9jb25maXJtKHVzZXJuYW1lLCB2ZXJjb2RlLiR2aWV3VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY1BsYXRmb3JtLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhVG9hc3Quc2hvd0xvbmdCb3R0b20oJ0RpdHQga29udG8gaGFyIHNrYXBhdHMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1FcnJvcnMudmFsaWRhdGlvbkVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ2FwcC5sb2dpbicpO1xuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yLmVycm9yX2NvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJjb2RlLiRzZXRWYWxpZGl0eShcInZlcmlmaWVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1FcnJvcnMudmFsaWRhdGlvbkVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbmFsbHkoJGlvbmljTG9hZGluZy5oaWRlKCkpO1xuICAgICAgICAgICAgfTtcblxuXG4gICAgICAgICAgICAkc2NvcGUudG9zID0gbG9jYWxTdG9yYWdlLmdldCgndG9zJyk7XG4gICAgICAgICAgICAvL01vZGFsIHdpdGggdGhlIEVVTEFcbiAgICAgICAgICAgICRpb25pY01vZGFsLmZyb21UZW1wbGF0ZVVybCgnY29tcG9uZW50cy9yZWdpc3Rlci9ldWxhLmh0bWwnLCB7XG4gICAgICAgICAgICAgICAgc2NvcGU6ICRzY29wZSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24obW9kYWwpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXVsYSA9IG1vZGFsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkc2NvcGUuc2hvd0V1bGEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXVsYS5zaG93KCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRXVsYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ldWxhLmhpZGUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5ldWxhLnJlbW92ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfV0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS5jb250cm9sbGVycycpXG4uY29udHJvbGxlcignVGVjaG5pcXVlRGV0YWlsQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsICdEQicsICckaW9uaWNTbGlkZUJveERlbGVnYXRlJywgZnVuY3Rpb24oJHNjb3BlLCAkc3RhdGVQYXJhbXMsIERCLCAkaW9uaWNTbGlkZUJveERlbGVnYXRlKSB7XG4gICAgJHNjb3BlLmltYWdlX2VuZHBvaW50ID0gJ2h0dHA6Ly93d3cuaWZpc2tlLnNlJztcbiAgICAkc2NvcGUudGVjaCA9ICRzdGF0ZVBhcmFtcy50ZWNoO1xuICAgICRzY29wZS5pbWFnZXMgPSBbXTtcblxuICAgIGlmKCEkc2NvcGUudGVjaCkge1xuICAgICAgICBEQi5nZXRUZWNobmlxdWUoJHN0YXRlUGFyYW1zLmlkKVxuICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAkc2NvcGUuaW1hZ2VzID0gW2RhdGEuaW1nMSwgZGF0YS5pbWcyLCBkYXRhLmltZzNdLmZpbHRlcihmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhL1xcLyQvLnRlc3QoZWwpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICRpb25pY1NsaWRlQm94RGVsZWdhdGUudXBkYXRlKCk7XG4gICAgICAgICAgICAkc2NvcGUudGVjaCA9IGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkYXRhID0gJHNjb3BlLnRlY2g7XG4gICAgICAgICRzY29wZS5pbWFnZXMgPSBbZGF0YS5pbWcxLCBkYXRhLmltZzIsIGRhdGEuaW1nM10uZmlsdGVyKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gIS9cXC8kLy50ZXN0KGVsKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGlvbmljU2xpZGVCb3hEZWxlZ2F0ZS51cGRhdGUoKTtcbiAgICB9XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdUZWNobmlxdWVzQ3RybCcsIFsnJHNjb3BlJywgJ0RCJywgZnVuY3Rpb24oJHNjb3BlLCBEQikge1xuICAgIERCLmdldFRlY2huaXF1ZXMoKVxuICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICRzY29wZS50ZWNobmlxdWVzID0gZGF0YTtcbiAgICB9KTtcbiAgICAkc2NvcGUuaW1hZ2VfZW5kcG9pbnQgPSAnaHR0cDovL3d3dy5pZmlza2Uuc2UnO1xuICAgICRzY29wZS5zb3J0b3JkZXIgPSAnc28nO1xuXG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdVc2VyQ3RybCcsIFsnJHNjb3BlJywgJ0RCJywgZnVuY3Rpb24oJHNjb3BlLCBEQikge1xuICAgIERCLmdldFVzZXJJbmZvKClcbiAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICRzY29wZS51c2VyID0gdXNlcjtcbiAgICB9KTtcbiAgICBEQi5nZXRVc2VyTnVtYmVycygpXG4gICAgLnRoZW4oZnVuY3Rpb24obnVtYmVycykge1xuICAgICAgICAkc2NvcGUubnVtYmVycyA9IG51bWJlcnM7XG4gICAgfSk7XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmNvbnRyb2xsZXJzJylcbi5jb250cm9sbGVyKCdVc2VyQ2FyZHNDdHJsJywgW1xuICAgICckc2NvcGUnLFxuICAgICckc3RhdGVQYXJhbXMnLFxuICAgICdEQicsXG4gICAgJ1VwZGF0ZScsXG4gICAgJyRpb25pY01vZGFsJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRzdGF0ZVBhcmFtcywgREIsIFVwZGF0ZSwgJGlvbmljTW9kYWwpIHtcbiAgICAgICAgJHNjb3BlLnByZWQgPSAnLXRvJztcbiAgICAgICAgJHNjb3BlLmVuZHBvaW50ID0gJ2h0dHBzOi8vd3d3LmlmaXNrZS5zZSc7XG5cbiAgICAgICAgdmFyIGluaXRpbGl6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHNjb3BlLm5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBEQi5nZXRVc2VyUHJvZHVjdHMoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wcm9kdWN0cyA9IGRhdGE7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGlvbmljVmlldy5iZWZvcmVFbnRlcicsIGluaXRpbGl6ZSk7XG4gICAgICAgIC8vdXNlIHRoZSBzYW1lIG1vZGFsIGFzIGluIGFyZWFfY2FyZHNcbiAgICAgICAgJGlvbmljTW9kYWwuZnJvbVRlbXBsYXRlVXJsKCdjb21wb25lbnRzL2FyZWFfY2FyZHMvcnVsZXNfbW9kYWwuaHRtbCcsIHtcbiAgICAgICAgICAgIHNjb3BlOiAkc2NvcGUsXG4gICAgICAgICAgICBhbmltYXRpb246ICdzbGlkZS1pbi11cCdcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihtb2RhbCkge1xuICAgICAgICAgICAgJHNjb3BlLnJ1bGVzX21vZGFsID0gbW9kYWw7XG4gICAgICAgIH0pO1xuICAgICAgICAkc2NvcGUub3BlblJ1bGVzTW9kYWwgPSBmdW5jdGlvbihwcm9kdWN0KSB7XG4gICAgICAgICAgICAkc2NvcGUucnVsZXNfbW9kYWwuc2hvdygpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocHJvZHVjdCk7XG4gICAgICAgICAgICAkc2NvcGUucHJvZHVjdCA9IHByb2R1Y3Q7XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jbG9zZVJ1bGVzTW9kYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5oaWRlKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICRzY29wZS5ydWxlc19tb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFVwZGF0ZS51cGRhdGUoKVxuICAgICAgICAgICAgLmZpbmFsbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoJ3Njcm9sbC5yZWZyZXNoQ29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBpbml0aWxpemUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbl0pO1xuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIsIHVuZGVmaW5lZCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdpZmlza2UuYXBpJywgWydpZmlza2UudXRpbHMnXSlcbiAgICAucHJvdmlkZXIoJ0FQSScsIGZ1bmN0aW9uIEFQSVByb3ZpZGVyKCkge1xuXG4gICAgICAgIHRoaXMuYmFzZV91cmwgPSAnaHR0cHM6Ly93d3cuaWZpc2tlLnNlL2FwaS92Mi9hcGkucGhwJztcblxuICAgICAgICB0aGlzLiRnZXQgPSBbXG4gICAgICAgICAgICAnJGh0dHAnLFxuICAgICAgICAgICAgJ3Nlc3Npb25EYXRhJyxcbiAgICAgICAgICAgICdsb2NhbFN0b3JhZ2UnLFxuICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRodHRwLCBzZXNzaW9uRGF0YSwgbG9jYWxTdG9yYWdlLCAkcSkge1xuICAgICAgICAgICAgICAgIHZhciBiYXNlX3VybCA9IHRoaXMuYmFzZV91cmw7XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiAjIGFwaV9jYWxsICNcbiAgICAgICAgICAgICAgICAgKiBoYW5kbGVzIGh0dHAgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgKiByZXR1cm5zIGEgJGh0dHAgb2JqZWN0IGZvciB0aGUgcmVxdWVzdGVkIGFwaSBjYWxsXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIGFwaV9jYWxsID0gZnVuY3Rpb24ocGFyYW1zLCBjYWNoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDonZ2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBiYXNlX3VybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBhbmd1bGFyLmV4dGVuZChwYXJhbXMsIHsna2V5JzogJzAxMjM0NTY3ODlhYmNkZWYnfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAoY2FjaGUgIT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvRG86IFByb3BlciBsb2dnaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoZGF0YS5kYXRhLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLy5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMsIGhlYWRlcnMsIGNvbmZpZywgc3RhdHVzVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdCB0aW1lb3V0JykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqICMgc2Vzc2lvbl9hcGlfY2FsbCAjXG4gICAgICAgICAgICAgICAgICogd3JhcHBlciBmb3IgYXBpX2NhbGwgLSBpbnNlcnRzIHRoZSBzZXNzaW9uIHRva2VuIGludG8gcGFyYW1zXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgdmFyIHNlc3Npb25fYXBpX2NhbGwgPSBmdW5jdGlvbihwYXJhbXMsIGNhY2hlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uID0gc2Vzc2lvbkRhdGEudG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbChhbmd1bGFyLmV4dGVuZChwYXJhbXMsIHtzOiBzZXNzaW9ufSksIGNhY2hlKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0X211bmljaXBhbGl0aWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9tdW5pY2lwYWxpdGllcyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X2NvdW50aWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9jb3VudGllcyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9leGlzdHM6IGZ1bmN0aW9uKHVzZXJuYW1lLCBlbWFpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSB7bTogJ3VzZXJfZXhpc3RzJ307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VybmFtZSAmJiB0eXBlb2YgdXNlcm5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJncy51c2VybmFtZSA9IHVzZXJuYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVtYWlsICYmIHR5cGVvZiBlbWFpbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzLmVtYWlsID0gZW1haWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbChhcmdzLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfcmVnaXN0ZXI6IGZ1bmN0aW9uKHVzZXJuYW1lLCBmdWxsbmFtZSwgcGFzc3dvcmQsIGVtYWlsLCBwaG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAndXNlcl9yZWdpc3RlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGZ1bGxuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvbmU6IHBob25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2NvbmZpcm06IGZ1bmN0aW9uKHVzZXJuYW1lLCBwaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbTogJ3VzZXJfY29uZmlybScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpbjogcGluXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvbl9hcGlfY2FsbCh7bTogJ3VzZXJfaW5mbyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9sb3N0X3Bhc3N3b3JkOiBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICd1c2VyX2xvc3RfcGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2lkZW50aWZpY2F0aW9uOiB1c2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3Jlc2V0X3Bhc3N3b3JkOiBmdW5jdGlvbih1c2VyX2lkZW50aWZpY2F0aW9uLCBwYXNzd29yZCwgY29kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtOiAndXNlcl9yZXNldF9wYXNzd29yZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZGVudGlmaWNhdGlvbjogdXNlcl9pZGVudGlmaWNhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2NoYW5nZV9wYXNzd29yZDogZnVuY3Rpb24ob2xkX3Bhc3N3b3JkLCBuZXdfcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXNzaW9uX2FwaV9jYWxsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtOiAndXNlcl9jaGFuZ2VfcGFzc3dvcmQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZF9wYXNzd29yZDogb2xkX3Bhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld19wYXNzd29yZDogbmV3X3Bhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbG9naW46IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAndXNlcl9sb2dpbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uRGF0YS5zZXRUb2tlbihkYXRhKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25lZWRlZCBmb3IgY2hhaW5pbmcgb2YgcHJvbWlzZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbG9nb3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fYXBpX2NhbGwoe206ICd1c2VyX2xvZ291dCd9LCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25EYXRhLmRlbGV0ZVRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9wcm9kdWN0czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vzc2lvbl9hcGlfY2FsbCh7bTogJ3VzZXJfcHJvZHVjdHMnfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfZmlzaGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9maXNoZXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF90ZWNobmlxdWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF90ZWNobmlxdWVzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfYmFpdHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X2JhaXRzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfb3JnYW5pemF0aW9uczogZnVuY3Rpb24ob3JnaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bTogJ2dldF9vcmdhbml6YXRpb25zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnaWQ6IG9yZ2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9vcmdfbW9kaWZpZWQ6IGZ1bmN0aW9uKG9yZ2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICdnZXRfb3JnX21vZGlmaWVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnaWQ6IG9yZ2lkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9hcmVhczogZnVuY3Rpb24oYXJlYWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICdnZXRfYXJlYXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhaWQ6IGFyZWFpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfYXJlYXNfbW9kaWZpZWQ6IGZ1bmN0aW9uKGFyZWFpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAnZ2V0X2FyZWFzX21vZGlmaWVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlYWlkOiBhcmVhaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X3Byb2R1Y3RzOiBmdW5jdGlvbihhcmVhaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bTogJ2dldF9wcm9kdWN0cycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZWFpZDogYXJlYWlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9ydWxlczogZnVuY3Rpb24ocnVsZWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICdnZXRfcnVsZXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlaWQ6IHJ1bGVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfcGhvdG9zOiBmdW5jdGlvbihvcmdpZCwgYXJlYWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICdnZXRfcGhvdG9zJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JnaWQ6IG9yZ2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmVhaWQ6IGFyZWFpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfbWFwX3BvaXM6IGZ1bmN0aW9uKG9yZ2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge206ICdnZXRfbWFwX3BvaXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmdpZDogb3JnaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X21hcF9wb2lfdHlwZXMgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9tYXBfcG9pX3R5cGVzJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfbWFwX3BvbHlnb25zOiBmdW5jdGlvbihvcmdpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHttOiAnZ2V0X21hcF9wb2x5Z29ucycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2lkOiBvcmdpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2dldF9mYXZvcml0ZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlc3Npb25fYXBpX2NhbGwoe206ICd1c2VyX2dldF9mYXZvcml0ZXMnfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfdGVybXNfb2Zfc2VydmljZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfdGVybXNfb2Zfc2VydmljZSd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X2NvbnRhY3RfaW5mbzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXBpX2NhbGwoe206ICdnZXRfY29udGFjdF9pbmZvJ30pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRfZW5naW5lX3BvbGljaWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcGlfY2FsbCh7bTogJ2dldF9lbmdpbmVfcG9saWNpZXMnfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldF9zbXNfdGVybXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X3Ntc190ZXJtcyd9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0X21hcGJveF9hcGk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFwaV9jYWxsKHttOiAnZ2V0X21hcGJveF9hcGlhY2Nlc3N0b2tlbid9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcbiIsIihmdW5jdGlvbihhbmd1bGFyLCB1bmRlZmluZWQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmRiJywgW10pXG4gICAgLnByb3ZpZGVyKCdEQicsIGZ1bmN0aW9uIERCUHJvdmlkZXIoKSB7XG5cbiAgICAgICAgdGhpcy4kZ2V0ID0gW1xuICAgICAgICAgICAgJyRjb3Jkb3ZhU1FMaXRlJyxcbiAgICAgICAgICAgICdBUEknLFxuICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRjb3Jkb3ZhU1FMaXRlLCBBUEksICRxKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgZGI7XG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5zcWxpdGVQbHVnaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZGIgPSAkY29yZG92YVNRTGl0ZS5vcGVuREIoJ2Zpc2tlYmFzZW4uZGInKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5vcGVuRGF0YWJhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgZGIgPSB3aW5kb3cub3BlbkRhdGFiYXNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zpc2tlYmFzZW4uZGInLCAnMS4wJywgJ2Zpc2tlYmFzZW4nLCAxMCAqIDEwMjQgKiAxMDI0KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZSwgc29ycnknKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgdGFibGVEZWYgPSB7XG4gICAgICAgICAgICAgICAgICAgICdBcmVhJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnb3JnaWQnLCAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsna3cnLCAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydub3RlJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2MxJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjMicsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYzMnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ20xJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtMicsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbTMnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2xhdCcsICAgJ3JlYWwnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbG5nJywgICAncmVhbCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd6b29tJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3BudCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjYXInLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZW5nJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2hjcCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtYXAnLCAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3dzYycsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdBcmVhX0Zpc2gnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYWlkJywgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ZpZCcsICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydhbW91bnQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY29tbWVudCcsICAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdQcm9kdWN0JzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QyJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ25vJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ltJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3BmJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2FpJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncmknLCAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydjaCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ByaWNlJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbW9kJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydzbycsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2hsJywgICAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ0NvdW50eSc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncycsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydkJywgICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnTXVuaWNpcGFsaXR5JzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY0lEJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ25hbWUnLCAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnRmlzaCc6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnSUQnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZCcsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc28nLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21heCcsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpY29uJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ltZycsICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW4nLCAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydnZW8nLCAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3NpemUnLCAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbGF0JywgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydyZWMnLCAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1J1bGUnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3ZlcicsICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0JywgICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnVXNlcl9Qcm9kdWN0JzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2F0JywgICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnY29kZScsICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydmcicsICAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2Z1bGxuYW1lJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ290JywgICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3JlZjEnLCAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncmVmMicsICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0JywgICAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0bycsICAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3BpZCcsICAgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsncGRmJywgICAgICAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnVXNlcl9JbmZvJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3VzZXJuYW1lJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2xvZ2dlZGluJywgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lQMScsICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lQMicsICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ25hbWUnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2VtYWlsJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NyZWF0ZWQnLCAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1VzZXJfTnVtYmVyJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydudW1iZXInLCAndGV4dCddXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdUZWNobmlxdWUnOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ0lEJywgICAgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd0JywgICAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnc28nLCAgICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2RlJywgICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZGEnLCAgICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpY29uJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ltZzEnLCAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnaW1nMicsICAgICAndGV4dCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydpbWczJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3lvdXR1YmUnLCAgJ3RleHQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnT3JnYW5pemF0aW9uJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NwJywgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3VybCcsICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2NvJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnbW9kJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWyd2YXQnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2RwJywgICAgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnZnZhJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydvcmcnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ21sJywgICAgICdpbnQnXVxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAnUG9pJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ29yZ2lkJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndHlwZScsICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydwcmljZScsICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2xhJywgICAgICdyZWFsJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2xvJywgICAgICdyZWFsJ11cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgJ1BvaV9UeXBlJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3QnLCAgICAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ2ljb24nLCAgICd0ZXh0J10sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICdQb2x5Z29uJzogW1xuICAgICAgICAgICAgICAgICAgICAgICAgWydJRCcsICAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ29yZ2lkJywgICdpbnQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndCcsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsnYycsICAgICAgJ3RleHQnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFsndmVyJywgICAgJ2ludCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgWydtb2QnLCAgICAnaW50J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBbJ3BvbHknLCAgICd0ZXh0J11cbiAgICAgICAgICAgICAgICAgICAgXVxuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBjcmVhdGVPYmplY3QgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR2YWwgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLnJvd3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHZhbC5wdXNoKGRhdGEucm93cy5pdGVtKGkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dmFsO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZVRhYmxlOiBmdW5jdGlvbih0YWJsZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiLnRyYW5zYWN0aW9uKGZ1bmN0aW9uKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmV4ZWN1dGVTcWwoJ0RFTEVURSBGUk9NICcgKyB0YWJsZSArICc7Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaWQgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpbmdsZURhdGEgPSBkYXRhW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnNlcnREYXRhID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYmxlRGVmW3RhYmxlXS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydERhdGEucHVzaChzaW5nbGVEYXRhW3RhYmxlRGVmW3RhYmxlXVtpXVswXV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdJTlNFUlQgSU5UTycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1ZBTFVFUyg/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnLD8nLnJlcGVhdChpbnNlcnREYXRhLmxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmV4ZWN1dGVTcWwocXVlcnksIGluc2VydERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFuVGFibGU6IGZ1bmN0aW9uKHRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIudHJhbnNhY3Rpb24oZnVuY3Rpb24odHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHguZXhlY3V0ZVNxbCgnREVMRVRFIEZST00gJyArIHRhYmxlICsgJzsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAgICAgKiBEcm9wcyBhbGwgdGFibGVzIGluIHRoZSBkYXRhYmFzZVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGNsZWFuXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGIudHJhbnNhY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHR4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0YWJsZSBpbiB0YWJsZURlZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmV4ZWN1dGVTcWwoJ0RST1AgVEFCTEUgSUYgRVhJU1RTICcgKyB0YWJsZSArICc7Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlbW92ZWQgYWxsIHRhYmxlcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEluaXRpYWxpZXMgdGhlIHRhYmxlcyBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgICAgICAgICAgICAgICogQG1ldGhvZCBpbml0XG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYi50cmFuc2FjdGlvbihmdW5jdGlvbih0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0IGluIHRhYmxlRGVmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSB0YWJsZURlZlt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZVZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQnVpbGRzIGEgc3RyaW5nIHdpdGggXCJcIiBhcm91bmQgYWxsIG5hbWVzLCBzbyB0aGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpdCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gU1FMIFRhYmxlIHdpdG91dCBoYXZpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHRvIHdvcnJ5IGFib3V0IHVzaW5nIHJlc2VydmVkIGtleXdvcmRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhYmxlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMucHVzaCgnXCInICsgdGFibGVbaV1bMF0gKyAnXCIgJyArIHRhYmxlW2ldWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlVmFsdWVzID0gdGFibGVWYWx1ZXMuam9pbignLCAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVWYWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJywgUFJJTUFSWSBLRVkoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCInICsgdGFibGVbMF1bMF0gKyAnXCInLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcpKTsnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR4LmV4ZWN1dGVTcWwocXVlcnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEdldHMgaW5mb3JtYXRpb24gYWJvdXQgYW4gYXJlYVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGdldEFyZWFcbiAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtJbnRlZ2VyfSBpZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZ2V0QXJlYTogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIEFyZWEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgaWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGFyZWEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IGNyZWF0ZU9iamVjdChhcmVhKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBEQiBzaG91bGQgbm90IG5lZWQgQVBJXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfcGhvdG9zKG9iamVjdC5vcmdpZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oaW1hZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaW1hZ2VzID0gaW1hZ2VzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChvYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0QXJlYUZpc2hlczogZnVuY3Rpb24oYWlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBBcmVhX0Zpc2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSk9JTiBGaXNoIE9OIEFyZWFfRmlzaC5maWQgPSBGaXNoLklEJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIEFyZWFfRmlzaC5haWQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbYWlkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIFNlYXJjaGVzIHRoZSBkYXRhYmFzZSB1c2luZyBhIHF1ZXJ5XG4gICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAqIFRoZSBxdWVyeSBpcyBtYXRjaGVkIHRvIGEgbmFtZSBhbmQvb3Iga2V5d29yZFxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIHNlYXJjaFxuICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uKHNlYXJjaHN0cmluZywgY291bnR5X2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIConLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBBcmVhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIHQgTElLRSA/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvdW50eV9pZCA/ICdBTkQgYzEgPSA/JyA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09SREVSIEJZIHQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnR5X2lkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWyclJyArIHNlYXJjaHN0cmluZyArICclJywgY291bnR5X2lkXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnJScgKyBzZWFyY2hzdHJpbmcgKyAnJSddKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgICAgICogR2V0cyBpbmZvcm1hdGlvbiBhYm91dCBhIHByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgICogQG1ldGhvZCBnZXRQcm9kdWN0XG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gcHJvZHVjdF9pZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZ2V0UHJvZHVjdDogZnVuY3Rpb24ocHJvZHVjdF9pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCBESVNUSU5DVCBQcm9kdWN0LiosJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudCBhcyBydWxlX3QsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1J1bGUudmVyIGFzIHJ1bGVfdmVyLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLmQgYXMgcnVsZV9kJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdKT0lOIFJ1bGUgT04gUnVsZS5JRCA9IFByb2R1Y3QucmknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgSUQgPSA/JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ09SREVSIEJZIHNvJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9kdWN0X2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIEdldHMgYWxsIHByb2R1Y3RzIGZyb20gYW4gYXJlYVxuICAgICAgICAgICAgICAgICAgICAgKiBAbWV0aG9kIGdldFByb2R1Y3RzQnlBcmVhXG4gICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7SW50ZWdlcn0gYXJlYV9pZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgZ2V0UHJvZHVjdHNCeUFyZWE6IGZ1bmN0aW9uKGFyZWFfaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgRElTVElOQ1QgUHJvZHVjdC4qLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLnQgYXMgcnVsZV90LCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLnZlciBhcyBydWxlX3ZlciwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS5kIGFzIHJ1bGVfZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIFByb2R1Y3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSk9JTiBSdWxlIE9OIFJ1bGUuSUQgPSBQcm9kdWN0LnJpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIGFpID0gPycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdPUkRFUiBCWSBzbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbYXJlYV9pZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldENvdW50aWVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgRElTVElOQ1QgQ291bnR5LionLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRlJPTSBDb3VudHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnSk9JTiBBcmVhIE9OIEFyZWEuYzEgPSBDb3VudHkuSUQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnT1JERVIgQlkgQ291bnR5LnQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldFVzZXJQcm9kdWN0czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUIFVzZXJfUHJvZHVjdC4qLCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLnQgYXMgcnVsZV90LCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSdWxlLnZlciBhcyBydWxlX3ZlciwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUnVsZS5kIGFzIHJ1bGVfZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIFVzZXJfUHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMRUZUIEpPSU4gUHJvZHVjdCBPTiBQcm9kdWN0LklEID0gVXNlcl9Qcm9kdWN0LnBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdMRUZUIEpPSU4gUnVsZSBPTiBSdWxlLklEID0gUHJvZHVjdC5yaSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0RmlzaGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKiBGUk9NIEZpc2gnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldEZpc2g6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUICogRlJPTSBGaXNoJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIGlkID0gPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0VGVjaG5pcXVlczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUICogRlJPTSBUZWNobmlxdWUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXRUZWNobmlxdWU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24oZnVsZmlsbCwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFTUUxpdGUuZXhlY3V0ZShkYiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnU0VMRUNUICogRlJPTSBUZWNobmlxdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnV0hFUkUgSUQgPSA/J1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpLCBbaWRdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0T3JnYW5pemF0aW9uOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqIEZST00gT3JnYW5pemF0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIElEID0gPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFVzZXJJbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIFVzZXJfSW5mbydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KHVzZXIpWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldFVzZXJOdW1iZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihmdWxmaWxsLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29yZG92YVNRTGl0ZS5leGVjdXRlKGRiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTRUxFQ1QgKicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGUk9NIFVzZXJfTnVtYmVyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbignICcpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbChjcmVhdGVPYmplY3QoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgICAgICBnZXRQb2lzOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUG9pJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1dIRVJFIG9yZ2lkID0gPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSwgW2lkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGZpbGwoY3JlYXRlT2JqZWN0KGRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZ2V0UG9pVHlwZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUG9pX1R5cGUnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGdldFBvbHlnb25zOiBmdW5jdGlvbihpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKGZ1bGZpbGwsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU1FMaXRlLmV4ZWN1dGUoZGIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1NFTEVDVCAqJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZST00gUG9seWdvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdXSEVSRSBvcmdpZCA9ID8nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKCcgJyksIFtpZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdWxmaWxsKGNyZWF0ZU9iamVjdChkYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9KTtcbn0pKHdpbmRvdy5hbmd1bGFyKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdpZmlza2UuZmlsdGVycycsIFtdKVxuLmZpbHRlcignb25lYnInLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoLyg8YnI+XFxzKikrL2csICc8YnI+Jyk7XG4gICAgfTtcbn0pXG4uZmlsdGVyKCdub2JycycsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQucmVwbGFjZSgvKDxicihcXHMqXFwvKSo+KSsvZywgJycpO1xuICAgIH07XG59KVxuLmZpbHRlcignY2xlYW50YWJsZXMnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC8oPFxcLz90YWJsZT4pKy9nLCAnJyk7XG4gICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgvKDxcXC8/dHI+KSsvZywgJycpO1xuICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoLyg8XFwvP3RoPikrL2csICcnKTtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC8oPChcXC8/KXRkLio/PikrPy9nLCAnPCQycD4nKTtcbiAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC88cD5cXHMqPFxcL3A+L2csICcnKTtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH07XG59KTtcbiIsIihmdW5jdGlvbihhbmd1bGFyLCB1bmRlZmluZWQpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLnVwZGF0ZScsIFsnaWZpc2tlLmFwaScsICdpZmlza2UuZGInLCAnaWZpc2tlLnV0aWxzJ10pXG4gICAgLnByb3ZpZGVyKCdVcGRhdGUnLCBmdW5jdGlvbiBVcGRhdGVQcm92aWRlcigpIHtcblxuICAgICAgICB0aGlzLiRnZXQgPSBbXG4gICAgICAgICAgICAnQVBJJyxcbiAgICAgICAgICAgICdEQicsXG4gICAgICAgICAgICAnbG9jYWxTdG9yYWdlJyxcbiAgICAgICAgICAgICckcScsXG4gICAgICAgICAgICAnJGlvbmljTG9hZGluZycsXG4gICAgICAgICAgICAnc2Vzc2lvbkRhdGEnLFxuICAgICAgICAgICAgZnVuY3Rpb24oQVBJLCBEQiwgbG9jYWxTdG9yYWdlLCAkcSwgJGlvbmljTG9hZGluZywgc2Vzc2lvbkRhdGEpIHtcblxuICAgICAgICAgICAgICAgIHZhciBMQVNUX1VQREFURSA9ICdsYXN0X3VwZGF0ZSc7XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9wdWxhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X2FyZWFzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlzaEFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXNoZXMgPSBkYXRhW2tleV0uZmlzaDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmlzaEtleSBpbiBmaXNoZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpc2hBcnIucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0lEJzoga2V5ICsgJ18nICsgZmlzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWQ6IGZpc2hLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiBmaXNoZXNbZmlzaEtleV1bMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudDogZmlzaGVzW2Zpc2hLZXldWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREIucG9wdWxhdGVUYWJsZSgnQXJlYScsIGRhdGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQi5wb3B1bGF0ZVRhYmxlKCdBcmVhX0Zpc2gnLCBmaXNoQXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnQXJlYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfcHJvZHVjdHMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdQcm9kdWN0JywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQcm9kdWN0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9jb3VudGllcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ0NvdW50eScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ291bnR5JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9tdW5pY2lwYWxpdGllcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ011bmljaXBhbGl0eScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnTXVuaWNpcGFsaXR5JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9maXNoZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdGaXNoJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdGaXNoJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9ydWxlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1J1bGUnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1J1bGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X3RlY2huaXF1ZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdUZWNobmlxdWUnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1RlY2huaXF1ZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfb3JnYW5pemF0aW9ucygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ09yZ2FuaXphdGlvbicsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnT3JnYW5pemF0aW9uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9tYXBfcG9pcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLnBvcHVsYXRlVGFibGUoJ1BvaScsIGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnUG9pJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9tYXBfcG9pX3R5cGVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIucG9wdWxhdGVUYWJsZSgnUG9pX1R5cGUnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1BvaV9UeXBlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9tYXBfcG9seWdvbnMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdQb2x5Z29uJywgZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdQb2x5Z29uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9wdWxhdGVVc2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5hbGwoW1xuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLnVzZXJfcHJvZHVjdHMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5wb3B1bGF0ZVRhYmxlKCdVc2VyX1Byb2R1Y3QnLCBkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1VzZXJfUHJvZHVjdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgQVBJLnVzZXJfaW5mbygpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bWJlcnMgPSBkYXRhLm51bWJlcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG51bUFyciA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1BcnIucHVzaCh7J251bWJlcic6IG51bWJlcnNbaV19KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERCLnBvcHVsYXRlVGFibGUoJ1VzZXJfSW5mbycsIFtkYXRhXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1VzZXJfSW5mbyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREIucG9wdWxhdGVUYWJsZSgnVXNlcl9OdW1iZXInLCBudW1BcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdVc2VyX051bWJlcnMnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBjbGVhblVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICBEQi5jbGVhblRhYmxlKCdVc2VyX1Byb2R1Y3QnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIERCLmNsZWFuVGFibGUoJ1VzZXJfTnVtYmVyJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBEQi5jbGVhblRhYmxlKCdVc2VyX0luZm8nKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZW1vdmVkIHVzZXIgaW5mbyBmcm9tIGRhdGFiYXNlJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvdWxkIG5vdCByZW1vdmUgdXNlciBkYXRhIGZyb20gZGF0YWJhc2UhJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVGdW5jID0gZnVuY3Rpb24oZm9yY2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RVcGRhdGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvcmNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFVwZGF0ZSA9IGxvY2FsU3RvcmFnZS5nZXQoTEFTVF9VUERBVEUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFXZWVrID0gMTAwMCAqIDM2MDAgKiAyNCAqIDc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VGltZSAtIGxhc3RVcGRhdGUgPiBhV2Vlaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRxLmFsbChbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgREIuaW5pdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXplZCBEQiBzeXN0ZW0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEuYWxsKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZVVzZXIoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1bGF0ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3B1bGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHN0dWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1bGF0ZWQ6Jywgc3R1ZmYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KExBU1RfVVBEQVRFLCBjdXJyZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyLmVycm9yX2NvZGUgPT09IDcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEF1dGhlbnRpY2F0aW9uIGZhaWx1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IFNob3cgdG8gdXNlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW5Vc2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkudXNlcl9sb2dvdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdHb3QgYW4gZXJyb3IsIHdpbGwgdHJ5IHRvIHJlY3JlYXRlIGFsbCB0YWJsZXM6JywgZXJyKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERCLmNsZWFuKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQi5pbml0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9wdWxhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHN0dWZmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1BvcHVsYXRlZDonLCBzdHVmZik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldChMQVNUX1VQREFURSwgY3VycmVudFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRpb25pY0xvYWRpbmcuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N0aWxsIGVycm9yLCBoYW5kbGUgaXQhJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF90ZXJtc19vZl9zZXJ2aWNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXQoJ3RvcycsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSS5nZXRfc21zX3Rlcm1zKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbih0ZXJtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdzbXNfdGVybXMnLCB0ZXJtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQVBJLmdldF9jb250YWN0X2luZm8oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldCgnY29udGFjdEluZm8nLCBkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBUEkuZ2V0X21hcGJveF9hcGkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldCgnbWFwYm94X2FwaScsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREIuaW5pdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnSW5pdGlhbGl6ZWQgREIgc3lzdGVtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb25EYXRhLnRva2VuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVsYXRlVXNlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW9uaWNMb2FkaW5nLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ25vX3VwZGF0ZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJGlvbmljTG9hZGluZy5oaWRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHEud2hlbignTm8gdXBkYXRlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVGdW5jKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgZm9yY2VkVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVGdW5jKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbG9nb3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFuVXNlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFQSS51c2VyX2xvZ291dCgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2xvZ2luOiBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBUEkudXNlcl9sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVGdW5jKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgbGFzdF91cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXQoTEFTVF9VUERBVEUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1dO1xuICAgIH0pO1xufSkod2luZG93LmFuZ3VsYXIpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2lmaXNrZS51dGlscycsIFtdKVxuXG4uZmFjdG9yeSgnbG9jYWxTdG9yYWdlJywgWyckd2luZG93JywgZnVuY3Rpb24oJHdpbmRvdykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgJHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiAkd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAkd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pXG4uc2VydmljZSgnc2Vzc2lvbkRhdGEnLCBbJ2xvY2FsU3RvcmFnZScsIGZ1bmN0aW9uKGxvY2FsU3RvcmFnZSkge1xuICAgIHRoaXMudG9rZW4gPSBsb2NhbFN0b3JhZ2UuZ2V0KCdzZXNzaW9uJyk7XG5cbiAgICB0aGlzLnNldFRva2VuID0gZnVuY3Rpb24odCkge1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0KCdzZXNzaW9uJywgdCk7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0O1xuICAgICAgICBjb25zb2xlLmxvZygndG9rZW4gc2V0Jyk7XG4gICAgfTtcbiAgICB0aGlzLmRlbGV0ZVRva2VuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmUoJ3Nlc3Npb24nKTtcbiAgICAgICAgdGhpcy50b2tlbiA9IG51bGw7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0b2tlbiB1bnNldCcpO1xuICAgIH07XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnbmdDb3Jkb3ZhU21zJywgW10pXG4uZGlyZWN0aXZlKCduZ0NvcmRvdmFTbXMnLCBbJyRjb3Jkb3ZhU21zJywgJyRpb25pY1BvcHVwJywgZnVuY3Rpb24oJGNvcmRvdmFTbXMsICRpb25pY1BvcHVwKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICRpb25pY1BvcHVwLnByb21wdCh7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2tyaXYgaW4gZGl0dCBuYW1uJyxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRUeXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnRklTS0EgJyArIGF0dHJzLm5nQ29yZG92YVNtcyArICcgJyArIG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICRjb3Jkb3ZhU21zLnNlbmQoJzcyNDU2JywgbWVzc2FnZSwgJ0lOVEVOVCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N1Y2N1ZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnaWZpc2tlLmRpcmVjdGl2ZXMnKVxuICAgIC5kaXJlY3RpdmUoJ2lmaXNrZUlucHV0JywgZnVuY3Rpb24oKSB7XG5cdHJldHVybiB7XG5cdCAgICByZXN0cmljdDogJ0UnLFxuXHQgICAgdHJhbnNjbHVkZTogdHJ1ZSxcblxuXHQgICAgc2NvcGU6IHtcblx0XHRuYW1lOiAnQCcsXG5cdFx0aWQ6ICdAJyxcblx0XHRsYWJlbDogJ0AnLFxuXHRcdHBsYWNlaG9sZGVyOiAnQCcsXG5cdFx0dHlwZTogJ0AnLFxuXHRcdG5nUGF0dGVybjogJ0AnLFxuXHRcdG5nTW9kZWw6ICc9PydcblxuXHQgICAgfSxcblx0ICAgIHRlbXBsYXRlVXJsOiAnZGlyZWN0aXZlcy9pbnB1dF9maWVsZC9pZmlza2VfaW5wdXQuaHRtbCcsXG5cdCAgICBjb250cm9sbGVyOiBmdW5jdGlvbigkc2NvcGUpIHtcblx0XHQkc2NvcGUuaWQgPSAkc2NvcGUuaWQgfHwgJHNjb3BlLm5hbWU7XG5cdFx0JHNjb3BlLnR5cGUgPSAkc2NvcGUudHlwZSB8fCAndGV4dCc7XG5cdCAgICB9XG5cdH1cbiAgICB9KVxuIiwiYW5ndWxhci5tb2R1bGUoJ3N5c3RlbUJyb3dzZXInLCBbXSlcbi5kaXJlY3RpdmUoJ3N5c3RlbUJyb3dzZXInLCBbJyRjb3Jkb3ZhSW5BcHBCcm93c2VyJywgZnVuY3Rpb24oJGNvcmRvdmFJbkFwcEJyb3dzZXIpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cnMpIHtcbiAgICAgICAgICAgIGVsLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAkY29yZG92YUluQXBwQnJvd3Nlci5vcGVuKGVsWzBdLmhyZWYsICdfc3lzdGVtJyk7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pXG4uZGlyZWN0aXZlKCdnbG9iYWxTeXN0ZW1Ccm93c2VyJywgWyckY29yZG92YUluQXBwQnJvd3NlcicsIGZ1bmN0aW9uKCRjb3Jkb3ZhSW5BcHBCcm93c2VyKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzKSB7XG4gICAgICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmhyZWYgJiYgZS50YXJnZXQuaG9zdCAhPT0gd2luZG93LmxvY2F0aW9uLmhvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgJGNvcmRvdmFJbkFwcEJyb3dzZXIub3BlbihlLnRhcmdldC5ocmVmLCAnX3N5c3RlbScpO1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9