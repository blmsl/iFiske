// angular.module is a global place for creating, registering and retrieving Angular modules
// 'ifiske' is the name of this angular module (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'ifiske.controllers' is found in controllers.js

angular.module('ifiske', [
    'ionic',
    'ifiske.controllers',
    'ifiske.directives',
    'ifiske.api',
    'ifiske.db',
    'ifiske.utils',
    'ifiske.update',
    'ifiske.filters',
    'ionic.ion.headerShrink',
    'ngCordova',
    'systemBrowser',
    'ngCordovaSms',
    'ngMessages',
    'ImgCache',
    'leaflet-directive',
    'tabSlideBox'
])

.constant('$ionicLoadingConfig', {
    template: '<ion-spinner></ion-spinner>'
    // hideOnStateChange: true
})
.run(['$ionicPlatform', 'Update', 'ImgCache', function($ionicPlatform, Update, ImgCache) {
    $ionicPlatform.ready(function() {
        // Hide the accessory bar above the keyboard for form inputs
        if (window.ionic && window.ionic.Keyboard) {
            window.ionic.Keyboard.hideKeyboardAccessoryBar(true);
        }
        if (window.StatusBar) {
            // org.apache.cordova.statusbar required
            window.StatusBar.styleDefault();
        }

        ImgCache.$init();
        Update.update();
    });
}])

.config([
    '$stateProvider',
    '$urlRouterProvider',
    '$ionicConfigProvider',
    'ImgCacheProvider',
    function($stateProvider, $urlRouterProvider, $ionicConfigProvider, ImgCacheProvider) {

        ImgCacheProvider.setOptions({
            debug: false,
            usePersistentCache: true
        });
        ImgCacheProvider.manualInit = true;

        //Disable swipe to go back since it is bugged
        $ionicConfigProvider.views.swipeBackEnabled(false);

        // Cache views in the forward stack
        $ionicConfigProvider.views.forwardCache(true);

        // Clear back button default text
        $ionicConfigProvider.backButton.previousTitleText(false).text('');

        // Tabs position
        $ionicConfigProvider.tabs.position('bottom');

        /**
         * Ionic uses AngularUI Router. Learn more here:
         * https://github.com/angular-ui/ui-router
         */

        var defaultUrl = '/app/login';
        if (window.localStorage.getItem('session')) {
            defaultUrl = '/app/home';
        }
        $urlRouterProvider.otherwise(defaultUrl);

        $stateProvider

        .state('app', {
            url: '/app',
            //abstract: true,
            templateUrl: 'components/menu/menu.html',
            controller: 'MenuCtrl'
        })

        .state('app.login', {
            url: '/login',
            templateUrl: 'components/login/login.html',
            controller: 'LoginCtrl'
        })

        // Account recovery
        .state('app.recover', {
            url: '/recover',
            templateUrl: 'components/recover/recover.html',
            controller: 'RecoverCtrl'
        })
        .state('app.recover.lostpassword', {
            url: '/lostpassword',
            templateUrl: 'components/recover/lostpassword.html'
        })
        .state('app.recover.resetpassword', {
            url: '/resetpassword',
            templateUrl: 'components/recover/resetpassword.html'
        })

        // Account registration
        .state('app.register', {
            url: '/register',
            templateUrl: 'components/register/register.html',
            controller: 'RegisterCtrl'
        })
        .state('app.register.details', {
            url: '/details',
            templateUrl: 'components/register/register_details.html'
        })
        .state('app.register.verify', {
            url: '/verify',
            templateUrl: 'components/register/register_verify.html'
        })

        //
        .state('app.home', {
            url: '/home',
            templateUrl: 'components/home/home.html',
            controller: 'HomeCtrl'
        })
        .state('app.info', {
            url: '/info',
            templateUrl: 'components/info/info.html'
        })

        .state('app.bugs', {
            url: '/info',
            templateUrl: 'components/menu/report.html'
        })
        .state('app.contact', {
            url: '/contact',
            templateUrl: 'components/contact/contact.html',
            controller: 'ContactCtrl'
        })
        .state('app.legal', {
            url: '/legal',
            templateUrl: 'components/legal/legal.html',
            controller: 'LegalCtrl'
        })
        .state('app.about', {
            url: '/about',
            templateUrl: 'components/about/about.html',
            controller: 'AboutCtrl'
        })
        .state('app.userinfo', {
            url: '/userinfo',
            controller: 'UserCtrl',
            templateUrl: 'components/user/user.html',
        })
        .state('app.find_areas', {
            url: '/find_areas',
            views: {
                '@app': {
                    templateUrl: 'components/find_areas/tabs.html',
                },
                'counties@app.find_areas': {
                    templateUrl: 'components/find_areas/counties.html',
                    controller: 'CountiesCtrl'
                },
                'favorites@app.find_areas': {
                    templateUrl: 'components/find_areas/favorites.html',
                    controller: 'FavoritesCtrl'
                }
            }
        })
        .state('app.areas', {
            url: '/areas',
            params: {'id': false, 'county': false, 'search': ''},
            templateUrl: 'components/area_list/area_list.html',
            controller: 'AreasCtrl'
        })
        .state('app.cards', {
            url: '/cards',
            templateUrl: 'components/user_cards/user_cards.html',
            controller: 'UserCardsCtrl'
        })
        .state('app.favorites', {
            url: '/favorites',
            templateUrl: 'components/favorites/favorites.html'
        })
        .state('app.fishes', {
            url: '/fishes',
            templateUrl: 'components/fishes/fishes.html',
            controller: 'FishesCtrl'
        })
        .state('app.fishdetail', {
            url: '/fishdetail/:id',
            params: {'id': false, 'fish': false},
            templateUrl: 'components/fish_detail/fish_detail.html',
            controller: 'FishDetailCtrl'
        })
        .state('app.map', {
            url: '/map',
            templateUrl: 'components/map/map.html',
            controller: 'MapCtrl'
        })
        .state('app.techniques', {
            url: '/techniques',
            templateUrl: 'components/techniques/techniques.html',
            controller: 'TechniquesCtrl'
        })
        .state('app.techniquedetail', {
            url: '/techniquedetail/:id',
            params: {'id': false, 'tech': false},
            templateUrl: 'components/technique_detail/technique_detail.html',
            controller: 'TechniqueDetailCtrl'
        })
        .state('app.news', {
            url: '/news',
            templateUrl: 'components/news/news.html',
            controller: 'NewsCtrl'
        })
        .state('app.newsitem', {
            url: '/news/:id',
            params: {'item': false, 'id': false},
            templateUrl: 'components/news/newsitem.html',
            controller: 'NewsItemCtrl'
        })

        .state('app.area', {
            url: '/area/:id',
            views: {
                '@app': {
                    templateUrl: 'components/area/area.html',
                    controller: 'AreaCtrl',
                },
                'info@app.area': {
                    templateUrl: 'components/area/info.html',
                    controller: 'AreaInfoCtrl'
                },
                'map@app.area': {
                    templateUrl: 'components/area/map.html',
                    controller: 'AreaMapCtrl'
                },
                'fishinfo@app.area': {
                    templateUrl: 'components/area/fish.html',
                    controller: 'AreaFishCtrl'
                },
                'cards@app.area': {
                    templateUrl: 'components/area/cards.html',
                    controller: 'AreaCardsCtrl'
                }
            }
        });
    }]);

angular.module('ifiske.controllers', []);
angular.module('ifiske.directives', []);

angular.module('ifiske.controllers')
.controller('AboutCtrl', [
    '$scope',
    '$cordovaAppVersion',
    '$ionicPlatform',
    '$ionicModal',
    'Update',
    'Licenses',
    function($scope, $cordovaAppVersion, $ionicPlatform, $ionicModal, Update, Licenses) {
        $scope.version = $scope.dbDate = 'Ok√§nt';
        $scope.update = Update;

        $ionicPlatform.ready(function() {
            if (window.cordova) {
                $cordovaAppVersion.getAppVersion().then(function(version) {
                    console.log('iFiske version:', version);
                    $scope.version = version;
                });
            }
            Licenses.get().then(function(data) {
                $scope.licenses = data.data;
            });
            $scope.alert = function(l) {
                var scope = $scope.$new();
                scope.l = l;
                $ionicModal.fromTemplateUrl(
                    'components/about/license_modal.html',
                    {scope: scope}
                ).then(function(modal) {
                    scope.closeModal = function() {
                        modal.hide();
                    };
                    modal.show();
                });

            };

        });
    }
]);

angular.module('ifiske.controllers')
.controller('AreaCardsCtrl', [
    '$scope',
    '$ionicModal',
    'localStorage',
    function($scope, $ionicModal, localStorage) {
        $scope.$on('$ionicView.beforeEnter', function() {
            //Area_Cards
            $scope.smsterms = localStorage.get('sms_terms');
            $scope.predicate = 'so';

            //SMS-modal
            $ionicModal.fromTemplateUrl('components/area/sms_modal.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                $scope.sms_modal = modal;
            });
            $scope.openModal = function(product) {
                $scope.sms_modal.show();
                $scope.product = product;
            };
            $scope.closeModal = function() {
                $scope.sms_modal.hide();
            };
            $scope.showTerms = function() {
                $scope.showingterms = !$scope.showingterms;
            };
            $scope.showingterms = false;

            //Rules modal
            $ionicModal.fromTemplateUrl('components/area/rules_modal.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                $scope.rules_modal = modal;
            });
            $scope.openRulesModal = function(product) {
                $scope.rules_modal.show();
                $scope.product = product;
            };
            $scope.closeRulesModal = function() {
                $scope.rules_modal.hide();
            };

            $scope.$on('$destroy', function() {
                $scope.sms_modal.remove();
                $scope.rules_modal.remove();
            });
        });
    }
]);

angular.module('ifiske.controllers')
.controller('AreaCtrl', [
    '$scope',
    '$stateParams',
    'DB',
    '$ionicSlideBoxDelegate',
    function($scope, $stateParams, DB, $ionicSlideBoxDelegate) {
        $scope.image_endpoint = 'http://www.ifiske.se/';

        DB.getArea($stateParams.id)
        .then(function(area) {
            $scope.area = area;
            $scope.$broadcast('ifiske-area');

            area.images.then(function(images) {
                $scope.images = images;
            }, function(err) {
                console.error(err);
            });

            $ionicSlideBoxDelegate.$getByHandle('tabs').update();
            $ionicSlideBoxDelegate.$getByHandle('tabs').enableSlide(false);

            DB.getOrganization(area.orgid)
            .then(function(org) {
                $scope.org = org;
            });
        }, function(err) {
            console.log(err);
        });

        DB.getAreaFishes($stateParams.id)
        .then(function(fishes) {
            $scope.fishes = fishes;
            $ionicSlideBoxDelegate.$getByHandle('tabs').update();
        }, function(err) {
            console.log(err);
        });

        DB.getProductsByArea($stateParams.id)
        .then(function(products) {
            $scope.products = products;
            $ionicSlideBoxDelegate.$getByHandle('tabs').update();
        }, function(err) {
            console.log(err);
        });

    }
]);

angular.module('ifiske.controllers')
.controller('AreaFishCtrl', [
    '$scope',
    function($scope) {
        $scope.sortorder = '-amount';
        $scope.$on('$ionicView.beforeEnter', function() {
        });
    }
]);

angular.module('ifiske.controllers')
.controller('AreaInfoCtrl', [
    '$scope',
    '$ionicSlideBoxDelegate',
    'sessionData',
    '$ionicPopup',
    'Update',
    'API',
    'DB',
    '$ionicPlatform',
    '$cordovaToast',
    function($scope, $ionicSlideBoxDelegate, sessionData, $ionicPopup, Update, API, DB, $ionicPlatform, $cordovaToast) {
        $scope.gotoProducts = function() {
            $ionicSlideBoxDelegate.$getByHandle('tabs').slide(1);
        };
        $scope.$on('$ionicView.beforeEnter', function() {
        });

        $scope.changeFavorite = function() {
            if (sessionData.token) {
                $scope.area.favorite = !$scope.area.favorite;
                var promise;
                if ($scope.area.favorite) {
                    promise = API.user_add_favorite($scope.area.ID).then(function() {
                        Update.update();
                        $ionicPlatform.ready(function() {
                            $cordovaToast.show('Omr√•det √§r nu tillagt i dina favoriter', 'short', 'bottom');
                        });

                    });
                } else {
                    promise = API.user_remove_favorite($scope.area.ID).then(function() {
                        return DB.removeFavorite($scope.area.ID);
                    }).then(function() {
                        $ionicPlatform.ready(function() {
                            $cordovaToast.show('Omr√•det √§r nu borttaget fr√•n dina favoriter', 'short', 'bottom');
                        });
                    });
                }
                promise.catch(function(err) {
                    console.log(err);
                });
            } else {
                $ionicPopup.alert({
                    title: 'Du m√•ste vara inloggad f√∂r att kunna ha favoriter',
                });
            }
        };
    }
]);

angular.module('ifiske.controllers')
.controller('AreaMapCtrl', [
    '$scope',
    'DB',
    'leafletEvents',
    '$ionicPlatform',
    '$cordovaGeolocation',
    '$cordovaDeviceOrientation',
    '$timeout',
    'localStorage',
    function($scope, DB, leafletEvents, $ionicPlatform, $cordovaGeolocation, $cordovaDeviceOrientation, $timeout, localStorage) {
        function updateMypos(obj) {
            //rotate iconAngle 45 deg since the icon is tilted by default
            obj.iconAngle = (obj.iconAngle | 0) - 45;
            // We need to create a new named element in order for the update to register
            if ($scope.map.markers.mypos2) {
                angular.extend($scope.map.markers.mypos2, obj);
                $scope.map.markers.mypos = $scope.map.markers.mypos2;
                delete $scope.map.markers.mypos2;
            } else {
                angular.extend($scope.map.markers.mypos, obj);
                $scope.map.markers.mypos2 = $scope.map.markers.mypos;
                delete $scope.map.markers.mypos;
            }
        }
        /* might need for ios
           function getMypos() {
           return $scope.map.markers.mypos || $scope.map.markers.mypos2;
           }
           */

        var icons = {};
        var mapboxUrl = 'http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}';
        var apikey = localStorage.get('mapbox_api');

        var updateMap = function() {
            $scope.map.center = {
                lat: $scope.area.lat,
                lng: $scope.area.lng,
                zoom: Number($scope.area.zoom) ? Number($scope.area.zoom) : 9
            };

            DB.getPoiTypes()
            .then(function(poi_types) {
                for (var i = 0; i < poi_types.length; ++i) {
                    var type = poi_types[i];
                    icons[type.ID] = {
                        iconUrl: $scope.image_endpoint + type.icon,
                        iconAnchor: [16, 37], // point of the icon which will correspond to marker's location
                        popupAnchor: [0, -35],
                    };
                }
                DB.getPois($scope.area.orgid)
                .then(function(pois) {
                    for (var i = 0; i < pois.length; ++i) {
                        var poi = pois[i];

                        $scope.map.markers['poi' + i] = {
                            layer: 'pois',
                            lat: poi.la,
                            lng: poi.lo,
                            icon: icons[poi.type],
                            message: '<h4>' + poi.t + '</h4><p>' + poi.d + '</p>',
                            popupOptions: {
                                maxWidth: window.innerWidth - 50
                            }
                        };
                    }
                    $scope.map.markers.area = {
                        layer: 'pois',
                        lat: $scope.area.lat,
                        lng: $scope.area.lng,
                        message: $scope.area.t
                    };
                }, function(err) {
                    console.error(err);
                });
                DB.getPolygons($scope.area.orgid)
                .then(function(polygons) {
                    $scope.map.paths = polygons.map(function(poly) {
                        return {
                            latlngs: JSON.parse('[' + poly.poly + ']'),
                            color: poly.c,
                            weight: 2,
                            opacity: 0.5,
                            fillColor: poly.c,
                            type: 'polygon'
                        };
                    });
                }, function(err) {
                    console.error(err);
                });

            });
        };
        angular.extend($scope, {
            map: {
                center: {},
                paths: {},

                markers: {
                    mypos: {
                        lat: 0,
                        lng: 0,
                        iconAngle: 0,
                        message: 'Egen position',
                        icon: {
                            type: 'div',
                            iconSize: [40,40],
                            iconAnchor: [20,20],
                            className: 'icon ion-navigate myposition'
                        }
                    }
                },

                layers: {
                    baselayers: {
                        outdoors: {
                            name: 'Utomhus',
                            type: 'xyz',
                            url: mapboxUrl,
                            layerOptions: {
                                maptype: 'mapbox.outdoors',
                                apikey: apikey
                            }
                        },
                        satellite: {
                            name: 'Satellit',
                            type: 'xyz',
                            url: mapboxUrl,
                            layerOptions: {
                                maptype: 'mapbox.satellite',
                                apikey: apikey
                            }
                        }
                    },
                    overlays: {
                        pois: {
                            name: 'St√§llen',
                            type: 'markercluster',
                            visible: true,
                            layerParams: {
                                showOnSelector: false,
                                disableClusteringAtZoom: 9,
                                chunkedLoading: true,
                                showCoverageOnHover: false,
                                removeOutsideVisibleBounds: true
                            }
                        }
                    }
                }
            }
        });

        $scope.$on('$ionicView.beforeEnter', function() {
            if ($scope.area) {
                updateMap();
            }
            $scope.$on('ifiske-area', updateMap);

            $ionicPlatform.ready(function() {
                $cordovaGeolocation.watchPosition({
                    frequency: 3000
                }).then(null, function(error) {
                    console.error(error);
                }, function(pos) {
                    $timeout(function() {
                        updateMypos({
                            lat: pos.coords.latitude,
                            lng: pos.coords.longitude
                        });
                    });
                });

                $cordovaDeviceOrientation.watchHeading({
                    frequency: 3000
                }).then(null, function(error) {
                    console.error(error);
                }, function(heading) {
                    $timeout(function() {
                        updateMypos({
                            iconAngle: heading.trueHeading
                        });
                    });
                });
            });

            $scope.navigate = function() {
                //var pos = getMypos(); //might need for ios
                $ionicPlatform.ready(function() {
                    launchnavigator.navigate(
                        [$scope.navto.lat, $scope.navto.lng],
                        null,
                        function() {
                            console.log('Opening navigator');
                        },
                        function(error) {
                            alert('Navigation failed!', error);
                        });
                });
            };

            var enabledEvents = ['popupopen', 'popupclose'];
            $scope.events = {
                enabled: enabledEvents
            };

            $scope.$on('leafletDirectiveMarker.popupopen', function(event, args) {
                //show navtobutton
                $scope.navto = args.model;
            });

            $scope.$on('leafletDirectiveMarker.popupclose', function() {
                //hide navtobutton
                $scope.navto = null;
            });
        });
    }
]);

angular.module('ifiske.controllers')
.controller('AreasCtrl', [
    '$scope',
    '$stateParams',
    '$ionicScrollDelegate',
    'DB',
    function($scope, $stateParams, $ionicScrollDelegate, DB) {

        var copy = $stateParams.search;
        $scope.search = copy;
        $scope.county = $stateParams.county || 'S√∂kresultat';
        DB.search('', $stateParams.id)
        .then(function(data) {
            $scope.areas = data;
        }, function(err) {
            console.log(err);
        });
        $scope.clearSearch = function() {
            $scope.search = '';
        };
        $scope.scrollTop = function() {
            $ionicScrollDelegate.scrollTop();
        };

    }
]);


angular.module('ifiske.controllers')
.controller('ContactCtrl', ['$scope', '$state', 'localStorage', function($scope, $state, localStorage) {
        $scope.contactInfo = localStorage.get('contactInfo');
}]);

angular.module('ifiske.controllers')
.controller('CountiesCtrl', ['$scope', 'DB', function($scope, DB) {
    DB.getCounties()
    .then(function(data) {
        $scope.counties = data;
    }, function(err) {
        console.log(err);
    });
}])
.controller('FavoritesCtrl', [
    '$scope',
    'DB',
    '$cordovaToast',
    'API',
    '$ionicActionSheet',
    '$ionicPlatform',
    function($scope, DB, $cordovaToast, API, $ionicActionSheet, $ionicPlatform) {
        var initialize = function() {
            DB.getUserFavorites()
            .then(function(data) {
                $scope.favorites = data;
                console.log(data);
            });
        };

        $scope.$on('$ionicView.beforeEnter', initialize);

        var removeFavorite = function(area) {
            API.user_remove_favorite(area.ID).then(function() {
                DB.removeFavorite(area.ID);
                $scope.favorites.splice($scope.favorites.indexOf(area), 1);
                $ionicPlatform.ready(function() {
                    $cordovaToast.show('Omr√•det √§r nu borttaget fr√•n dina favoriter', 'short', 'bottom');
                });
            });
        };

        $scope.notify = function(area) {
            console.log(area);
            API.user_set_favorite_notification(area.ID, area.not).then(function() {
                $ionicPlatform.ready(function() {
                    $cordovaToast.show('Notifikationer √§r ' + (area.not ? 'p√•' : 'av'),
                                       'short', 'bottom');
                });
            });

        };
        $scope.openPopover = function(area) {
            $ionicActionSheet.show({
                buttons: [
                    {text: area.not ? 'St√§ng av notifikationer' : 'S√§tt p√• notifikationer'}
                ],
                destructiveText: 'Ta bort favorit',
                destructiveButtonClicked: function() {
                    removeFavorite(area);
                    return true;
                },
                titleText: '√Ñndra din favorit',
                cancelText: 'G√∂r inget',
                buttonClicked: function() {
                    area.not = !area.not;
                    return true;
                },
                cancel: function() {}
            });
        };
    }
]);

angular.module('ifiske.controllers')
.controller('FishDetailCtrl', [
    '$scope',
    '$stateParams',
    'DB',
    function($scope, $stateParams, DB) {
        $scope.fish = $stateParams.fish;
        $scope.image_endpoint = 'http://www.ifiske.se';
        if (!$scope.fish) {
            DB.getFish($stateParams.id)
            .then(function(data) {
                $scope.fish = data;
            }, function(err) {
                console.log(err);
            });
        }
    }
]);

angular.module('ifiske.controllers')
.controller('FishesCtrl', ['$scope', 'DB', function($scope, DB) {
    $scope.sortorder = 'so';
    $scope.image_endpoint = 'http://www.ifiske.se';
    DB.getFishes()
    .then(function(data) {
        $scope.fishes = data;
        $scope.default_img = data[0].img;
    }, function(err) {
        console.log(err);
    });
}]);

angular.module('ifiske.controllers')
.controller('HomeCtrl', [
    '$scope',
    '$state',
    '$ionicHistory',
    'localStorage',
    'sessionData',
    'Update',
    function($scope, $state, $ionicHistory, localStorage, sessionData, Update) {

        $scope.loggedIn = sessionData;

        $scope.update = Update;

        // Current history stack Id. See area_controller for usage.
        localStorage.set('homeHistoryId', $ionicHistory.currentHistoryId());

        $scope.newsTitle = localStorage.get('NEWS');

        $scope.myFunc = function($event) {
            if ($event.keyCode === 13 && !$event.shiftKey) { //if enter-key
                $state.go('app.areas', {search: $event.srcElement.value});
            }

        };
    }
]);

angular.module('ifiske.controllers')
.controller('LegalCtrl', ['$scope', '$state', 'localStorage', function($scope, $state, localStorage) {
    $scope.tos = localStorage.get('tos');
}]);

angular.module('ifiske.controllers')
.controller('LoginCtrl', [
    '$scope',
    '$state',
    'Update',
    '$ionicLoading',
    '$ionicHistory',
    '$ionicViewSwitcher',
    function($scope, $state, Update, $ionicLoading, $ionicHistory, $ionicViewSwitcher) {

        /**
         * signIn
         * Submit handler for login form. Validates login input.
         * Moves to home view on successful login.
         */
        $scope.signIn = function(loginForm) {
            $ionicLoading.show();

            Update.user_login(loginForm.username.$viewValue, loginForm.password.$viewValue)
            .then(function() {
                $ionicLoading.hide();
                loginForm.$setValidity('loginError', true);
                $ionicViewSwitcher.nextDirection('forward');
                $ionicHistory.nextViewOptions({
                    disableBack: true,
                    historyRoot: true
                });
                $state.go('app.home');
            }, function(error) {
                $ionicLoading.hide();
                loginForm.$setValidity('loginError', false);
                $scope.error = error.response;
            });
        };

        /**
         * skip
         * Skips to the home view. Forces forward transition and sets home as root view.
         */
        $scope.skip = function() {
            $ionicViewSwitcher.nextDirection('forward');
            $ionicHistory.nextViewOptions({
                disableBack: true,
                historyRoot: true
            });
            $state.go('app.home');
        };
    }
]);

angular.module('ifiske.controllers')
.controller('MapCtrl', [
    '$scope',
    'leafletData',
    '$ionicPlatform',
    'DB',
    '$cordovaGeolocation',
    '$cordovaDeviceOrientation',
    '$timeout',
    'localStorage',
    function($scope, leafletData, $ionicPlatform, DB, $cordovaGeolocation, $cordovaDeviceOrientation, $timeout, localStorage) {

        var mapboxUrl = 'http://api.tiles.mapbox.com/v4/{maptype}/{z}/{x}/{y}@2x.png?access_token={apikey}';
        var apikey = localStorage.get('mapbox_api');

        var lc = new L.control.locate({
            follow: false,
            position: 'bottomright',
            keepCurrentZoomLevel: false,
            stopFollowingOnDrag: true,
            remainActive: true,
            onLocationError: function(err) {
                console.error(err);
                $timeout(function() {
                    lc.start(); //try again
                });
            },
            onLocationOutsideMapBounds: function(context) {
                console.log(context);
            },
            locateOptions: {
                maxZoom: 14
            },
            icon: 'icon ion-android-locate'

        });
        angular.extend($scope, {
            center: {
                lat: 62.0,
                lng: 15.0,
                zoom: 9,
                autoDiscover: true
            },
            controls: {
                custom: [
                    lc
                ]
            },
            layers: {
                baselayers: {
                    outdoors: {
                        name: 'Utomhus',
                        type: 'xyz',
                        url: mapboxUrl,
                        layerOptions: {
                            maptype: 'mapbox.outdoors',
                            apikey: apikey
                        }
                    },
                    satellite: {
                        name: 'Satellit',
                        type: 'xyz',
                        url: mapboxUrl,
                        layerOptions: {
                            maptype: 'mapbox.satellite',
                            apikey: apikey
                        }
                    }
                },
                overlays: {
                    fishareas: {
                        name: 'Fiskeomr√•den',
                        type: 'markercluster',
                        visible: true,
                        layerParams: {
                            showOnSelector: false,
                            disableClusteringAtZoom: 9,
                            chunkedLoading: true,
                            showCoverageOnHover: false,
                            removeOutsideVisibleBounds: true
                        }
                    },
                }
            },
            markers: {
            }
        });

        var createscope = function(a) {
            return function() {
                var new_scope = $scope.$new();
                new_scope.area = a;
                console.log(a);
                return new_scope;
            };
        };

        $scope.$on('$ionicView.beforeEnter', function() {
            DB.search('').then(function(areas) {
                for(var i = 0; i < areas.length; ++i) {
                    var a = areas[i];
                    $scope.markers['area' + i] = {
                        layer: 'fishareas',
                        lat: a.lat,
                        lng: a.lng,
                        getMessageScope: createscope(a),
                        message: '<a ui-sref="app.area({id: area.ID })" ng-bind="area.t"></a>'
                    };
                }
            });
        });
    }
]);

angular.module('ifiske.controllers')
.controller('MenuCtrl', [
    '$scope',
    '$state',
    '$ionicViewSwitcher',
    '$ionicPopover',
    'sessionData',
    'Update',
    function($scope, $state, $ionicViewSwitcher, $ionicPopover, sessionData, Update) {

        $scope.sessionData = sessionData;

        $ionicPopover.fromTemplateUrl('components/menu/popover.html', {
            scope: $scope
        }).then(function(popover) {
            $scope.popover = popover;
        });

        $scope.userinfo = function() {
            $scope.popover.hide();
            $state.go('app.userinfo');
        };
        $scope.logout = function() {
            $scope.popover.hide();
            Update.user_logout();

            $state.go('app.login');
        };
        $scope.login = function() {
            $scope.popover.hide();
            $ionicViewSwitcher.nextDirection('back');
            $state.go('app.login');
        };
        $scope.register = function() {
            $scope.popover.hide();
            $state.go('app.register.details');
        };

        $scope.forcedUpdate = function() {
            Update.forcedUpdate();
        };

    }
]);

angular.module('ifiske.controllers')
.controller('NewsCtrl', [
    '$scope',
    'DB',
    'localStorage',
    function($scope, DB, localStorage) {
        $scope.newsTitle = localStorage.get('NEWS');

        DB.getNews().then(function(data) {
            $scope.content = data;
        });
    }
]);

angular.module('ifiske.controllers')
.controller('NewsItemCtrl', [
    '$scope',
    '$stateParams',
    'DB',
    function($scope, $stateParams, DB) {
        if ($stateParams.item) {
            $scope.item = $stateParams.item;
        } else {
            DB.getNewsItem($stateParams.id).then(function(data) {
                $scope.item = data;
            });
        }
    }
]);


angular.module('ifiske.controllers')
    .controller('RecoverCtrl', [
	'$scope',
	'$state',
	'$ionicHistory',
	'$ionicPlatform',
	'$ionicLoading',
	'$cordovaToast',
	'API',
	function($scope, $state, $ionicHistory, $ionicPlatform, $ionicLoading, $cordovaToast, API) {
	    'use strict';
	    
	    var user = "";
	    
	    /**
             * ToDo: use to skip from lostpassword to resetpassword
	     * skip
	     * Submit handler for skip button
	     */
            /*
	      $scope.skip = function() {
	      $scope.info = "";
	      $state.go('^.resetpassword');
	      };
            */	    

	    /**
	     * lostPassword
	     * Submit handler for first form
	     */
	    $scope.lostPassword = function(form) {

	        $ionicLoading.show();

	        user = form.user.$viewValue;

	        API.user_lost_password(user)
		    .then(function(data) {
			
			// Set info message for next view
			$scope.info = 'En √•terst√§llningskod kommer skickas till dig inom kort, via ';			
			if (data.mailed) {
			    $scope.info += 'e-mail';
			    if (data.texted) {
				$scope.info += ' och ';
			    }
			}
			if (data.texted) {
			    $scope.info += 'SMS';
			}
                        
			$state.go('^.resetpassword');

		    }, function(error) {
			//ToDo: handle timeout?
			//ToDo: check error codes?
			form.user.$setValidity('invalidUser', false);
		    })
		    .finally($ionicLoading.hide);
	    };


	    /**
	     * resetPassword
	     * Submit handler for second form
	     *
	     * ToDo: log in immediately?
	     */
	    $scope.resetPassword = function(form) {
		$ionicLoading.show();
		
		
		API.user_reset_password(user, form.password.$viewValue, form.code.$viewValue)
		    .then(function(data) {
		
                        //ToDo: handle timeouts?

                        //ToDo: .ready() needed?
	                // Success toast
		        $ionicPlatform.ready(function() {
		            $cordovaToast.showLongBottom('Ditt l√∂senord har √§ndrats');
		        });
	        			
                        $state.go('app.login');

                        // Navigate to current history root?
			//$ionicHistory.goToHistoryRoot($ionicHistory.currentView().historyId);	
		    }, function(error) {
                        switch(error.error_code) {
                        /*case 5:
                            //invalide username
                            break;*/
                        /*case 13:
                            form.password.$setValidity('passwordLength', false);
                            break;*/
                        case 16:
		            form.code.$setValidity('invalidCode',false);
                            break;
                        }
		    })
		    .finally($ionicLoading.hide);
	    };
	}]);

angular.module('ifiske.controllers')
    .controller('RegisterCtrl', [
        '$scope',
        '$state',
        '$ionicLoading',
        '$ionicModal',
        '$ionicScrollDelegate',
        '$ionicPlatform',
        '$cordovaToast',
        'API',
        'localStorage',
        function($scope, $state, $ionicLoading, $ionicModal, $ionicScrollDelegate, $ionicPlatform, $cordovaToast, API, localStorage) {

            var username;

            // Live check for username availability
            $scope.checkUsername = function(input) {
                API.user_exists(input.$viewValue)
                    .then(function(data) {
                        input.$setValidity('nameTaken', !data);
                    });
            };

            // Live check for email availability
            $scope.checkEmail = function(input) {
                API.user_exists(null, input.$viewValue)
                    .then(function(data) {
                        input.$setValidity('emailTaken', !data);
                    });
            };


            // Validation errors not tied to input field
            $scope.formErrors = {};

            /**
             * register
             * Submit handler for the registration form
             */
            $scope.register = function(form) {
                $ionicLoading.show();

                // Save phone number for next view
                $scope.phone = form.phone.$viewValue;

                // Save username for verify submit handler
                username = form.username.$viewValue;

                var password = form.password.$viewValue;
                var fullname = form.fullname.$viewValue;
                var email = form.email.$viewValue;

                API.user_register(username, fullname, password, email, $scope.phone)
                    .then(function(data) {
                        // Success: Go to verify account view
                        $ionicLoading.hide();
                        $scope.formErrors = {};
                        $state.go('^.verify');

                    }, function(error) {
                        /**
                         * Error: Inform the user about failed registration
                         * See API documentation for error codes
                         *
                         * ToDo: Handle timeout
                         */
                        $scope.formErrors.registrationError = true;
                        $ionicScrollDelegate.scrollTop(true);

                        // Invalid Email
                        if (error.error_code == 8) {
                            form.email.$setValidity('invalidEmail', false);
                        }
                        // Username or Email already registered
                        if (error.error_code == 9) {
                            $scope.checkUsername(form.username);
                            $scope.checkEmail(form.email);
                        }
                        // Invalid phone number
                        if (error.error_code == 10) {
                            form.phone.$setValidity('invalidPhone', false);
                        }

                        $ionicLoading.hide();
                    });
            };


            /**
             * verify
             * Submit handler for the verification form
             */
            $scope.verify = function(form) {
                $ionicLoading.show();

                var vercode = form.vercode;

                API.user_confirm(username, vercode.$viewValue)
                    .then(function(data) {
                        $ionicPlatform.ready(function() {
                            $cordovaToast.showLongBottom('Ditt konto har skapats');
                        });
                        $scope.formErrors.validationError = false;
                        $state.go('app.login');
                    }, function(error) {
                        if (error.error_code) {
                            vercode.$setValidity("verified", false);
                        } else {
                            $scope.formErrors.validationError = true;
                        }
                    })
                    .finally($ionicLoading.hide());
            };


            $scope.tos = localStorage.get('tos');
            //Modal with the EULA
            $ionicModal.fromTemplateUrl('components/register/eula.html', {
                scope: $scope,
                animation: 'slide-in-up'
            }).then(function(modal) {
                $scope.eula = modal;
            });
            $scope.showEula = function() {
                $scope.eula.show();
            };
            $scope.closeEula = function() {
                $scope.eula.hide();
            };
            $scope.$on('$destroy', function() {
                $scope.eula.remove();
            });

        }]);

angular.module('ifiske.controllers')
.controller('TechniqueDetailCtrl', [
    '$scope',
    '$stateParams',
    'DB',
    '$ionicSlideBoxDelegate',
    function($scope, $stateParams, DB, $ionicSlideBoxDelegate) {
        $scope.image_endpoint = 'http://www.ifiske.se';
        $scope.tech = $stateParams.tech;
        $scope.images = [];

        if (!$scope.tech) {
            DB.getTechnique($stateParams.id)
            .then(function(data) {
                $scope.images = [data.img1, data.img2, data.img3].filter(function(el) {
                    return !/\/$/.test(el);
                });

                $ionicSlideBoxDelegate.update();
                $scope.tech = data;
            });
        } else {
            var data = $scope.tech;
            $scope.images = [data.img1, data.img2, data.img3].filter(function(el) {
                return !/\/$/.test(el);
            });

            $ionicSlideBoxDelegate.update();
        }
    }
]);

angular.module('ifiske.controllers')
.controller('TechniquesCtrl', ['$scope', 'DB', function($scope, DB) {

    $scope.image_endpoint = 'http://www.ifiske.se';
    $scope.sortorder = 'so';

    $scope.$on('$ionicView.beforeEnter', function() {
        DB.getTechniques()
        .then(function(data) {
            $scope.techniques = data;
        });
    });

}]);

angular.module('ifiske.controllers')
.controller('UserCtrl', ['$scope', 'DB', function($scope, DB) {
    DB.getUserInfo()
    .then(function(user) {
        $scope.user = user;
    });
    DB.getUserNumbers()
    .then(function(numbers) {
        $scope.numbers = numbers;
    });
}]);

angular.module('ifiske.controllers')
.controller('UserCardsCtrl', [
    '$scope',
    '$stateParams',
    'DB',
    'Update',
    '$ionicModal',
    '$ionicLoading',
    function($scope, $stateParams, DB, Update, $ionicModal, $ionicLoading) {
        $scope.pred = '-to';
        $scope.endpoint = 'https://www.ifiske.se';

        var initilize = function() {
            $ionicLoading.show();
            var a = Update.update();
            console.log(a);
            a.then(function(hi) {
                console.log(hi);
            });
            a.finally(function() {
                console.log('hello√§');
                $scope.now = Date.now();
                DB.getUserProducts()
                .then(function(data) {
                    $scope.products = data;
                    console.log($scope);
                    $scope.$broadcast('scroll.refreshComplete');
                    $ionicLoading.hide();
                }, function(err) {
                    console.log(err);
                    $scope.$broadcast('scroll.refreshComplete');
                    $ionicLoading.hide();
                });
            });
        };

        $scope.$on('$ionicView.beforeEnter', initilize);
        //use the same modal as in area_cards
        $ionicModal.fromTemplateUrl('components/area_cards/rules_modal.html', {
            scope: $scope,
            animation: 'slide-in-up'
        }).then(function(modal) {
            $scope.rules_modal = modal;
        });
        $scope.openRulesModal = function(product) {
            $scope.rules_modal.show();
            console.log(product);
            $scope.product = product;
        };
        $scope.closeRulesModal = function() {
            $scope.rules_modal.hide();
        };

        $scope.$on('$destroy', function() {
            $scope.rules_modal.remove();
        });
        $scope.update = function() {
            initilize();
        };
    }
]);

(function(angular, undefined) {
    'use strict';

    angular.module('ifiske.api', ['ifiske.utils'])
    .provider('API', function APIProvider() {

        this.base_url = 'https://www.ifiske.se/api/v2/api.php';

        this.$get = [
            '$http',
            'sessionData',
            'localStorage',
            '$q',
            function($http, sessionData, localStorage, $q) {
                var base_url = this.base_url;

                /**
                 * # api_call #
                 * handles http requests
                 * returns a $http object for the requested api call
                 */
                var api_call = function(params, cache) {
                    return $q(function(fulfill, reject) {
                        $http(
                            {
                                method:'get',
                                url: base_url,
                                params: angular.extend(params, {'key': 'ox07xh8aaypwvq7a'}),
                                timeout: 5000,
                                cache: (cache !== false)
                            }
                        )
                        // ToDo: Proper logging
                        .success(function(data) {
                            if (data.status === 'error') {
                                reject(data.message);
                            } else {
                                if (data.data) {
                                    fulfill(data.data.response);
                                } else {
                                    reject(data);
                                }
                            }
                        })
                        //.error(function(data, status, headers, config, statusText) {
                        .error(function(data, status) {
                            if (status === 0) {
                                reject(new Error('Request timeout'));
                            } else {
                                reject(data);
                            }
                        });
                    });
                };

                /**
                 * # session_api_call #
                 * wrapper for api_call - inserts the session token into params
                 */
                var session_api_call = function(params, cache) {
                    var session = sessionData.token;
                    return api_call(angular.extend(params, {s: session}), cache);
                };

                return {
                    get_municipalities: function() {
                        return api_call({m: 'get_municipalities'});
                    },
                    get_counties: function() {
                        return api_call({m: 'get_counties'});
                    },
                    user_exists: function(username, email) {
                        var args = {m: 'user_exists'};

                        if (username && typeof username === 'string') {
                            args.username = username;
                        }
                        if (email && typeof email === 'string') {
                            args.email = email;
                        }

                        return api_call(args, false);
                    },
                    user_register: function(username, fullname, password, email, phone) {
                        return api_call(
                            {m: 'user_register',
                                username: username,
                                fullname: fullname,
                                password: password,
                                email: email,
                                phone: phone
                            }, false);
                    },
                    user_confirm: function(username, pin) {
                        return api_call({
                            m: 'user_confirm',
                            username: username,
                            pin: pin
                        }, false);
                    },
                    user_info: function() {
                        return session_api_call({m: 'user_info'});
                    },
                    user_lost_password: function(user) {
                        return api_call(
                            {m: 'user_lost_password',
                                user_identification: user
                            }, false);
                    },
                    user_reset_password: function(user_identification, password, code) {
                        return api_call({
                            m: 'user_reset_password',
                            user_identification: user_identification,
                            password: password,
                            code: code
                        }, false);
                    },
                    user_change_password: function(old_password, new_password) {
                        return session_api_call({
                            m: 'user_change_password',
                            old_password: old_password,
                            new_password: new_password
                        }, false);
                    },
                    user_login: function(username, password) {
                        return api_call(
                            {m: 'user_login',
                                username: username,
                                password: password
                            }, false)
                            .then(function(data) {
                                sessionData.setToken(data);

                                //needed for chaining of promises
                                return data;
                            });
                    },
                    user_logout: function() {
                        return session_api_call({m: 'user_logout'}, false)
                        .then(function() {
                            sessionData.deleteToken();
                        });
                    },
                    user_products: function() {
                        return session_api_call({m: 'user_products'}, false);
                    },
                    get_fishes: function() {
                        return api_call({m: 'get_fishes'});
                    },
                    get_techniques: function() {
                        return api_call({m: 'get_techniques'});
                    },
                    get_baits: function() {
                        return api_call({m: 'get_baits'});
                    },
                    get_organizations: function(orgid) {
                        return api_call(
                            {m: 'get_organizations',
                                orgid: orgid
                            });
                    },
                    get_org_modified: function(orgid) {
                        return api_call(
                            {m: 'get_org_modified',
                                orgid: orgid
                            });
                    },
                    get_areas: function(areaid) {
                        return api_call(
                            {m: 'get_areas',
                                areaid: areaid
                            });
                    },
                    get_areas_modified: function(areaid) {
                        return api_call(
                            {m: 'get_areas_modified',
                                areaid: areaid
                            });
                    },
                    get_products: function(areaid) {
                        return api_call(
                            {m: 'get_products',
                                areaid: areaid
                            });
                    },
                    get_rules: function(ruleid) {
                        return api_call(
                            {m: 'get_rules',
                                ruleid: ruleid
                            });
                    },
                    get_photos: function(orgid, areaid) {
                        return api_call(
                            {m: 'get_photos',
                                orgid: orgid,
                                areaid: areaid
                            });
                    },
                    get_map_pois: function(orgid) {
                        return api_call(
                            {m: 'get_map_pois',
                                orgid: orgid
                            });
                    },
                    get_map_poi_types : function() {
                        return api_call({m: 'get_map_poi_types'});
                    },
                    get_map_polygons: function(orgid) {
                        return api_call(
                            {m: 'get_map_polygons',
                                orgid: orgid
                            });
                    },
                    user_get_favorites: function() {
                        return session_api_call({m: 'user_get_favorites'}, false);
                    },
                    user_add_favorite: function(area) {
                        //Flag 0 means to not get notifications on catch reports
                        return session_api_call({m: 'user_add_favorite', areaid: area, flag: 0}, false);
                    },
                    user_set_favorite_notification: function(area, flag) {
                        flag = flag ? 1 : 0;
                        return session_api_call({m: 'user_set_favorite_notification', areaid: area, flag: flag}, false);
                    },
                    user_remove_favorite: function(area) {
                        return session_api_call({m: 'user_remove_favorite', areaid: area}, false);
                    },
                    get_terms_of_service: function() {
                        return api_call({m: 'get_terms_of_service'});
                    },
                    get_contact_info: function() {
                        return api_call({m: 'get_contact_info'});
                    },
                    get_engine_policies: function() {
                        return api_call({m: 'get_engine_policies'});
                    },
                    get_sms_terms: function() {
                        return api_call({m: 'get_sms_terms'});
                    },
                    get_mapbox_api: function() {
                        return api_call({m: 'get_mapbox_apiaccesstoken'});
                    },
                    get_content_menu: function() {
                        return api_call({m: 'get_content_menu'});
                    }
                };
            }];
    });
})(window.angular);

(function(angular, undefined) {
    'use strict';

    angular.module('ifiske.db', [])
    .provider('DB', function DBProvider() {

        this.$get = [
            '$cordovaSQLite',
            'API',
            '$q',
            '$rootScope',
            function($cordovaSQLite, API, $q, $rootScope) {

                var db;
                if (window.sqlitePlugin) {
                    db = $cordovaSQLite.openDB('fiskebasen.db');
                } else if (window.openDatabase) {
                    db = window.openDatabase(
                        'fiskebasen.db', '1.0', 'fiskebasen', 10 * 1024 * 1024);
                } else {
                    console.log('Not supported on this device, sorry');
                    return undefined;
                }

                var tableDef = {
                    'Area': [
                        ['ID',    'int'],
                        ['orgid', 'int'],
                        ['t',     'text'],
                        ['kw',    'text'],
                        ['note',  'text'],
                        ['c1',    'int'],
                        ['c2',    'int'],
                        ['c3',    'int'],
                        ['m1',    'int'],
                        ['m2',    'int'],
                        ['m3',    'int'],
                        ['lat',   'real'],
                        ['lng',   'real'],
                        ['zoom',  'text'],
                        ['pnt',   'int'],
                        ['car',   'int'],
                        ['eng',   'int'],
                        ['hcp',   'int'],
                        ['map',   'text'],
                        ['wsc',   'int'],
                        ['mod',   'int'],
                        ['d',     'text']
                    ],
                    'Area_Fish': [
                        ['ID',       'text'],
                        ['aid',      'int'],
                        ['fid',      'int'],
                        ['amount',   'int'],
                        ['comment',  'text']
                    ],
                    'Product': [
                        ['ID',     'int'],
                        ['t',      'text'],
                        ['t2',     'text'],
                        ['no',     'text'],
                        ['im',     'text'],
                        ['pf',     'text'],
                        ['ai',     'int'],
                        ['ri',     'int'],
                        ['ch',     'int'],
                        ['price',  'int'],
                        ['mod',    'int'],
                        ['so',     'int'],
                        ['hl',     'text']
                    ],
                    'County': [
                        ['ID',   'int'],
                        ['s',    'text'],
                        ['t',    'text'],
                        ['d',    'text']
                    ],
                    'Municipality': [
                        ['ID',    'int'],
                        ['cID',   'int'],
                        ['name',  'text']
                    ],
                    'Fish': [
                        ['ID',    'int'],
                        ['t',     'text'],
                        ['d',     'text'],
                        ['mod',   'int'],
                        ['so',    'int'],
                        ['max',   'int'],
                        ['icon',  'text'],
                        ['img',   'text'],
                        ['in',    'text'],
                        ['geo',   'text'],
                        ['size',  'text'],
                        ['lat',   'text'],
                        ['rec',   'text']
                    ],
                    'Rule': [
                        ['ID',   'int'],
                        ['ver',  'int'],
                        ['d',    'text'],
                        ['t',    'text']
                    ],
                    'User_Product': [
                        ['ID',        'int'],
                        ['at',        'int'],
                        ['code',      'int'],
                        ['fr',        'int'],
                        ['fullname',  'text'],
                        ['ot',        'text'],
                        ['ref1',      'int'],
                        ['ref2',      'int'],
                        ['t',         'text'],
                        ['to',        'int'],
                        ['pid',       'int'],
                        ['pdf',       'text']
                    ],
                    'User_Info': [
                        ['ID',        'int'],
                        ['username',  'text'],
                        ['loggedin',  'text'],
                        ['IP1',       'text'],
                        ['IP2',       'text'],
                        ['name',      'text'],
                        ['email',     'text'],
                        ['created',   'text']
                    ],
                    'User_Number': [
                        ['number', 'text']
                    ],
                    'User_Favorite': [
                        ['ID',  'int'],
                        ['a',   'int'],
                        ['add', 'int'],
                        ['not', 'int'],
                        ['cnt', 'int'],
                    ],
                    'Technique': [
                        ['ID',       'int'],
                        ['t',        'text'],
                        ['d',        'text'],
                        ['so',       'int'],
                        ['de',       'text'],
                        ['da',       'text'],
                        ['icon',     'text'],
                        ['img1',     'text'],
                        ['img2',     'text'],
                        ['img3',     'text'],
                        ['youtube',  'text']
                    ],
                    'Organization': [
                        ['ID',     'int'],
                        ['t',      'text'],
                        ['d',      'text'],
                        ['cp',     'text'],
                        ['url',    'text'],
                        ['co',     'int'],
                        ['mod',    'int'],
                        ['vat',    'int'],
                        ['dp',     'int'],
                        ['fva',    'int'],
                        ['org',    'int'],
                        ['ml',     'int']
                    ],
                    'Poi': [
                        ['ID',     'int'],
                        ['orgid',  'int'],
                        ['type',   'int'],
                        ['price',  'int'],
                        ['t',      'text'],
                        ['d',      'text'],
                        ['la',     'real'],
                        ['lo',     'real']
                    ],
                    'Poi_Type': [
                        ['ID',     'int'],
                        ['t',      'text'],
                        ['icon',   'text'],
                    ],
                    'Polygon': [
                        ['ID',     'int'],
                        ['orgid',  'int'],
                        ['t',      'text'],
                        ['c',      'text'],
                        ['ver',    'int'],
                        ['mod',    'int'],
                        ['poly',   'text']
                    ],
                    'News': [
                        ['ID',     'int'],
                        ['t',      'text'],
                        ['text',   'text']
                    ]

                };

                var createObject = function(data) {
                    var retval = [];
                    for (var i = 0; i < data.rows.length; ++i) {
                        retval.push(data.rows.item(i));
                    }
                    return retval;
                };

                return {
                    populateTable: function(table, data) {
                        return $q(function(fulfill, reject) {
                            db.transaction(function(tx) {
                                tx.executeSql('DELETE FROM ' + table + ';');

                                for (var id in data) {
                                    var singleData = data[id];
                                    var insertData = [];
                                    for (var i = 0; i < tableDef[table].length; ++i) {
                                        insertData.push(singleData[tableDef[table][i][0]]);
                                    }
                                    var query = [
                                        'INSERT INTO',
                                        table,
                                        'VALUES(?',
                                        ',?'.repeat(insertData.length - 1),
                                        ')'
                                    ].join(' ');

                                    tx.executeSql(query, insertData);
                                }
                            },
                            reject,
                            fulfill);
                        });

                    },

                    cleanTable: function(table) {
                        return $q(function(fulfill, reject) {
                            db.transaction(function(tx) {
                                tx.executeSql('DELETE FROM ' + table + ';');
                            },
                            reject,
                            fulfill);
                        });
                    },

                    /**
                     * Drops all tables in the database
                     * @method clean
                     */
                    clean: function() {
                        return $q(function(fulfill, reject) {
                            db.transaction(
                                function(tx) {
                                    for (var table in tableDef) {
                                        tx.executeSql('DROP TABLE IF EXISTS ' + table + ';');
                                    }
                                },
                                reject,
                                fulfill
                            );
                        })
                        .then(function() {
                            console.log('Removed all tables');
                        });
                    },

                    /**
                     * Initialies the tables in the database
                     * @method init
                     */
                    init: function() {
                        return $q(function(fulfill, reject) {
                            db.transaction(function(tx) {
                                for (var t in tableDef) {
                                    var table = tableDef[t];
                                    var tableValues = [];

                                    /*
                                     * Builds a string with "" around all names, so that
                                     * it can be used to create an SQL Table witout having
                                     * to worry about using reserved keywords.
                                     */
                                    for (var i = 0; i < table.length; ++i) {
                                        tableValues.push('"' + table[i][0] + '" ' + table[i][1]);
                                    }
                                    tableValues = tableValues.join(', ');

                                    var query = [
                                        'CREATE TABLE IF NOT EXISTS',
                                        t,
                                        '(',
                                        tableValues,
                                        ', PRIMARY KEY(',
                                        '"' + table[0][0] + '"',
                                        '));'
                                    ].join(' ');
                                    tx.executeSql(query);
                                }
                            },
                            reject,
                            fulfill);
                        });
                    },



                    /**
                     * Gets information about an area
                     * @method getArea
                     * @param {Integer} id
                     */
                    getArea: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT Area.*,',
                                'CASE WHEN User_Favorite.ID IS NULL THEN 0 ELSE 1 END as favorite',
                                'FROM Area',
                                'LEFT JOIN User_Favorite ON User_Favorite.a = Area.ID',
                                'WHERE Area.ID = ?'
                            ].join(' '), Array.isArray(id) ? id : [id])
                            .then(function(area) {
                                console.log(area);
                                var object = createObject(area)[0];
                                //TODO: DB should not need API
                                object.images = API.get_photos(object.orgid);
                                fulfill(object);
                            }, reject);
                        });
                    },

                    getAreaFishes: function(aid) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM Area_Fish',
                                'JOIN Fish ON Area_Fish.fid = Fish.ID',
                                'WHERE Area_Fish.aid = ?'
                            ].join(' '), [aid])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    /**
                     * Searches the database using a query
                     *
                     * The query is matched to a name and/or keyword
                     * @method search
                     * @param {String} searchstring
                     */
                    search: function(searchstring, county_id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT Area.*,',
                                'CASE WHEN User_Favorite.ID IS NULL THEN 0 ELSE 1 END as favorite',
                                'FROM Area',
                                'LEFT JOIN User_Favorite ON User_Favorite.a = Area.ID',
                                'WHERE t LIKE ?',
                                (county_id ? 'AND ? IN (c1,c2,c3)' : ''),
                                'ORDER BY t'
                            ].join(' '),
                            county_id ?
                                ['%' + searchstring + '%', county_id] :
                                ['%' + searchstring + '%'])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    /**
                     * Gets information about a product
                     * @method getProduct
                     * @param {Integer} product_id
                     */
                    getProduct: function(product_id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT DISTINCT Product.*,',
                                'Rule.t as rule_t,',
                                'Rule.ver as rule_ver,',
                                'Rule.d as rule_d',
                                'FROM Product',
                                'JOIN Rule ON Rule.ID = Product.ri',
                                'WHERE ID = ?',
                                'ORDER BY so'
                            ].join(' '),
                            [product_id])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    /**
                     * Gets all products from an area
                     * @method getProductsByArea
                     * @param {Integer} area_id
                     */
                    getProductsByArea: function(area_id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT DISTINCT Product.*,',
                                'Rule.t as rule_t,',
                                'Rule.ver as rule_ver,',
                                'Rule.d as rule_d',
                                'FROM Product',
                                'JOIN Rule ON Rule.ID = Product.ri',
                                'WHERE ai = ?',
                                'ORDER BY so'
                            ].join(' '),
                            [area_id])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getCounties: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT DISTINCT County.*',
                                'FROM County',
                                'JOIN Area ON Area.c1 = County.ID',
                                'ORDER BY County.t'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getUserProducts: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT User_Product.*,',
                                'Rule.t as rule_t,',
                                'Rule.ver as rule_ver,',
                                'Rule.d as rule_d',
                                'FROM User_Product',
                                'LEFT JOIN Product ON Product.ID = User_Product.pid',
                                'LEFT JOIN Rule ON Rule.ID = Product.ri'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getFishes: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT * FROM Fish'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getFish: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT * FROM Fish',
                                'WHERE id = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data)[0]);
                            }, reject);
                        });
                    },

                    getTechniques: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT * FROM Technique'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },
                    getTechnique: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT * FROM Technique',
                                'WHERE ID = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data)[0]);
                            }, reject);
                        });
                    },
                    getOrganization: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT * FROM Organization',
                                'WHERE ID = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data)[0]);
                            }, reject);
                        });
                    },
                    getUserInfo: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM User_Info'
                            ].join(' '))
                            .then(function(user) {
                                fulfill(createObject(user)[0]);
                            }, reject);
                        });
                    },
                    getUserNumbers: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM User_Number'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },
                    getUserFavorites: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM User_Favorite',
                                'JOIN Area ON User_Favorite.a = Area.ID'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    removeFavorite: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'DELETE FROM User_Favorite',
                                'WHERE a = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(data);
                            }, reject);
                        });
                    },

                    getPois: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM Poi',
                                'WHERE orgid = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getPoiTypes: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM Poi_Type'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getPolygons: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM Polygon',
                                'WHERE orgid = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },

                    getNews: function() {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM News'
                            ].join(' '))
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    },
                    getNewsItem: function(id) {
                        return $q(function(fulfill, reject) {
                            $cordovaSQLite.execute(db, [
                                'SELECT *',
                                'FROM News',
                                'WHERE ID = ?'
                            ].join(' '), [id])
                            .then(function(data) {
                                fulfill(createObject(data));
                            }, reject);
                        });
                    }
                };
            }
        ];
    });
})(window.angular);

angular.module('ifiske.filters', [])
.filter('onebr', function() {
    return function(input) {
        return input.replace(/(<br>\s*)+/g, '<br>');
    };
})
.filter('nobrs', function() {
    return function(input) {
        return input.replace(/(<br(\s*\/)*>)+/g, '');
    };
})
.filter('cleantables', function() {
    return function(input) {
        input = input.replace(/(<\/?table>)+/g, '');
        input = input.replace(/(<\/?tr>)+/g, '');
        input = input.replace(/(<\/?th>)+/g, '');
        input = input.replace(/(<(\/?)td.*?>)+?/g, '<$2p>');
        input = input.replace(/<p>\s*<\/p>/g, '');
        return input;
    };
});

(function(angular, undefined) {
    'use strict';

    angular.module('ifiske.update', ['ifiske.api', 'ifiske.db', 'ifiske.utils'])
    .provider('Update', function UpdateProvider() {

        this.$get = [
            'API',
            'DB',
            'localStorage',
            '$q',
            '$ionicLoading',
            'sessionData',
            function(API, DB, localStorage, $q, $ionicLoading, sessionData) {

                var LAST_UPDATE = 'last_update';

                var updates = {
                    auth: [
                        {
                            endpoint: 'user_products',
                            table: 'User_Product',
                        },
                        {
                            endpoint: 'user_get_favorites',
                            table: 'User_Favorite',
                        },
                        {
                            endpoint: 'user_info',
                            table: [
                                'User_Info',
                                'User_Number'
                            ],
                            f: function(data) {
                                var numbers = data.numbers;
                                var numArr = [];
                                for (var i = 0; i < numbers.length; ++i) {
                                    numArr.push({'number': numbers[i]});
                                }
                                return $q.all([
                                    DB.populateTable('User_Info', [data])
                                    .then(function() {
                                        return 'User_Info';
                                    }, function(err) {
                                        console.log(data);
                                        console.log(err);
                                        return $q.reject(err);
                                    }),
                                    DB.populateTable('User_Number', numArr)
                                    .then(function() {
                                        return 'User_Numbers';
                                    }, function(err) {
                                        console.log(err);
                                        return $q.reject(err);
                                    }),
                                ]);
                            }
                        }
                    ],
                    timed: [
                        {
                            endpoint: 'get_areas',
                            f: function(data) {
                                var fishArr = [];
                                for (var key in data) {
                                    var fishes = data[key].fish;
                                    for (var fishKey in fishes) {
                                        fishArr.push({
                                            'ID': key + '_' + fishKey,
                                            fid: fishKey,
                                            aid: key,
                                            amount: fishes[fishKey][0],
                                            comment: fishes[fishKey][1]
                                        });
                                    }
                                }
                                return $q.all([
                                    DB.populateTable('Area', data),
                                    DB.populateTable('Area_Fish', fishArr)
                                ])
                                .then(function() {
                                    return 'Area';
                                }, function(err) {
                                    console.warn(err);
                                    return $q.reject(err);
                                });
                            }
                        },
                        {
                            endpoint: 'get_products',
                            table: 'Product'
                        },
                        {
                            endpoint: 'get_counties',
                            table: 'County'
                        },
                        {
                            endpoint: 'get_municipalities',
                            table: 'Municipality'
                        },
                        {
                            endpoint: 'get_fishes',
                            table: 'Fish'
                        },
                        {
                            endpoint: 'get_rules',
                            table: 'Rule'
                        },
                        {
                            endpoint: 'get_techniques',
                            table: 'Technique'
                        },
                        {
                            endpoint: 'get_organizations',
                            table: 'Organization'
                        },
                        {
                            endpoint: 'get_map_pois',
                            table: 'Poi'
                        },
                        {
                            endpoint: 'get_map_poi_types',
                            table: 'Poi_Type'
                        },
                        {
                            endpoint: 'get_map_polygons',
                            table: 'Polygon'
                        }
                    ],
                    always: [
                        {
                            endpoint: 'get_content_menu',
                            f: function(data) {
                                localStorage.set('NEWS', data.title);
                                return DB.populateTable('News', data.contents)
                                .then(function() {
                                    return 'News';
                                }, function(err) {
                                    console.warn(err);
                                    return $q.reject(err);
                                });
                            }
                        },
                        {
                            endpoint: 'get_terms_of_service',
                            storage_name: 'tos'
                        },
                        {
                            endpoint: 'get_sms_terms',
                            storage_name: 'sms_terms'
                        },
                        {
                            endpoint: 'get_contact_info',
                            storage_name: 'contactInfo'
                        },
                        {
                            endpoint: 'get_mapbox_api',
                            storage_name: 'mapbox_api'
                        }
                    ]
                };

                var timedUpdate = function(currentTime) {

                    var lastUpdate = localStorage.get(LAST_UPDATE);

                    var aWeek = 1000 * 3600 * 24 * 7;
                    return (currentTime - lastUpdate) > aWeek;
                };

                var populate = function(item) {
                    console.log(item);

                    var p = API[item.endpoint]();
                    var then;
                    if (typeof item.f === 'function') {
                        then = item.f;
                    } else if (item.table) {
                        then = function(data) {
                            return DB.populateTable(item.table, data)
                            .then(function() {
                                return item.table;
                            }, function(err) {
                                //TODO: what if we need to remake the tables?
                                console.warn(err);
                                return $q.reject(err);
                            });
                        };
                    } else if (item.storage_name) {
                        then = function(data) {
                            localStorage.set(item.storage_name, data);
                        };
                    }

                    if (then) {
                        p.then(then);
                    } else {
                        console.error('NO ACTION!');
                    }
                };

                var cleanUser = function() {
                    var p = [];
                    for (var i = 0; i < updates.auth.length; ++i) {
                        if (Array.isArray(updates.auth[i].table)) {
                            for (var j = 0; j < updates.auth[i].table.length; ++j) {
                                p.push(DB.cleanTable(updates.auth[i].table[j]));
                            }
                        } else {
                            p.push(DB.cleanTable(updates.auth[i].table));
                        }
                    }
                    return $q.all(p)
                    .then(function() {
                        console.log('Removed user info from database');
                    }, function(err) {
                        console.log('Could not remove user data from database!', err);
                    });
                };

                var updateFunc = function(forced) {
                    $ionicLoading.show();
                    return $q(function(fulfill, reject) {

                        var promises = [];
                        var currentTime = Date.now();
                        var shouldUpdate = (forced || timedUpdate(currentTime));
                        DB.init()
                        .then(function() {
                            console.log('Initialized DB system');
                            for (var i = 0; i < updates.always.length; ++i) {
                                promises.push(populate(updates.always[i]));
                            }
                            if (sessionData.token) {
                                for (i = 0; i < updates.auth.length; ++i) {
                                    promises.push(populate(updates.auth[i]));
                                }
                            }
                            if (shouldUpdate) {
                                for (i = 0; i < updates.timed.length; ++i) {
                                    promises.push(populate(updates.timed[i]));
                                }
                            }

                            $q.all(promises).then(function(stuff) {
                                console.log('Populated:', stuff);
                                if (shouldUpdate) {
                                    localStorage.set(LAST_UPDATE, currentTime);
                                }
                                fulfill('Pass');
                            }, function(err) {
                                if (err.error_code === 7) {
                                    // Authentication failure
                                    // TODO: Show to user
                                    cleanUser();
                                    API.user_logout();
                                    reject('auth failure');
                                } else {
                                    console.warn('Got an error, recreate all tables:', err);
                                    return DB.clean()
                                    .then(updateFunc);
                                }
                            })
                            .finally(function() {
                                $ionicLoading.hide();
                            });
                        });

                    });
                };

                return {
                    update: function() {
                        return updateFunc();
                    },

                    forcedUpdate: function() {
                        return updateFunc(true);
                    },

                    user_logout: function() {
                        cleanUser();
                        return API.user_logout();
                    },
                    user_login: function(username, password) {
                        return API.user_login(username, password)
                        .then(function() {
                            updateFunc();
                        });
                    },
                    last_update: function() {
                        return localStorage.get(LAST_UPDATE);
                    }
                };
            }
        ];
    });
})(window.angular);

angular.module('ifiske.utils', [])

.factory('localStorage', ['$window', function($window) {
    return {
        set: function(key, value) {
            $window.localStorage.setItem(key, value);
        },
        get: function(key) {
            return $window.localStorage.getItem(key);
        },
        remove: function(key) {
            $window.localStorage.removeItem(key);
        }
    };
}])
.service('sessionData', ['localStorage', function(localStorage) {
    this.token = localStorage.get('session');

    this.setToken = function(t) {
        localStorage.set('session', t);
        this.token = t;
        console.log('token set');
    };
    this.deleteToken = function() {
        localStorage.remove('session');
        this.token = null;
        console.log('token unset');
    };
}])

.factory('Licenses', [
    '$http',
    function($http) {
        return {
            get: function() {
                return $http.get('static/licenses.json');
            }
        };
    }
]);

angular.module('ngCordovaSms', [])
.directive('ngCordovaSms', ['$cordovaSms', '$ionicPopup', function($cordovaSms, $ionicPopup) {
    'use strict';
    return {
        restrict: 'A',
        link: function (scope, el, attrs) {
            el.on('click', function(e) {
                e.preventDefault();
                $ionicPopup.prompt({
                    title: 'Skriv in ditt namn',
                    inputType: 'text'
                }).then(function(name) {
                    var message = 'FISKA ' + attrs.ngCordovaSms + ' ' + name;
                    $cordovaSms.send('72456', message, 'INTENT', function() {
                        console.log('succuess');
                    }, function(err) {
                        console.log(err);
                    });
                });
            });
        }
    };
}]);

angular.module('ifiske.directives')
    .directive('ifiskeInput', function() {
	return {
	    restrict: 'E',
	    transclude: true,

	    scope: {
		name: '@',
		id: '@',
		label: '@',
		placeholder: '@',
		type: '@',
		ngPattern: '@',
		ngModel: '=?'

	    },
	    templateUrl: 'directives/input_field/ifiske_input.html',
	    controller: function($scope) {
		$scope.id = $scope.id || $scope.name;
		$scope.type = $scope.type || 'text';
	    }
	}
    })

angular.module('systemBrowser', [])
.directive('systemBrowser', ['$cordovaInAppBrowser', function($cordovaInAppBrowser) {
    'use strict';
    return {
        restrict: 'A',
        link: function (scope, el, attrs) {
            el.on('click', function(e) {
                $cordovaInAppBrowser.open(el[0].href, '_system');
                e.preventDefault();
            });
        }
    };
}])
.directive('globalSystemBrowser', ['$cordovaInAppBrowser', function($cordovaInAppBrowser) {
    'use strict';
    return {
        restrict: 'A',
        link: function (scope, el, attrs) {
            el.on('click', function(e) {
                if (e.target.href && e.target.host !== window.location.host) {
                    $cordovaInAppBrowser.open(e.target.href, '_system');
                    e.preventDefault();
                }
            });
        }
    };
}]);

/*angular.module('treeTabs', ['ionic'])
    .directive('ionTabs', ['$rootScope','$state','$ionicHistory','$ionicViewSwitcher', function($rootScope, $state, $ionicHistory, $ionicViewSwitcher) {
	function getTabRootState(state) {
	    var isRootState;

	    if (state.parent.self.abstract) {
		isRootState = state.self.name;
	    } else {
		isRootState = false;
	    }

	    return  isRootState || getTabRootState(state.parent);
	}

	function isTabRootState(state) {
	    return state.self.name === getTabRootState(state);
	}

	return {
	    restrict: 'EA',
	    require: 'ionTabs',
	    link: function(scope, element, attr, ctrl) {
		console.log('s: ',scope);
		console.log('e: ',element);
		console.log('a: ',attr);
		console.log('c: ',ctrl);
		var selectTab = ctrl.select;
		ctrl.select = function(tab, shouldEmitEvent) {
		    var selectedTab = ctrl.selectedTab();

		    if (arguments.length === 1) {
			shouldEmitEvent = !!(tab.navViewName || tab.uiSref);
		    }

		    if (selectedTab && selectedTab.$historyId == tab.$historyId && !isTabRootState($state.$current)) {
			if (shouldEmitEvent) {
			    $ionicHistory.nextViewOptions({
				disableBack: true,
				historyRoot: false
			    });
			    $ionicViewSwitcher.nextDirection('back');
			    $state.go(getTabRootState($state.$current));
			}
		    } else if (selectedTab && selectedTab.$historyId == tab.$historyId && isTabRootState($state.$current)) {
			return;
		    } else {
			selectTab.apply(this, arguments);
		    }
		};
	    }
	};
    }]);
*/

//# sourceMappingURL=data:application/json;base64,